
my_arabic_name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000277e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000277e  000027f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001710  00000000  00000000  00002834  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b9f  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00004dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000092de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 38 11 	call	0x2270	; 0x2270 <main>
      7a:	0c 94 bd 13 	jmp	0x277a	; 0x277a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 86 13 	jmp	0x270c	; 0x270c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 86 13 	jmp	0x270c	; 0x270c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 96 13 	jmp	0x272c	; 0x272c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MDIO_voidSetPinDirection>:
#define DIO_PIND_REG      *((volatile u8 *) 0X30)


// MDIO_voidSetPinDirection(PORTA, PIN7, OUTPUT);
void MDIO_voidSetPinDirection(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinDirection)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	2d 97       	sbiw	r28, 0x0d	; 13
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinDirection <=OUTPUT))
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <MDIO_voidSetPinDirection+0x22>
     cae:	08 c1       	rjmp	.+528    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <MDIO_voidSetPinDirection+0x2a>
     cb6:	04 c1       	rjmp	.+520    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <MDIO_voidSetPinDirection+0x32>
     cbe:	00 c1       	rjmp	.+512    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
	{
		switch (A_u8PortNo)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3d 87       	std	Y+13, r19	; 0x0d
     cc8:	2c 87       	std	Y+12, r18	; 0x0c
     cca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ccc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <MDIO_voidSetPinDirection+0x48>
     cd4:	4f c0       	rjmp	.+158    	; 0xd74 <MDIO_voidSetPinDirection+0xe6>
     cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd8:	3d 85       	ldd	r19, Y+13	; 0x0d
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <MDIO_voidSetPinDirection+0x5c>
     ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	71 f0       	breq	.+28     	; 0xd04 <MDIO_voidSetPinDirection+0x76>
     ce8:	eb c0       	rjmp	.+470    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
     cea:	2c 85       	ldd	r18, Y+12	; 0x0c
     cec:	3d 85       	ldd	r19, Y+13	; 0x0d
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <MDIO_voidSetPinDirection+0x68>
     cf4:	77 c0       	rjmp	.+238    	; 0xde4 <MDIO_voidSetPinDirection+0x156>
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <MDIO_voidSetPinDirection+0x74>
     d00:	a9 c0       	rjmp	.+338    	; 0xe54 <MDIO_voidSetPinDirection+0x1c6>
     d02:	de c0       	rjmp	.+444    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
		{
		  case PORTA:
			  	  	  switch (A_u8PinDirection)
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3b 87       	std	Y+11, r19	; 0x0b
     d0c:	2a 87       	std	Y+10, r18	; 0x0a
     d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d10:	9b 85       	ldd	r25, Y+11	; 0x0b
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	d1 f0       	breq	.+52     	; 0xd4a <MDIO_voidSetPinDirection+0xbc>
     d16:	2a 85       	ldd	r18, Y+10	; 0x0a
     d18:	3b 85       	ldd	r19, Y+11	; 0x0b
     d1a:	21 30       	cpi	r18, 0x01	; 1
     d1c:	31 05       	cpc	r19, r1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <MDIO_voidSetPinDirection+0x94>
     d20:	cf c0       	rjmp	.+414    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
			  	  	  {
			  	  	    case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <MDIO_voidSetPinDirection+0xb2>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <MDIO_voidSetPinDirection+0xae>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	bb c0       	rjmp	.+374    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
			  	  	    case INPUT : CLR_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     d4a:	aa e3       	ldi	r26, 0x3A	; 58
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e3       	ldi	r30, 0x3A	; 58
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <MDIO_voidSetPinDirection+0xda>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <MDIO_voidSetPinDirection+0xd6>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	a6 c0       	rjmp	.+332    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
			  	  	  }
			  	  	  break;
		 case PORTB:
					  switch (A_u8PinDirection)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	39 87       	std	Y+9, r19	; 0x09
     d7c:	28 87       	std	Y+8, r18	; 0x08
     d7e:	88 85       	ldd	r24, Y+8	; 0x08
     d80:	99 85       	ldd	r25, Y+9	; 0x09
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	d1 f0       	breq	.+52     	; 0xdba <MDIO_voidSetPinDirection+0x12c>
     d86:	28 85       	ldd	r18, Y+8	; 0x08
     d88:	39 85       	ldd	r19, Y+9	; 0x09
     d8a:	21 30       	cpi	r18, 0x01	; 1
     d8c:	31 05       	cpc	r19, r1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <MDIO_voidSetPinDirection+0x104>
     d90:	97 c0       	rjmp	.+302    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     d92:	a7 e3       	ldi	r26, 0x37	; 55
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e7 e3       	ldi	r30, 0x37	; 55
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <MDIO_voidSetPinDirection+0x122>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <MDIO_voidSetPinDirection+0x11e>
     db4:	84 2b       	or	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	83 c0       	rjmp	.+262    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     dba:	a7 e3       	ldi	r26, 0x37	; 55
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e3       	ldi	r30, 0x37	; 55
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MDIO_voidSetPinDirection+0x14a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <MDIO_voidSetPinDirection+0x146>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	6e c0       	rjmp	.+220    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTC:
					  switch (A_u8PinDirection)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3f 83       	std	Y+7, r19	; 0x07
     dec:	2e 83       	std	Y+6, r18	; 0x06
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	d1 f0       	breq	.+52     	; 0xe2a <MDIO_voidSetPinDirection+0x19c>
     df6:	2e 81       	ldd	r18, Y+6	; 0x06
     df8:	3f 81       	ldd	r19, Y+7	; 0x07
     dfa:	21 30       	cpi	r18, 0x01	; 1
     dfc:	31 05       	cpc	r19, r1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <MDIO_voidSetPinDirection+0x174>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     e02:	a4 e3       	ldi	r26, 0x34	; 52
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e4 e3       	ldi	r30, 0x34	; 52
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <MDIO_voidSetPinDirection+0x192>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <MDIO_voidSetPinDirection+0x18e>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	4b c0       	rjmp	.+150    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <MDIO_voidSetPinDirection+0x1ba>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <MDIO_voidSetPinDirection+0x1b6>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	36 c0       	rjmp	.+108    	; 0xec0 <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTD:
					  switch (A_u8PinDirection)
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3d 83       	std	Y+5, r19	; 0x05
     e5c:	2c 83       	std	Y+4, r18	; 0x04
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	c9 f0       	breq	.+50     	; 0xe98 <MDIO_voidSetPinDirection+0x20a>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	21 30       	cpi	r18, 0x01	; 1
     e6c:	31 05       	cpc	r19, r1
     e6e:	41 f5       	brne	.+80     	; 0xec0 <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     e70:	a1 e3       	ldi	r26, 0x31	; 49
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e3       	ldi	r30, 0x31	; 49
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <MDIO_voidSetPinDirection+0x200>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <MDIO_voidSetPinDirection+0x1fc>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     e98:	a1 e3       	ldi	r26, 0x31	; 49
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e1 e3       	ldi	r30, 0x31	; 49
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <MDIO_voidSetPinDirection+0x228>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <MDIO_voidSetPinDirection+0x224>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
     ec0:	2d 96       	adiw	r28, 0x0d	; 13
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinValue)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	2d 97       	sbiw	r28, 0x0d	; 13
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	6a 83       	std	Y+2, r22	; 0x02
     eea:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinValue <=HIGH))
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <MDIO_voidSetPinValue+0x22>
     ef2:	08 c1       	rjmp	.+528    	; 0x1104 <MDIO_voidSetPinValue+0x232>
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	08 f0       	brcs	.+2      	; 0xefc <MDIO_voidSetPinValue+0x2a>
     efa:	04 c1       	rjmp	.+520    	; 0x1104 <MDIO_voidSetPinValue+0x232>
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	08 f0       	brcs	.+2      	; 0xf04 <MDIO_voidSetPinValue+0x32>
     f02:	00 c1       	rjmp	.+512    	; 0x1104 <MDIO_voidSetPinValue+0x232>
	{
		switch (A_u8PortNo)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3d 87       	std	Y+13, r19	; 0x0d
     f0c:	2c 87       	std	Y+12, r18	; 0x0c
     f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f10:	9d 85       	ldd	r25, Y+13	; 0x0d
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <MDIO_voidSetPinValue+0x48>
     f18:	4f c0       	rjmp	.+158    	; 0xfb8 <MDIO_voidSetPinValue+0xe6>
     f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	2c f4       	brge	.+10     	; 0xf2e <MDIO_voidSetPinValue+0x5c>
     f24:	8c 85       	ldd	r24, Y+12	; 0x0c
     f26:	9d 85       	ldd	r25, Y+13	; 0x0d
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	71 f0       	breq	.+28     	; 0xf48 <MDIO_voidSetPinValue+0x76>
     f2c:	eb c0       	rjmp	.+470    	; 0x1104 <MDIO_voidSetPinValue+0x232>
     f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f30:	3d 85       	ldd	r19, Y+13	; 0x0d
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <MDIO_voidSetPinValue+0x68>
     f38:	77 c0       	rjmp	.+238    	; 0x1028 <MDIO_voidSetPinValue+0x156>
     f3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <MDIO_voidSetPinValue+0x74>
     f44:	a9 c0       	rjmp	.+338    	; 0x1098 <MDIO_voidSetPinValue+0x1c6>
     f46:	de c0       	rjmp	.+444    	; 0x1104 <MDIO_voidSetPinValue+0x232>
		{
			case PORTA:
						switch (A_u8PinValue)
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3b 87       	std	Y+11, r19	; 0x0b
     f50:	2a 87       	std	Y+10, r18	; 0x0a
     f52:	8a 85       	ldd	r24, Y+10	; 0x0a
     f54:	9b 85       	ldd	r25, Y+11	; 0x0b
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	d1 f0       	breq	.+52     	; 0xf8e <MDIO_voidSetPinValue+0xbc>
     f5a:	2a 85       	ldd	r18, Y+10	; 0x0a
     f5c:	3b 85       	ldd	r19, Y+11	; 0x0b
     f5e:	21 30       	cpi	r18, 0x01	; 1
     f60:	31 05       	cpc	r19, r1
     f62:	09 f0       	breq	.+2      	; 0xf66 <MDIO_voidSetPinValue+0x94>
     f64:	cf c0       	rjmp	.+414    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTA_REG,A_u8PinNo); break;
     f66:	ab e3       	ldi	r26, 0x3B	; 59
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	eb e3       	ldi	r30, 0x3B	; 59
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <MDIO_voidSetPinValue+0xb2>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <MDIO_voidSetPinValue+0xae>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	bb c0       	rjmp	.+374    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTA_REG,A_u8PinNo); break;
     f8e:	ab e3       	ldi	r26, 0x3B	; 59
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e3       	ldi	r30, 0x3B	; 59
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <MDIO_voidSetPinValue+0xda>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <MDIO_voidSetPinValue+0xd6>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	a6 c0       	rjmp	.+332    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTB:
						switch (A_u8PinValue)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	39 87       	std	Y+9, r19	; 0x09
     fc0:	28 87       	std	Y+8, r18	; 0x08
     fc2:	88 85       	ldd	r24, Y+8	; 0x08
     fc4:	99 85       	ldd	r25, Y+9	; 0x09
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	d1 f0       	breq	.+52     	; 0xffe <MDIO_voidSetPinValue+0x12c>
     fca:	28 85       	ldd	r18, Y+8	; 0x08
     fcc:	39 85       	ldd	r19, Y+9	; 0x09
     fce:	21 30       	cpi	r18, 0x01	; 1
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <MDIO_voidSetPinValue+0x104>
     fd4:	97 c0       	rjmp	.+302    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTB_REG,A_u8PinNo); break;
     fd6:	a8 e3       	ldi	r26, 0x38	; 56
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e8 e3       	ldi	r30, 0x38	; 56
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <MDIO_voidSetPinValue+0x122>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <MDIO_voidSetPinValue+0x11e>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	83 c0       	rjmp	.+262    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTB_REG,A_u8PinNo); break;
     ffe:	a8 e3       	ldi	r26, 0x38	; 56
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e8 e3       	ldi	r30, 0x38	; 56
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <MDIO_voidSetPinValue+0x14a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <MDIO_voidSetPinValue+0x146>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	6e c0       	rjmp	.+220    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTC:
						switch (A_u8PinValue)
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3f 83       	std	Y+7, r19	; 0x07
    1030:	2e 83       	std	Y+6, r18	; 0x06
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	9f 81       	ldd	r25, Y+7	; 0x07
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	d1 f0       	breq	.+52     	; 0x106e <MDIO_voidSetPinValue+0x19c>
    103a:	2e 81       	ldd	r18, Y+6	; 0x06
    103c:	3f 81       	ldd	r19, Y+7	; 0x07
    103e:	21 30       	cpi	r18, 0x01	; 1
    1040:	31 05       	cpc	r19, r1
    1042:	09 f0       	breq	.+2      	; 0x1046 <MDIO_voidSetPinValue+0x174>
    1044:	5f c0       	rjmp	.+190    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    1046:	a5 e3       	ldi	r26, 0x35	; 53
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <MDIO_voidSetPinValue+0x192>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <MDIO_voidSetPinValue+0x18e>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	4b c0       	rjmp	.+150    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <MDIO_voidSetPinValue+0x1ba>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <MDIO_voidSetPinValue+0x1b6>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	36 c0       	rjmp	.+108    	; 0x1104 <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTD:
						switch (A_u8PinValue)
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3d 83       	std	Y+5, r19	; 0x05
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	c9 f0       	breq	.+50     	; 0x10dc <MDIO_voidSetPinValue+0x20a>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	21 30       	cpi	r18, 0x01	; 1
    10b0:	31 05       	cpc	r19, r1
    10b2:	41 f5       	brne	.+80     	; 0x1104 <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    10b4:	a2 e3       	ldi	r26, 0x32	; 50
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e2 e3       	ldi	r30, 0x32	; 50
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <MDIO_voidSetPinValue+0x200>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <MDIO_voidSetPinValue+0x1fc>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <MDIO_voidSetPinValue+0x228>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <MDIO_voidSetPinValue+0x224>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
						}
						break;
		}
	}
}
    1104:	2d 96       	adiw	r28, 0x0d	; 13
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <MDIO_u8GetPinValue>:


u8   MDIO_u8GetPinValue(u8 A_u8PortNo, u8 A_u8PinNo)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <MDIO_u8GetPinValue+0x6>
    111c:	00 d0       	rcall	.+0      	; 0x111e <MDIO_u8GetPinValue+0x8>
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	8a 83       	std	Y+2, r24	; 0x02
    1126:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=5;
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	89 83       	std	Y+1, r24	; 0x01
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	08 f0       	brcs	.+2      	; 0x1134 <MDIO_u8GetPinValue+0x1e>
    1132:	6b c0       	rjmp	.+214    	; 0x120a <MDIO_u8GetPinValue+0xf4>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <MDIO_u8GetPinValue+0x26>
    113a:	67 c0       	rjmp	.+206    	; 0x120a <MDIO_u8GetPinValue+0xf4>
		{
			switch (A_u8PortNo)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	4c 81       	ldd	r20, Y+4	; 0x04
    1148:	5d 81       	ldd	r21, Y+5	; 0x05
    114a:	41 30       	cpi	r20, 0x01	; 1
    114c:	51 05       	cpc	r21, r1
    114e:	41 f1       	breq	.+80     	; 0x11a0 <MDIO_u8GetPinValue+0x8a>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	34 f4       	brge	.+12     	; 0x1166 <MDIO_u8GetPinValue+0x50>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	61 f0       	breq	.+24     	; 0x117c <MDIO_u8GetPinValue+0x66>
    1164:	52 c0       	rjmp	.+164    	; 0x120a <MDIO_u8GetPinValue+0xf4>
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	5d 81       	ldd	r21, Y+5	; 0x05
    116a:	42 30       	cpi	r20, 0x02	; 2
    116c:	51 05       	cpc	r21, r1
    116e:	51 f1       	breq	.+84     	; 0x11c4 <MDIO_u8GetPinValue+0xae>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	b9 f1       	breq	.+110    	; 0x11e8 <MDIO_u8GetPinValue+0xd2>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <MDIO_u8GetPinValue+0xf4>
			{
			 case PORTA: local_u8PinValue= GET_BIT(DIO_PINA_REG,A_u8PinNo);  break;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <MDIO_u8GetPinValue+0x7e>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <MDIO_u8GetPinValue+0x7a>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	35 c0       	rjmp	.+106    	; 0x120a <MDIO_u8GetPinValue+0xf4>
			 case PORTB: local_u8PinValue= GET_BIT(DIO_PINB_REG,A_u8PinNo);  break;
    11a0:	e6 e3       	ldi	r30, 0x36	; 54
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	88 2f       	mov	r24, r24
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <MDIO_u8GetPinValue+0xa2>
    11b4:	55 95       	asr	r21
    11b6:	47 95       	ror	r20
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <MDIO_u8GetPinValue+0x9e>
    11bc:	ca 01       	movw	r24, r20
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	23 c0       	rjmp	.+70     	; 0x120a <MDIO_u8GetPinValue+0xf4>
			 case PORTC: local_u8PinValue= GET_BIT(DIO_PINC_REG,A_u8PinNo);  break;
    11c4:	e3 e3       	ldi	r30, 0x33	; 51
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <MDIO_u8GetPinValue+0xc6>
    11d8:	55 95       	asr	r21
    11da:	47 95       	ror	r20
    11dc:	8a 95       	dec	r24
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <MDIO_u8GetPinValue+0xc2>
    11e0:	ca 01       	movw	r24, r20
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <MDIO_u8GetPinValue+0xf4>
			 case PORTD: local_u8PinValue= GET_BIT(DIO_PIND_REG,A_u8PinNo);  break;
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <MDIO_u8GetPinValue+0xea>
    11fc:	55 95       	asr	r21
    11fe:	47 95       	ror	r20
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <MDIO_u8GetPinValue+0xe6>
    1204:	ca 01       	movw	r24, r20
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return local_u8PinValue;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_voidSetPortDirection+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <MDIO_voidSetPortDirection+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	90 f5       	brcc	.+100    	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
		{
			switch (A_u8PortNo)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	d1 f0       	breq	.+52     	; 0x127a <MDIO_voidSetPortDirection+0x5e>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <MDIO_voidSetPortDirection+0x3e>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <MDIO_voidSetPortDirection+0x54>
    1258:	1e c0       	rjmp	.+60     	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <MDIO_voidSetPortDirection+0x68>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <MDIO_voidSetPortDirection+0x72>
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
			{
			 case PORTA: DIO_DDRA_REG= A_u8PortDirection;  break;
    1270:	ea e3       	ldi	r30, 0x3A	; 58
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
			 case PORTB: DIO_DDRB_REG= A_u8PortDirection;  break;
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
			 case PORTC: DIO_DDRC_REG= A_u8PortDirection;  break;
    1284:	e4 e3       	ldi	r30, 0x34	; 52
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <MDIO_voidSetPortDirection+0x7a>
			 case PORTD: DIO_DDRD_REG= A_u8PortDirection;  break;
    128e:	e1 e3       	ldi	r30, 0x31	; 49
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
			}
		}

}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue    (u8 A_u8PortNo,u8 A_u8PortValue)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <MDIO_voidSetPortValue+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <MDIO_voidSetPortValue+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	90 f5       	brcc	.+100    	; 0x131e <MDIO_voidSetPortValue+0x7a>
			{
				switch (A_u8PortNo)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3c 83       	std	Y+4, r19	; 0x04
    12c2:	2b 83       	std	Y+3, r18	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	d1 f0       	breq	.+52     	; 0x1302 <MDIO_voidSetPortValue+0x5e>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <MDIO_voidSetPortValue+0x3e>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <MDIO_voidSetPortValue+0x54>
    12e0:	1e c0       	rjmp	.+60     	; 0x131e <MDIO_voidSetPortValue+0x7a>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <MDIO_voidSetPortValue+0x68>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	81 f0       	breq	.+32     	; 0x1316 <MDIO_voidSetPortValue+0x72>
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <MDIO_voidSetPortValue+0x7a>
				{
				 case PORTA: DIO_PORTA_REG= A_u8PortValue;  break;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	80 83       	st	Z, r24
    1300:	0e c0       	rjmp	.+28     	; 0x131e <MDIO_voidSetPortValue+0x7a>
				 case PORTB: DIO_PORTB_REG= A_u8PortValue;  break;
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	09 c0       	rjmp	.+18     	; 0x131e <MDIO_voidSetPortValue+0x7a>
				 case PORTC: DIO_PORTC_REG= A_u8PortValue;  break;
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	04 c0       	rjmp	.+8      	; 0x131e <MDIO_voidSetPortValue+0x7a>
				 case PORTD: DIO_PORTD_REG= A_u8PortValue;  break;
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
				}
			}
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <HLCD_voidSendCommand>:




void HLCD_voidSendCommand(u8 A_u8Command)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	6d 97       	sbiw	r28, 0x1d	; 29
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,LOW);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>


	//Send Command ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	6d 8d       	ldd	r22, Y+29	; 0x1d
    135a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 e8       	ldi	r26, 0x80	; 128
    136e:	bf e3       	ldi	r27, 0x3F	; 63
    1370:	89 8f       	std	Y+25, r24	; 0x19
    1372:	9a 8f       	std	Y+26, r25	; 0x1a
    1374:	ab 8f       	std	Y+27, r26	; 0x1b
    1376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	69 8d       	ldd	r22, Y+25	; 0x19
    137a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    137c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8d 8b       	std	Y+21, r24	; 0x15
    1392:	9e 8b       	std	Y+22, r25	; 0x16
    1394:	af 8b       	std	Y+23, r26	; 0x17
    1396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	8b 8b       	std	Y+19, r24	; 0x13
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <HLCD_voidSendCommand+0xee>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9a 8b       	std	Y+18, r25	; 0x12
    1402:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	9a 89       	ldd	r25, Y+18	; 0x12
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <HLCD_voidSendCommand+0xdc>
    140c:	9a 8b       	std	Y+18, r25	; 0x12
    140e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8b 89       	ldd	r24, Y+19	; 0x13
    1412:	9c 89       	ldd	r25, Y+20	; 0x14
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9c 8b       	std	Y+20, r25	; 0x14
    1418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <HLCD_voidSendCommand+0xd0>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	98 8b       	std	Y+16, r25	; 0x10
    143e:	8f 87       	std	Y+15, r24	; 0x0f
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	98 89       	ldd	r25, Y+16	; 0x10
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <HLCD_voidSendCommand+0x118>
    1448:	98 8b       	std	Y+16, r25	; 0x10
    144a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	62 e0       	ldi	r22, 0x02	; 2
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	a0 e8       	ldi	r26, 0x80	; 128
    145c:	bf e3       	ldi	r27, 0x3F	; 63
    145e:	8b 87       	std	Y+11, r24	; 0x0b
    1460:	9c 87       	std	Y+12, r25	; 0x0c
    1462:	ad 87       	std	Y+13, r26	; 0x0d
    1464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1466:	6b 85       	ldd	r22, Y+11	; 0x0b
    1468:	7c 85       	ldd	r23, Y+12	; 0x0c
    146a:	8d 85       	ldd	r24, Y+13	; 0x0d
    146c:	9e 85       	ldd	r25, Y+14	; 0x0e
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4a ef       	ldi	r20, 0xFA	; 250
    1474:	54 e4       	ldi	r21, 0x44	; 68
    1476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	8f 83       	std	Y+7, r24	; 0x07
    1480:	98 87       	std	Y+8, r25	; 0x08
    1482:	a9 87       	std	Y+9, r26	; 0x09
    1484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1486:	6f 81       	ldd	r22, Y+7	; 0x07
    1488:	78 85       	ldd	r23, Y+8	; 0x08
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e8       	ldi	r20, 0x80	; 128
    1494:	5f e3       	ldi	r21, 0x3F	; 63
    1496:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    149a:	88 23       	and	r24, r24
    149c:	2c f4       	brge	.+10     	; 0x14a8 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	3f c0       	rjmp	.+126    	; 0x1526 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    14a8:	6f 81       	ldd	r22, Y+7	; 0x07
    14aa:	78 85       	ldd	r23, Y+8	; 0x08
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	3f ef       	ldi	r19, 0xFF	; 255
    14b4:	4f e7       	ldi	r20, 0x7F	; 127
    14b6:	57 e4       	ldi	r21, 0x47	; 71
    14b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14bc:	18 16       	cp	r1, r24
    14be:	4c f5       	brge	.+82     	; 0x1512 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e2       	ldi	r20, 0x20	; 32
    14ce:	51 e4       	ldi	r21, 0x41	; 65
    14d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <HLCD_voidSendCommand+0x1dc>
    14ea:	88 ec       	ldi	r24, 0xC8	; 200
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <HLCD_voidSendCommand+0x1ca>
    14fa:	9c 83       	std	Y+4, r25	; 0x04
    14fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	69 f7       	brne	.-38     	; 0x14ea <HLCD_voidSendCommand+0x1be>
    1510:	14 c0       	rjmp	.+40     	; 0x153a <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1512:	6f 81       	ldd	r22, Y+7	; 0x07
    1514:	78 85       	ldd	r23, Y+8	; 0x08
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <HLCD_voidSendCommand+0x206>
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01





}
    153a:	6d 96       	adiw	r28, 0x1d	; 29
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <HLCD_voidSendData>:



void HLCD_voidSendData(u8 A_u8Data)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	6d 97       	sbiw	r28, 0x1d	; 29
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA respectively
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,HIGH);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	41 e0       	ldi	r20, 0x01	; 1
    1568:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>


	//Send Data ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	6d 8d       	ldd	r22, Y+29	; 0x1d
    157a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e8       	ldi	r26, 0x80	; 128
    158e:	bf e3       	ldi	r27, 0x3F	; 63
    1590:	89 8f       	std	Y+25, r24	; 0x19
    1592:	9a 8f       	std	Y+26, r25	; 0x1a
    1594:	ab 8f       	std	Y+27, r26	; 0x1b
    1596:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	69 8d       	ldd	r22, Y+25	; 0x19
    159a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8d 8b       	std	Y+21, r24	; 0x15
    15b2:	9e 8b       	std	Y+22, r25	; 0x16
    15b4:	af 8b       	std	Y+23, r26	; 0x17
    15b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <HLCD_voidSendData+0x8e>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    15da:	6d 89       	ldd	r22, Y+21	; 0x15
    15dc:	7e 89       	ldd	r23, Y+22	; 0x16
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	69 8d       	ldd	r22, Y+25	; 0x19
    15f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9c 8b       	std	Y+20, r25	; 0x14
    1618:	8b 8b       	std	Y+19, r24	; 0x13
    161a:	0f c0       	rjmp	.+30     	; 0x163a <HLCD_voidSendData+0xee>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9a 8b       	std	Y+18, r25	; 0x12
    1622:	89 8b       	std	Y+17, r24	; 0x11
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	9a 89       	ldd	r25, Y+18	; 0x12
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <HLCD_voidSendData+0xdc>
    162c:	9a 8b       	std	Y+18, r25	; 0x12
    162e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <HLCD_voidSendData+0xd0>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	6d 89       	ldd	r22, Y+21	; 0x15
    1646:	7e 89       	ldd	r23, Y+22	; 0x16
    1648:	8f 89       	ldd	r24, Y+23	; 0x17
    164a:	98 8d       	ldd	r25, Y+24	; 0x18
    164c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	98 8b       	std	Y+16, r25	; 0x10
    165e:	8f 87       	std	Y+15, r24	; 0x0f
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	98 89       	ldd	r25, Y+16	; 0x10
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <HLCD_voidSendData+0x118>
    1668:	98 8b       	std	Y+16, r25	; 0x10
    166a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	62 e0       	ldi	r22, 0x02	; 2
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 69 07 	call	0xed2	; 0xed2 <MDIO_voidSetPinValue>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e8       	ldi	r26, 0x80	; 128
    167c:	bf e3       	ldi	r27, 0x3F	; 63
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <HLCD_voidSendData+0x1dc>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <HLCD_voidSendData+0x1ca>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <HLCD_voidSendData+0x1be>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <HLCD_voidSendData+0x206>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01





}
    175a:	6d 96       	adiw	r28, 0x1d	; 29
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <HLCD_voidInit>:




// 8bit Init. func.
void HLCD_voidInit(void){
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	cc 54       	subi	r28, 0x4C	; 76
    177a:	d0 40       	sbci	r29, 0x00	; 0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	fe 01       	movw	r30, r28
    1788:	e7 5b       	subi	r30, 0xB7	; 183
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a8 ef       	ldi	r26, 0xF8	; 248
    1792:	b1 e4       	ldi	r27, 0x41	; 65
    1794:	80 83       	st	Z, r24
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	a2 83       	std	Z+2, r26	; 0x02
    179a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	8e 01       	movw	r16, r28
    179e:	0b 5b       	subi	r16, 0xBB	; 187
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	fe 01       	movw	r30, r28
    17a4:	e7 5b       	subi	r30, 0xB7	; 183
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a ef       	ldi	r20, 0xFA	; 250
    17b6:	54 e4       	ldi	r21, 0x44	; 68
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	f8 01       	movw	r30, r16
    17c2:	80 83       	st	Z, r24
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	a2 83       	std	Z+2, r26	; 0x02
    17c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ca:	fe 01       	movw	r30, r28
    17cc:	eb 5b       	subi	r30, 0xBB	; 187
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	82 81       	ldd	r24, Z+2	; 0x02
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	44 f4       	brge	.+16     	; 0x17f8 <HLCD_voidInit+0x8c>
		__ticks = 1;
    17e8:	fe 01       	movw	r30, r28
    17ea:	ed 5b       	subi	r30, 0xBD	; 189
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
    17f6:	64 c0       	rjmp	.+200    	; 0x18c0 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    17f8:	fe 01       	movw	r30, r28
    17fa:	eb 5b       	subi	r30, 0xBB	; 187
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	60 81       	ld	r22, Z
    1800:	71 81       	ldd	r23, Z+1	; 0x01
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	3f ef       	ldi	r19, 0xFF	; 255
    180a:	4f e7       	ldi	r20, 0x7F	; 127
    180c:	57 e4       	ldi	r21, 0x47	; 71
    180e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1812:	18 16       	cp	r1, r24
    1814:	0c f0       	brlt	.+2      	; 0x1818 <HLCD_voidInit+0xac>
    1816:	43 c0       	rjmp	.+134    	; 0x189e <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	fe 01       	movw	r30, r28
    181a:	e7 5b       	subi	r30, 0xB7	; 183
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8e 01       	movw	r16, r28
    1838:	0d 5b       	subi	r16, 0xBD	; 189
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	f8 01       	movw	r30, r16
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
    184e:	1f c0       	rjmp	.+62     	; 0x188e <HLCD_voidInit+0x122>
    1850:	fe 01       	movw	r30, r28
    1852:	ef 5b       	subi	r30, 0xBF	; 191
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	88 ec       	ldi	r24, 0xC8	; 200
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
    185e:	fe 01       	movw	r30, r28
    1860:	ef 5b       	subi	r30, 0xBF	; 191
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <HLCD_voidInit+0xfc>
    186c:	fe 01       	movw	r30, r28
    186e:	ef 5b       	subi	r30, 0xBF	; 191
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	de 01       	movw	r26, r28
    1878:	ad 5b       	subi	r26, 0xBD	; 189
    187a:	bf 4f       	sbci	r27, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	ed 5b       	subi	r30, 0xBD	; 189
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	9c 93       	st	X, r25
    188c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	d1 f6       	brne	.-76     	; 0x1850 <HLCD_voidInit+0xe4>
    189c:	24 c0       	rjmp	.+72     	; 0x18e6 <HLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189e:	8e 01       	movw	r16, r28
    18a0:	0d 5b       	subi	r16, 0xBD	; 189
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	fe 01       	movw	r30, r28
    18a6:	eb 5b       	subi	r30, 0xBB	; 187
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	f8 01       	movw	r30, r16
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
    18c0:	fe 01       	movw	r30, r28
    18c2:	ed 5b       	subi	r30, 0xBD	; 189
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	91 81       	ldd	r25, Z+1	; 0x01
    18ca:	fe 01       	movw	r30, r28
    18cc:	ff 96       	adiw	r30, 0x3f	; 63
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	fe 01       	movw	r30, r28
    18d4:	ff 96       	adiw	r30, 0x3f	; 63
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <HLCD_voidInit+0x16e>
    18de:	fe 01       	movw	r30, r28
    18e0:	ff 96       	adiw	r30, 0x3f	; 63
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24

	//wait more than 30 msc
	_delay_ms(31);

	//Function set 0b00111100
	HLCD_voidSendCommand(LCD_FUNCTION_SET);
    18e6:	8c e3       	ldi	r24, 0x3C	; 60
    18e8:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e2       	ldi	r26, 0x20	; 32
    18f2:	b2 e4       	ldi	r27, 0x42	; 66
    18f4:	8b af       	std	Y+59, r24	; 0x3b
    18f6:	9c af       	std	Y+60, r25	; 0x3c
    18f8:	ad af       	std	Y+61, r26	; 0x3d
    18fa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18fc:	6b ad       	ldd	r22, Y+59	; 0x3b
    18fe:	7c ad       	ldd	r23, Y+60	; 0x3c
    1900:	8d ad       	ldd	r24, Y+61	; 0x3d
    1902:	9e ad       	ldd	r25, Y+62	; 0x3e
    1904:	2b ea       	ldi	r18, 0xAB	; 171
    1906:	3a ea       	ldi	r19, 0xAA	; 170
    1908:	4a e2       	ldi	r20, 0x2A	; 42
    190a:	50 e4       	ldi	r21, 0x40	; 64
    190c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8f ab       	std	Y+55, r24	; 0x37
    1916:	98 af       	std	Y+56, r25	; 0x38
    1918:	a9 af       	std	Y+57, r26	; 0x39
    191a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    191c:	6f a9       	ldd	r22, Y+55	; 0x37
    191e:	78 ad       	ldd	r23, Y+56	; 0x38
    1920:	89 ad       	ldd	r24, Y+57	; 0x39
    1922:	9a ad       	ldd	r25, Y+58	; 0x3a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	1c f4       	brge	.+6      	; 0x193a <HLCD_voidInit+0x1ce>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	8e ab       	std	Y+54, r24	; 0x36
    1938:	91 c0       	rjmp	.+290    	; 0x1a5c <HLCD_voidInit+0x2f0>
	else if (__tmp > 255)
    193a:	6f a9       	ldd	r22, Y+55	; 0x37
    193c:	78 ad       	ldd	r23, Y+56	; 0x38
    193e:	89 ad       	ldd	r24, Y+57	; 0x39
    1940:	9a ad       	ldd	r25, Y+58	; 0x3a
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	53 e4       	ldi	r21, 0x43	; 67
    194a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	0c f0       	brlt	.+2      	; 0x1954 <HLCD_voidInit+0x1e8>
    1952:	7b c0       	rjmp	.+246    	; 0x1a4a <HLCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1954:	6b ad       	ldd	r22, Y+59	; 0x3b
    1956:	7c ad       	ldd	r23, Y+60	; 0x3c
    1958:	8d ad       	ldd	r24, Y+61	; 0x3d
    195a:	9e ad       	ldd	r25, Y+62	; 0x3e
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a e7       	ldi	r20, 0x7A	; 122
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8a ab       	std	Y+50, r24	; 0x32
    196e:	9b ab       	std	Y+51, r25	; 0x33
    1970:	ac ab       	std	Y+52, r26	; 0x34
    1972:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6a a9       	ldd	r22, Y+50	; 0x32
    1976:	7b a9       	ldd	r23, Y+51	; 0x33
    1978:	8c a9       	ldd	r24, Y+52	; 0x34
    197a:	9d a9       	ldd	r25, Y+53	; 0x35
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a ef       	ldi	r20, 0xFA	; 250
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8e a7       	std	Y+46, r24	; 0x2e
    198e:	9f a7       	std	Y+47, r25	; 0x2f
    1990:	a8 ab       	std	Y+48, r26	; 0x30
    1992:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1994:	6e a5       	ldd	r22, Y+46	; 0x2e
    1996:	7f a5       	ldd	r23, Y+47	; 0x2f
    1998:	88 a9       	ldd	r24, Y+48	; 0x30
    199a:	99 a9       	ldd	r25, Y+49	; 0x31
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <HLCD_voidInit+0x24a>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9d a7       	std	Y+45, r25	; 0x2d
    19b2:	8c a7       	std	Y+44, r24	; 0x2c
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <HLCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    19b6:	6e a5       	ldd	r22, Y+46	; 0x2e
    19b8:	7f a5       	ldd	r23, Y+47	; 0x2f
    19ba:	88 a9       	ldd	r24, Y+48	; 0x30
    19bc:	99 a9       	ldd	r25, Y+49	; 0x31
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <HLCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6a a9       	ldd	r22, Y+50	; 0x32
    19d0:	7b a9       	ldd	r23, Y+51	; 0x33
    19d2:	8c a9       	ldd	r24, Y+52	; 0x34
    19d4:	9d a9       	ldd	r25, Y+53	; 0x35
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9d a7       	std	Y+45, r25	; 0x2d
    19f4:	8c a7       	std	Y+44, r24	; 0x2c
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <HLCD_voidInit+0x2aa>
    19f8:	88 ec       	ldi	r24, 0xC8	; 200
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9b a7       	std	Y+43, r25	; 0x2b
    19fe:	8a a7       	std	Y+42, r24	; 0x2a
    1a00:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a02:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <HLCD_voidInit+0x298>
    1a08:	9b a7       	std	Y+43, r25	; 0x2b
    1a0a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a0e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9d a7       	std	Y+45, r25	; 0x2d
    1a14:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a18:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <HLCD_voidInit+0x28c>
    1a1e:	24 c0       	rjmp	.+72     	; 0x1a68 <HLCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a22:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a24:	88 a9       	ldd	r24, Y+48	; 0x30
    1a26:	99 a9       	ldd	r25, Y+49	; 0x31
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9d a7       	std	Y+45, r25	; 0x2d
    1a32:	8c a7       	std	Y+44, r24	; 0x2c
    1a34:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a36:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a38:	99 a7       	std	Y+41, r25	; 0x29
    1a3a:	88 a7       	std	Y+40, r24	; 0x28
    1a3c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a3e:	99 a5       	ldd	r25, Y+41	; 0x29
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <HLCD_voidInit+0x2d4>
    1a44:	99 a7       	std	Y+41, r25	; 0x29
    1a46:	88 a7       	std	Y+40, r24	; 0x28
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <HLCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a4a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a4c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8e ab       	std	Y+54, r24	; 0x36
    1a5c:	8e a9       	ldd	r24, Y+54	; 0x36
    1a5e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a60:	8f a1       	ldd	r24, Y+39	; 0x27
    1a62:	8a 95       	dec	r24
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <HLCD_voidInit+0x2f6>
    1a66:	8f a3       	std	Y+39, r24	; 0x27

	//wait more than 39 us
	_delay_us(40);

	//Display ON/OFF Control 0b00001100 with no shown cursor and no blinking
	HLCD_voidSendCommand(DISPLAY_ON_OR_OFF_CONTROL);
    1a68:	8c e0       	ldi	r24, 0x0C	; 12
    1a6a:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e2       	ldi	r26, 0x20	; 32
    1a74:	b2 e4       	ldi	r27, 0x42	; 66
    1a76:	8b a3       	std	Y+35, r24	; 0x23
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	ad a3       	std	Y+37, r26	; 0x25
    1a7c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	2b ea       	ldi	r18, 0xAB	; 171
    1a88:	3a ea       	ldi	r19, 0xAA	; 170
    1a8a:	4a e2       	ldi	r20, 0x2A	; 42
    1a8c:	50 e4       	ldi	r21, 0x40	; 64
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 8f       	std	Y+31, r24	; 0x1f
    1a98:	98 a3       	std	Y+32, r25	; 0x20
    1a9a:	a9 a3       	std	Y+33, r26	; 0x21
    1a9c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1a9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aa0:	78 a1       	ldd	r23, Y+32	; 0x20
    1aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	1c f4       	brge	.+6      	; 0x1abc <HLCD_voidInit+0x350>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	8e 8f       	std	Y+30, r24	; 0x1e
    1aba:	91 c0       	rjmp	.+290    	; 0x1bde <HLCD_voidInit+0x472>
	else if (__tmp > 255)
    1abc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1abe:	78 a1       	ldd	r23, Y+32	; 0x20
    1ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	53 e4       	ldi	r21, 0x43	; 67
    1acc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <HLCD_voidInit+0x36a>
    1ad4:	7b c0       	rjmp	.+246    	; 0x1bcc <HLCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ada:	8d a1       	ldd	r24, Y+37	; 0x25
    1adc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8a 8f       	std	Y+26, r24	; 0x1a
    1af0:	9b 8f       	std	Y+27, r25	; 0x1b
    1af2:	ac 8f       	std	Y+28, r26	; 0x1c
    1af4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1af8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1afa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1afc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a ef       	ldi	r20, 0xFA	; 250
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8e 8b       	std	Y+22, r24	; 0x16
    1b10:	9f 8b       	std	Y+23, r25	; 0x17
    1b12:	a8 8f       	std	Y+24, r26	; 0x18
    1b14:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b16:	6e 89       	ldd	r22, Y+22	; 0x16
    1b18:	7f 89       	ldd	r23, Y+23	; 0x17
    1b1a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b1c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <HLCD_voidInit+0x3cc>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9d 8b       	std	Y+21, r25	; 0x15
    1b34:	8c 8b       	std	Y+20, r24	; 0x14
    1b36:	3f c0       	rjmp	.+126    	; 0x1bb6 <HLCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1b38:	6e 89       	ldd	r22, Y+22	; 0x16
    1b3a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b3e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	4c f5       	brge	.+82     	; 0x1ba2 <HLCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b52:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e2       	ldi	r20, 0x20	; 32
    1b5e:	51 e4       	ldi	r21, 0x41	; 65
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	bc 01       	movw	r22, r24
    1b6a:	cd 01       	movw	r24, r26
    1b6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9d 8b       	std	Y+21, r25	; 0x15
    1b76:	8c 8b       	std	Y+20, r24	; 0x14
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <HLCD_voidInit+0x42c>
    1b7a:	88 ec       	ldi	r24, 0xC8	; 200
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9b 8b       	std	Y+19, r25	; 0x13
    1b80:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b82:	8a 89       	ldd	r24, Y+18	; 0x12
    1b84:	9b 89       	ldd	r25, Y+19	; 0x13
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <HLCD_voidInit+0x41a>
    1b8a:	9b 8b       	std	Y+19, r25	; 0x13
    1b8c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	8c 89       	ldd	r24, Y+20	; 0x14
    1b90:	9d 89       	ldd	r25, Y+21	; 0x15
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9d 8b       	std	Y+21, r25	; 0x15
    1b96:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b98:	8c 89       	ldd	r24, Y+20	; 0x14
    1b9a:	9d 89       	ldd	r25, Y+21	; 0x15
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <HLCD_voidInit+0x40e>
    1ba0:	24 c0       	rjmp	.+72     	; 0x1bea <HLCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	6e 89       	ldd	r22, Y+22	; 0x16
    1ba4:	7f 89       	ldd	r23, Y+23	; 0x17
    1ba6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ba8:	99 8d       	ldd	r25, Y+25	; 0x19
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9d 8b       	std	Y+21, r25	; 0x15
    1bb4:	8c 8b       	std	Y+20, r24	; 0x14
    1bb6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bb8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bba:	99 8b       	std	Y+17, r25	; 0x11
    1bbc:	88 8b       	std	Y+16, r24	; 0x10
    1bbe:	88 89       	ldd	r24, Y+16	; 0x10
    1bc0:	99 89       	ldd	r25, Y+17	; 0x11
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <HLCD_voidInit+0x456>
    1bc6:	99 8b       	std	Y+17, r25	; 0x11
    1bc8:	88 8b       	std	Y+16, r24	; 0x10
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <HLCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bcc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bce:	78 a1       	ldd	r23, Y+32	; 0x20
    1bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	8a 95       	dec	r24
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <HLCD_voidInit+0x478>
    1be8:	8f 87       	std	Y+15, r24	; 0x0f

	//wait more than 39 us
		_delay_us(40);

	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e0       	ldi	r26, 0x00	; 0
    1bf6:	b0 e4       	ldi	r27, 0x40	; 64
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <HLCD_voidInit+0x4d6>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <HLCD_voidInit+0x554>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <HLCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <HLCD_voidInit+0x536>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <HLCD_voidInit+0x524>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <HLCD_voidInit+0x518>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <HLCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <HLCD_voidInit+0x560>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	//wait more than 1.53ms
	_delay_ms(2);


	//Entry Mode Set 0b00000110 with no shift and writing from left to right
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1cd4:	86 e0       	ldi	r24, 0x06	; 6
    1cd6:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
}
    1cda:	c4 5b       	subi	r28, 0xB4	; 180
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	08 95       	ret

00001cf2 <HLCD_voidClearDisplay>:




void HLCD_voidClearDisplay(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	2e 97       	sbiw	r28, 0x0e	; 14
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61


	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e0       	ldi	r26, 0x00	; 0
    1d12:	b0 e4       	ldi	r27, 0x40	; 64
    1d14:	8b 87       	std	Y+11, r24	; 0x0b
    1d16:	9c 87       	std	Y+12, r25	; 0x0c
    1d18:	ad 87       	std	Y+13, r26	; 0x0d
    1d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8f 83       	std	Y+7, r24	; 0x07
    1d36:	98 87       	std	Y+8, r25	; 0x08
    1d38:	a9 87       	std	Y+9, r26	; 0x09
    1d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <HLCD_voidClearDisplay+0xcc>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	8b 83       	std	Y+3, r24	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <HLCD_voidClearDisplay+0xba>
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <HLCD_voidClearDisplay+0xae>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dca:	78 85       	ldd	r23, Y+8	; 0x08
    1dcc:	89 85       	ldd	r24, Y+9	; 0x09
    1dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <HLCD_voidClearDisplay+0xf6>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01

	//wait more than 1.53ms
	_delay_ms(2);


}
    1df0:	2e 96       	adiw	r28, 0x0e	; 14
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *A_PtrtoString)

{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <HLCD_voidSendString+0x6>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	9a 83       	std	Y+2, r25	; 0x02
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	0a c0       	rjmp	.+20     	; 0x1e26 <HLCD_voidSendString+0x24>
	while(*A_PtrtoString!='\0')
	//or the lab eng. condition since the decimal of '\0\ is 0: while(*A_PtrtoString>0)
	//or while(*A_PtrtoString!=0)
	{

		HLCD_voidSendData(*A_PtrtoString);
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	80 81       	ld	r24, Z
    1e18:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
		A_PtrtoString++;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidSendString(u8 *A_PtrtoString)

{

	while(*A_PtrtoString!='\0')
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	89 f7       	brne	.-30     	; 0x1e12 <HLCD_voidSendString+0x10>



	}

}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <HLCD_voidGoToPosition>:




void HLCD_voidGoToPosition(u8 A_u8RowNumber,u8 A_u8ColumnNumber)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	6c 97       	sbiw	r28, 0x1c	; 28
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	89 8f       	std	Y+25, r24	; 0x19
    1e50:	6a 8f       	std	Y+26, r22	; 0x1a
	//Here I have assumed that the index of the first row & first column both will be 0
	switch(A_u8RowNumber)
    1e52:	89 8d       	ldd	r24, Y+25	; 0x19
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 8f       	std	Y+28, r19	; 0x1c
    1e5a:	2b 8f       	std	Y+27, r18	; 0x1b
    1e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	31 f0       	breq	.+12     	; 0x1e70 <HLCD_voidGoToPosition+0x36>
    1e64:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1e66:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1e68:	21 30       	cpi	r18, 0x01	; 1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	31 f0       	breq	.+12     	; 0x1e7a <HLCD_voidGoToPosition+0x40>
    1e6e:	09 c0       	rjmp	.+18     	; 0x1e82 <HLCD_voidGoToPosition+0x48>
	{

	case ROW1: HLCD_voidSendCommand(ROW1_ADDRESS_START+A_u8ColumnNumber);  break;
    1e70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e72:	80 58       	subi	r24, 0x80	; 128
    1e74:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <HLCD_voidGoToPosition+0x48>
	case ROW2: HLCD_voidSendCommand(ROW2_ADDRESS_START+A_u8ColumnNumber);  break;
    1e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e7c:	80 54       	subi	r24, 0x40	; 64
    1e7e:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e2       	ldi	r26, 0x20	; 32
    1e88:	b2 e4       	ldi	r27, 0x42	; 66
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	2b ea       	ldi	r18, 0xAB	; 171
    1e9c:	3a ea       	ldi	r19, 0xAA	; 170
    1e9e:	4a e2       	ldi	r20, 0x2A	; 42
    1ea0:	50 e4       	ldi	r21, 0x40	; 64
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	89 8b       	std	Y+17, r24	; 0x11
    1eac:	9a 8b       	std	Y+18, r25	; 0x12
    1eae:	ab 8b       	std	Y+19, r26	; 0x13
    1eb0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eb2:	69 89       	ldd	r22, Y+17	; 0x11
    1eb4:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	1c f4       	brge	.+6      	; 0x1ed0 <HLCD_voidGoToPosition+0x96>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	88 8b       	std	Y+16, r24	; 0x10
    1ece:	91 c0       	rjmp	.+290    	; 0x1ff2 <HLCD_voidGoToPosition+0x1b8>
	else if (__tmp > 255)
    1ed0:	69 89       	ldd	r22, Y+17	; 0x11
    1ed2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	53 e4       	ldi	r21, 0x43	; 67
    1ee0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <HLCD_voidGoToPosition+0xb0>
    1ee8:	7b c0       	rjmp	.+246    	; 0x1fe0 <HLCD_voidGoToPosition+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1eea:	6d 89       	ldd	r22, Y+21	; 0x15
    1eec:	7e 89       	ldd	r23, Y+22	; 0x16
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a e7       	ldi	r20, 0x7A	; 122
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8c 87       	std	Y+12, r24	; 0x0c
    1f04:	9d 87       	std	Y+13, r25	; 0x0d
    1f06:	ae 87       	std	Y+14, r26	; 0x0e
    1f08:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a ef       	ldi	r20, 0xFA	; 250
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	88 87       	std	Y+8, r24	; 0x08
    1f24:	99 87       	std	Y+9, r25	; 0x09
    1f26:	aa 87       	std	Y+10, r26	; 0x0a
    1f28:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f2a:	68 85       	ldd	r22, Y+8	; 0x08
    1f2c:	79 85       	ldd	r23, Y+9	; 0x09
    1f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <HLCD_voidGoToPosition+0x112>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9f 83       	std	Y+7, r25	; 0x07
    1f48:	8e 83       	std	Y+6, r24	; 0x06
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <HLCD_voidGoToPosition+0x190>
	else if (__tmp > 65535)
    1f4c:	68 85       	ldd	r22, Y+8	; 0x08
    1f4e:	79 85       	ldd	r23, Y+9	; 0x09
    1f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <HLCD_voidGoToPosition+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9f 83       	std	Y+7, r25	; 0x07
    1f8a:	8e 83       	std	Y+6, r24	; 0x06
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <HLCD_voidGoToPosition+0x172>
    1f8e:	88 ec       	ldi	r24, 0xC8	; 200
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9d 83       	std	Y+5, r25	; 0x05
    1f94:	8c 83       	std	Y+4, r24	; 0x04
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <HLCD_voidGoToPosition+0x160>
    1f9e:	9d 83       	std	Y+5, r25	; 0x05
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	9f 83       	std	Y+7, r25	; 0x07
    1faa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8e 81       	ldd	r24, Y+6	; 0x06
    1fae:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <HLCD_voidGoToPosition+0x154>
    1fb4:	24 c0       	rjmp	.+72     	; 0x1ffe <HLCD_voidGoToPosition+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	68 85       	ldd	r22, Y+8	; 0x08
    1fb8:	79 85       	ldd	r23, Y+9	; 0x09
    1fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	8e 83       	std	Y+6, r24	; 0x06
    1fca:	8e 81       	ldd	r24, Y+6	; 0x06
    1fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fce:	9b 83       	std	Y+3, r25	; 0x03
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <HLCD_voidGoToPosition+0x19c>
    1fda:	9b 83       	std	Y+3, r25	; 0x03
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <HLCD_voidGoToPosition+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe0:	69 89       	ldd	r22, Y+17	; 0x11
    1fe2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	88 8b       	std	Y+16, r24	; 0x10
    1ff2:	88 89       	ldd	r24, Y+16	; 0x10
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	8a 95       	dec	r24
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <HLCD_voidGoToPosition+0x1be>
    1ffc:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 39 usec
	_delay_us(40);


}
    1ffe:	6c 96       	adiw	r28, 0x1c	; 28
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <HLCD_voidDisplayNumber>:


void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	28 97       	sbiw	r28, 0x08	; 8
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	6d 83       	std	Y+5, r22	; 0x05
    202e:	7e 83       	std	Y+6, r23	; 0x06
    2030:	8f 83       	std	Y+7, r24	; 0x07
    2032:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32Number=1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	ab 83       	std	Y+3, r26	; 0x03
    2042:	bc 83       	std	Y+4, r27	; 0x04

	if (A_s32Number==0)
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	af 81       	ldd	r26, Y+7	; 0x07
    204a:	b8 85       	ldd	r27, Y+8	; 0x08
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	a1 05       	cpc	r26, r1
    2050:	b1 05       	cpc	r27, r1
    2052:	21 f4       	brne	.+8      	; 0x205c <HLCD_voidDisplayNumber+0x4c>
	{
		HLCD_voidSendData('0');
    2054:	80 e3       	ldi	r24, 0x30	; 48
    2056:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
    205a:	50 c0       	rjmp	.+160    	; 0x20fc <HLCD_voidDisplayNumber+0xec>
	}
	else if (A_s32Number<0)
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	af 81       	ldd	r26, Y+7	; 0x07
    2062:	b8 85       	ldd	r27, Y+8	; 0x08
    2064:	bb 23       	and	r27, r27
    2066:	0c f0       	brlt	.+2      	; 0x206a <HLCD_voidDisplayNumber+0x5a>
    2068:	49 c0       	rjmp	.+146    	; 0x20fc <HLCD_voidDisplayNumber+0xec>
	{
		HLCD_voidSendData('-');
    206a:	8d e2       	ldi	r24, 0x2D	; 45
    206c:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
		A_s32Number=A_s32Number*-1;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	af 81       	ldd	r26, Y+7	; 0x07
    2076:	b8 85       	ldd	r27, Y+8	; 0x08
    2078:	b0 95       	com	r27
    207a:	a0 95       	com	r26
    207c:	90 95       	com	r25
    207e:	81 95       	neg	r24
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	af 4f       	sbci	r26, 0xFF	; 255
    2084:	bf 4f       	sbci	r27, 0xFF	; 255
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	af 83       	std	Y+7, r26	; 0x07
    208c:	b8 87       	std	Y+8, r27	; 0x08
    208e:	36 c0       	rjmp	.+108    	; 0x20fc <HLCD_voidDisplayNumber+0xec>
	}

	while(A_s32Number!=0)
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	ab 81       	ldd	r26, Y+3	; 0x03
    2096:	bc 81       	ldd	r27, Y+4	; 0x04
    2098:	2a e0       	ldi	r18, 0x0A	; 10
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 2a 13 	call	0x2654	; 0x2654 <__mulsi3>
    20a8:	7b 01       	movw	r14, r22
    20aa:	8c 01       	movw	r16, r24
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	af 81       	ldd	r26, Y+7	; 0x07
    20b2:	b8 85       	ldd	r27, Y+8	; 0x08
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__divmodsi4>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 0d       	add	r24, r14
    20ca:	9f 1d       	adc	r25, r15
    20cc:	a0 1f       	adc	r26, r16
    20ce:	b1 1f       	adc	r27, r17
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	ab 83       	std	Y+3, r26	; 0x03
    20d6:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number/=10;
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	af 81       	ldd	r26, Y+7	; 0x07
    20de:	b8 85       	ldd	r27, Y+8	; 0x08
    20e0:	2a e0       	ldi	r18, 0x0A	; 10
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__divmodsi4>
    20f0:	da 01       	movw	r26, r20
    20f2:	c9 01       	movw	r24, r18
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	af 83       	std	Y+7, r26	; 0x07
    20fa:	b8 87       	std	Y+8, r27	; 0x08
	{
		HLCD_voidSendData('-');
		A_s32Number=A_s32Number*-1;
	}

	while(A_s32Number!=0)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	af 81       	ldd	r26, Y+7	; 0x07
    2102:	b8 85       	ldd	r27, Y+8	; 0x08
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	a1 05       	cpc	r26, r1
    2108:	b1 05       	cpc	r27, r1
    210a:	11 f6       	brne	.-124    	; 0x2090 <HLCD_voidDisplayNumber+0x80>
    210c:	23 c0       	rjmp	.+70     	; 0x2154 <HLCD_voidDisplayNumber+0x144>
	}

	while(L_u32Number!=1)
	{
		//we added 48 as '0' has ascii of 48
		HLCD_voidSendData(L_u32Number%10+48);
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	ab 81       	ldd	r26, Y+3	; 0x03
    2114:	bc 81       	ldd	r27, Y+4	; 0x04
    2116:	2a e0       	ldi	r18, 0x0A	; 10
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 49 13 	call	0x2692	; 0x2692 <__udivmodsi4>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	80 5d       	subi	r24, 0xD0	; 208
    212c:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
		L_u32Number/=10;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	ab 81       	ldd	r26, Y+3	; 0x03
    2136:	bc 81       	ldd	r27, Y+4	; 0x04
    2138:	2a e0       	ldi	r18, 0x0A	; 10
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 13 	call	0x2692	; 0x2692 <__udivmodsi4>
    2148:	da 01       	movw	r26, r20
    214a:	c9 01       	movw	r24, r18
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	ab 83       	std	Y+3, r26	; 0x03
    2152:	bc 83       	std	Y+4, r27	; 0x04
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
		A_s32Number/=10;
	}

	while(L_u32Number!=1)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	ab 81       	ldd	r26, Y+3	; 0x03
    215a:	bc 81       	ldd	r27, Y+4	; 0x04
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	91 05       	cpc	r25, r1
    2160:	a1 05       	cpc	r26, r1
    2162:	b1 05       	cpc	r27, r1
    2164:	a1 f6       	brne	.-88     	; 0x210e <HLCD_voidDisplayNumber+0xfe>
		HLCD_voidSendData(L_u32Number%10+48);
		L_u32Number/=10;
	}


}
    2166:	28 96       	adiw	r28, 0x08	; 8
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	08 95       	ret

00002180 <HLCD_voidWriteOnCGRAM>:




void HLCD_voidWriteOnCGRAM(u8 A_u8PatternIndex,u8 *A_u8PtrToPatternValue)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <HLCD_voidWriteOnCGRAM+0x6>
    2186:	00 d0       	rcall	.+0      	; 0x2188 <HLCD_voidWriteOnCGRAM+0x8>
    2188:	00 d0       	rcall	.+0      	; 0x218a <HLCD_voidWriteOnCGRAM+0xa>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	8a 83       	std	Y+2, r24	; 0x02
    2190:	7c 83       	std	Y+4, r23	; 0x04
    2192:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;

	/* 1- Set AC to CGRAM  */
	switch(A_u8PatternIndex)
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	3e 83       	std	Y+6, r19	; 0x06
    219c:	2d 83       	std	Y+5, r18	; 0x05
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	83 30       	cpi	r24, 0x03	; 3
    21a4:	91 05       	cpc	r25, r1
    21a6:	a9 f1       	breq	.+106    	; 0x2212 <HLCD_voidWriteOnCGRAM+0x92>
    21a8:	2d 81       	ldd	r18, Y+5	; 0x05
    21aa:	3e 81       	ldd	r19, Y+6	; 0x06
    21ac:	24 30       	cpi	r18, 0x04	; 4
    21ae:	31 05       	cpc	r19, r1
    21b0:	7c f4       	brge	.+30     	; 0x21d0 <HLCD_voidWriteOnCGRAM+0x50>
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	19 f1       	breq	.+70     	; 0x2202 <HLCD_voidWriteOnCGRAM+0x82>
    21bc:	2d 81       	ldd	r18, Y+5	; 0x05
    21be:	3e 81       	ldd	r19, Y+6	; 0x06
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	14 f5       	brge	.+68     	; 0x220a <HLCD_voidWriteOnCGRAM+0x8a>
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	b1 f0       	breq	.+44     	; 0x21fa <HLCD_voidWriteOnCGRAM+0x7a>
    21ce:	34 c0       	rjmp	.+104    	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
    21d0:	2d 81       	ldd	r18, Y+5	; 0x05
    21d2:	3e 81       	ldd	r19, Y+6	; 0x06
    21d4:	25 30       	cpi	r18, 0x05	; 5
    21d6:	31 05       	cpc	r19, r1
    21d8:	21 f1       	breq	.+72     	; 0x2222 <HLCD_voidWriteOnCGRAM+0xa2>
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	85 30       	cpi	r24, 0x05	; 5
    21e0:	91 05       	cpc	r25, r1
    21e2:	dc f0       	brlt	.+54     	; 0x221a <HLCD_voidWriteOnCGRAM+0x9a>
    21e4:	2d 81       	ldd	r18, Y+5	; 0x05
    21e6:	3e 81       	ldd	r19, Y+6	; 0x06
    21e8:	26 30       	cpi	r18, 0x06	; 6
    21ea:	31 05       	cpc	r19, r1
    21ec:	f1 f0       	breq	.+60     	; 0x222a <HLCD_voidWriteOnCGRAM+0xaa>
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	87 30       	cpi	r24, 0x07	; 7
    21f4:	91 05       	cpc	r25, r1
    21f6:	e9 f0       	breq	.+58     	; 0x2232 <HLCD_voidWriteOnCGRAM+0xb2>
    21f8:	1f c0       	rjmp	.+62     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	{

	case 0: HLCD_voidSendCommand(PATTERN1_BASE_ADDRESS); break;
    21fa:	80 e4       	ldi	r24, 0x40	; 64
    21fc:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 1: HLCD_voidSendCommand(PATTERN2_BASE_ADDRESS); break;
    2202:	88 e4       	ldi	r24, 0x48	; 72
    2204:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2208:	17 c0       	rjmp	.+46     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 2: HLCD_voidSendCommand(PATTERN3_BASE_ADDRESS); break;
    220a:	80 e5       	ldi	r24, 0x50	; 80
    220c:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 3: HLCD_voidSendCommand(PATTERN4_BASE_ADDRESS); break;
    2212:	88 e5       	ldi	r24, 0x58	; 88
    2214:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 4: HLCD_voidSendCommand(PATTERN5_BASE_ADDRESS); break;
    221a:	80 e6       	ldi	r24, 0x60	; 96
    221c:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2220:	0b c0       	rjmp	.+22     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 5: HLCD_voidSendCommand(PATTERN6_BASE_ADDRESS); break;
    2222:	88 e6       	ldi	r24, 0x68	; 104
    2224:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 6: HLCD_voidSendCommand(PATTERN7_BASE_ADDRESS); break;
    222a:	80 e7       	ldi	r24, 0x70	; 112
    222c:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <HLCD_voidWriteOnCGRAM+0xb8>
	case 7: HLCD_voidSendCommand(PATTERN8_BASE_ADDRESS); break;
    2232:	88 e7       	ldi	r24, 0x78	; 120
    2234:	0e 94 96 09 	call	0x132c	; 0x132c <HLCD_voidSendCommand>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    2238:	19 82       	std	Y+1, r1	; 0x01
    223a:	0e c0       	rjmp	.+28     	; 0x2258 <HLCD_voidWriteOnCGRAM+0xd8>
	{
		HLCD_voidSendData(A_u8PtrToPatternValue[L_u8LoopIterator]);
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	78 f3       	brcs	.-34     	; 0x223c <HLCD_voidWriteOnCGRAM+0xbc>

	}



}
    225e:	26 96       	adiw	r28, 0x06	; 6
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <main>:




void main (void)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	cb 55       	subi	r28, 0x5B	; 91
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
	//set lcd control & data pins
	MDIO_voidSetPinDirection(PORTA,PIN0,OUTPUT);
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN1,OUTPUT);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN2,OUTPUT);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_voidSetPinDirection>
	MDIO_voidSetPortDirection(PORTC,WHOLE_PORT_OUTPUT);
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	6f ef       	ldi	r22, 0xFF	; 255
    22a8:	0e 94 0e 09 	call	0x121c	; 0x121c <MDIO_voidSetPortDirection>


	//compose my name patterns in arrays
	u8 LR_3enLetter[]=  {0x00, 0x0F, 0x08, 0x08, 0x1F, 0x00, 0x00, 0x00};
    22ac:	ce 01       	movw	r24, r28
    22ae:	01 96       	adiw	r24, 0x01	; 1
    22b0:	9a af       	std	Y+58, r25	; 0x3a
    22b2:	89 af       	std	Y+57, r24	; 0x39
    22b4:	e8 e9       	ldi	r30, 0x98	; 152
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	fc af       	std	Y+60, r31	; 0x3c
    22ba:	eb af       	std	Y+59, r30	; 0x3b
    22bc:	f8 e0       	ldi	r31, 0x08	; 8
    22be:	fd af       	std	Y+61, r31	; 0x3d
    22c0:	eb ad       	ldd	r30, Y+59	; 0x3b
    22c2:	fc ad       	ldd	r31, Y+60	; 0x3c
    22c4:	00 80       	ld	r0, Z
    22c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    22c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	9c af       	std	Y+60, r25	; 0x3c
    22ce:	8b af       	std	Y+59, r24	; 0x3b
    22d0:	e9 ad       	ldd	r30, Y+57	; 0x39
    22d2:	fa ad       	ldd	r31, Y+58	; 0x3a
    22d4:	00 82       	st	Z, r0
    22d6:	89 ad       	ldd	r24, Y+57	; 0x39
    22d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	9a af       	std	Y+58, r25	; 0x3a
    22de:	89 af       	std	Y+57, r24	; 0x39
    22e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    22e2:	91 50       	subi	r25, 0x01	; 1
    22e4:	9d af       	std	Y+61, r25	; 0x3d
    22e6:	ed ad       	ldd	r30, Y+61	; 0x3d
    22e8:	ee 23       	and	r30, r30
    22ea:	51 f7       	brne	.-44     	; 0x22c0 <main+0x50>
	u8 LR_MimLetter[]=  {0x00, 0x0F, 0x09, 0x09, 0x1F, 0x00, 0x00, 0x00};
    22ec:	ce 01       	movw	r24, r28
    22ee:	09 96       	adiw	r24, 0x09	; 9
    22f0:	9f af       	std	Y+63, r25	; 0x3f
    22f2:	8e af       	std	Y+62, r24	; 0x3e
    22f4:	e0 e9       	ldi	r30, 0x90	; 144
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	22 96       	adiw	r28, 0x02	; 2
    22fa:	ff af       	std	Y+63, r31	; 0x3f
    22fc:	ee af       	std	Y+62, r30	; 0x3e
    22fe:	22 97       	sbiw	r28, 0x02	; 2
    2300:	f8 e0       	ldi	r31, 0x08	; 8
    2302:	23 96       	adiw	r28, 0x03	; 3
    2304:	ff af       	std	Y+63, r31	; 0x3f
    2306:	23 97       	sbiw	r28, 0x03	; 3
    2308:	22 96       	adiw	r28, 0x02	; 2
    230a:	ee ad       	ldd	r30, Y+62	; 0x3e
    230c:	ff ad       	ldd	r31, Y+63	; 0x3f
    230e:	22 97       	sbiw	r28, 0x02	; 2
    2310:	00 80       	ld	r0, Z
    2312:	22 96       	adiw	r28, 0x02	; 2
    2314:	8e ad       	ldd	r24, Y+62	; 0x3e
    2316:	9f ad       	ldd	r25, Y+63	; 0x3f
    2318:	22 97       	sbiw	r28, 0x02	; 2
    231a:	01 96       	adiw	r24, 0x01	; 1
    231c:	22 96       	adiw	r28, 0x02	; 2
    231e:	9f af       	std	Y+63, r25	; 0x3f
    2320:	8e af       	std	Y+62, r24	; 0x3e
    2322:	22 97       	sbiw	r28, 0x02	; 2
    2324:	ee ad       	ldd	r30, Y+62	; 0x3e
    2326:	ff ad       	ldd	r31, Y+63	; 0x3f
    2328:	00 82       	st	Z, r0
    232a:	8e ad       	ldd	r24, Y+62	; 0x3e
    232c:	9f ad       	ldd	r25, Y+63	; 0x3f
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	9f af       	std	Y+63, r25	; 0x3f
    2332:	8e af       	std	Y+62, r24	; 0x3e
    2334:	23 96       	adiw	r28, 0x03	; 3
    2336:	9f ad       	ldd	r25, Y+63	; 0x3f
    2338:	23 97       	sbiw	r28, 0x03	; 3
    233a:	91 50       	subi	r25, 0x01	; 1
    233c:	23 96       	adiw	r28, 0x03	; 3
    233e:	9f af       	std	Y+63, r25	; 0x3f
    2340:	23 97       	sbiw	r28, 0x03	; 3
    2342:	23 96       	adiw	r28, 0x03	; 3
    2344:	ef ad       	ldd	r30, Y+63	; 0x3f
    2346:	23 97       	sbiw	r28, 0x03	; 3
    2348:	ee 23       	and	r30, r30
    234a:	f1 f6       	brne	.-68     	; 0x2308 <main+0x98>
	u8 LR_Ra2Letter[]=  {0x00, 0x01, 0x01, 0x01, 0x1F, 0x00, 0x00, 0x00};
    234c:	ce 01       	movw	r24, r28
    234e:	41 96       	adiw	r24, 0x11	; 17
    2350:	25 96       	adiw	r28, 0x05	; 5
    2352:	9f af       	std	Y+63, r25	; 0x3f
    2354:	8e af       	std	Y+62, r24	; 0x3e
    2356:	25 97       	sbiw	r28, 0x05	; 5
    2358:	e8 e8       	ldi	r30, 0x88	; 136
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	27 96       	adiw	r28, 0x07	; 7
    235e:	ff af       	std	Y+63, r31	; 0x3f
    2360:	ee af       	std	Y+62, r30	; 0x3e
    2362:	27 97       	sbiw	r28, 0x07	; 7
    2364:	f8 e0       	ldi	r31, 0x08	; 8
    2366:	28 96       	adiw	r28, 0x08	; 8
    2368:	ff af       	std	Y+63, r31	; 0x3f
    236a:	28 97       	sbiw	r28, 0x08	; 8
    236c:	27 96       	adiw	r28, 0x07	; 7
    236e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2370:	ff ad       	ldd	r31, Y+63	; 0x3f
    2372:	27 97       	sbiw	r28, 0x07	; 7
    2374:	00 80       	ld	r0, Z
    2376:	27 96       	adiw	r28, 0x07	; 7
    2378:	8e ad       	ldd	r24, Y+62	; 0x3e
    237a:	9f ad       	ldd	r25, Y+63	; 0x3f
    237c:	27 97       	sbiw	r28, 0x07	; 7
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	27 96       	adiw	r28, 0x07	; 7
    2382:	9f af       	std	Y+63, r25	; 0x3f
    2384:	8e af       	std	Y+62, r24	; 0x3e
    2386:	27 97       	sbiw	r28, 0x07	; 7
    2388:	25 96       	adiw	r28, 0x05	; 5
    238a:	ee ad       	ldd	r30, Y+62	; 0x3e
    238c:	ff ad       	ldd	r31, Y+63	; 0x3f
    238e:	25 97       	sbiw	r28, 0x05	; 5
    2390:	00 82       	st	Z, r0
    2392:	25 96       	adiw	r28, 0x05	; 5
    2394:	8e ad       	ldd	r24, Y+62	; 0x3e
    2396:	9f ad       	ldd	r25, Y+63	; 0x3f
    2398:	25 97       	sbiw	r28, 0x05	; 5
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	25 96       	adiw	r28, 0x05	; 5
    239e:	9f af       	std	Y+63, r25	; 0x3f
    23a0:	8e af       	std	Y+62, r24	; 0x3e
    23a2:	25 97       	sbiw	r28, 0x05	; 5
    23a4:	28 96       	adiw	r28, 0x08	; 8
    23a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23a8:	28 97       	sbiw	r28, 0x08	; 8
    23aa:	91 50       	subi	r25, 0x01	; 1
    23ac:	28 96       	adiw	r28, 0x08	; 8
    23ae:	9f af       	std	Y+63, r25	; 0x3f
    23b0:	28 97       	sbiw	r28, 0x08	; 8
    23b2:	28 96       	adiw	r28, 0x08	; 8
    23b4:	ef ad       	ldd	r30, Y+63	; 0x3f
    23b6:	28 97       	sbiw	r28, 0x08	; 8
    23b8:	ee 23       	and	r30, r30
    23ba:	c1 f6       	brne	.-80     	; 0x236c <main+0xfc>

	u8 LR_NoonLetter[]= {0x00, 0x05, 0x01, 0x01, 0x1F, 0x00, 0x00, 0x00};
    23bc:	ce 01       	movw	r24, r28
    23be:	49 96       	adiw	r24, 0x19	; 25
    23c0:	2a 96       	adiw	r28, 0x0a	; 10
    23c2:	9f af       	std	Y+63, r25	; 0x3f
    23c4:	8e af       	std	Y+62, r24	; 0x3e
    23c6:	2a 97       	sbiw	r28, 0x0a	; 10
    23c8:	e0 e8       	ldi	r30, 0x80	; 128
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	2c 96       	adiw	r28, 0x0c	; 12
    23ce:	ff af       	std	Y+63, r31	; 0x3f
    23d0:	ee af       	std	Y+62, r30	; 0x3e
    23d2:	2c 97       	sbiw	r28, 0x0c	; 12
    23d4:	f8 e0       	ldi	r31, 0x08	; 8
    23d6:	2d 96       	adiw	r28, 0x0d	; 13
    23d8:	ff af       	std	Y+63, r31	; 0x3f
    23da:	2d 97       	sbiw	r28, 0x0d	; 13
    23dc:	2c 96       	adiw	r28, 0x0c	; 12
    23de:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    23e2:	2c 97       	sbiw	r28, 0x0c	; 12
    23e4:	00 80       	ld	r0, Z
    23e6:	2c 96       	adiw	r28, 0x0c	; 12
    23e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    23ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    23ec:	2c 97       	sbiw	r28, 0x0c	; 12
    23ee:	01 96       	adiw	r24, 0x01	; 1
    23f0:	2c 96       	adiw	r28, 0x0c	; 12
    23f2:	9f af       	std	Y+63, r25	; 0x3f
    23f4:	8e af       	std	Y+62, r24	; 0x3e
    23f6:	2c 97       	sbiw	r28, 0x0c	; 12
    23f8:	2a 96       	adiw	r28, 0x0a	; 10
    23fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    23fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    23fe:	2a 97       	sbiw	r28, 0x0a	; 10
    2400:	00 82       	st	Z, r0
    2402:	2a 96       	adiw	r28, 0x0a	; 10
    2404:	8e ad       	ldd	r24, Y+62	; 0x3e
    2406:	9f ad       	ldd	r25, Y+63	; 0x3f
    2408:	2a 97       	sbiw	r28, 0x0a	; 10
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	2a 96       	adiw	r28, 0x0a	; 10
    240e:	9f af       	std	Y+63, r25	; 0x3f
    2410:	8e af       	std	Y+62, r24	; 0x3e
    2412:	2a 97       	sbiw	r28, 0x0a	; 10
    2414:	2d 96       	adiw	r28, 0x0d	; 13
    2416:	9f ad       	ldd	r25, Y+63	; 0x3f
    2418:	2d 97       	sbiw	r28, 0x0d	; 13
    241a:	91 50       	subi	r25, 0x01	; 1
    241c:	2d 96       	adiw	r28, 0x0d	; 13
    241e:	9f af       	std	Y+63, r25	; 0x3f
    2420:	2d 97       	sbiw	r28, 0x0d	; 13
    2422:	2d 96       	adiw	r28, 0x0d	; 13
    2424:	ef ad       	ldd	r30, Y+63	; 0x3f
    2426:	2d 97       	sbiw	r28, 0x0d	; 13
    2428:	ee 23       	and	r30, r30
    242a:	c1 f6       	brne	.-80     	; 0x23dc <main+0x16c>
	u8 LR_GeemLetter[]= {0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x04, 0x00};
    242c:	ce 01       	movw	r24, r28
    242e:	81 96       	adiw	r24, 0x21	; 33
    2430:	2f 96       	adiw	r28, 0x0f	; 15
    2432:	9f af       	std	Y+63, r25	; 0x3f
    2434:	8e af       	std	Y+62, r24	; 0x3e
    2436:	2f 97       	sbiw	r28, 0x0f	; 15
    2438:	e8 e7       	ldi	r30, 0x78	; 120
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	61 96       	adiw	r28, 0x11	; 17
    243e:	ff af       	std	Y+63, r31	; 0x3f
    2440:	ee af       	std	Y+62, r30	; 0x3e
    2442:	61 97       	sbiw	r28, 0x11	; 17
    2444:	f8 e0       	ldi	r31, 0x08	; 8
    2446:	62 96       	adiw	r28, 0x12	; 18
    2448:	ff af       	std	Y+63, r31	; 0x3f
    244a:	62 97       	sbiw	r28, 0x12	; 18
    244c:	61 96       	adiw	r28, 0x11	; 17
    244e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2450:	ff ad       	ldd	r31, Y+63	; 0x3f
    2452:	61 97       	sbiw	r28, 0x11	; 17
    2454:	00 80       	ld	r0, Z
    2456:	61 96       	adiw	r28, 0x11	; 17
    2458:	8e ad       	ldd	r24, Y+62	; 0x3e
    245a:	9f ad       	ldd	r25, Y+63	; 0x3f
    245c:	61 97       	sbiw	r28, 0x11	; 17
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	61 96       	adiw	r28, 0x11	; 17
    2462:	9f af       	std	Y+63, r25	; 0x3f
    2464:	8e af       	std	Y+62, r24	; 0x3e
    2466:	61 97       	sbiw	r28, 0x11	; 17
    2468:	2f 96       	adiw	r28, 0x0f	; 15
    246a:	ee ad       	ldd	r30, Y+62	; 0x3e
    246c:	ff ad       	ldd	r31, Y+63	; 0x3f
    246e:	2f 97       	sbiw	r28, 0x0f	; 15
    2470:	00 82       	st	Z, r0
    2472:	2f 96       	adiw	r28, 0x0f	; 15
    2474:	8e ad       	ldd	r24, Y+62	; 0x3e
    2476:	9f ad       	ldd	r25, Y+63	; 0x3f
    2478:	2f 97       	sbiw	r28, 0x0f	; 15
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	2f 96       	adiw	r28, 0x0f	; 15
    247e:	9f af       	std	Y+63, r25	; 0x3f
    2480:	8e af       	std	Y+62, r24	; 0x3e
    2482:	2f 97       	sbiw	r28, 0x0f	; 15
    2484:	62 96       	adiw	r28, 0x12	; 18
    2486:	9f ad       	ldd	r25, Y+63	; 0x3f
    2488:	62 97       	sbiw	r28, 0x12	; 18
    248a:	91 50       	subi	r25, 0x01	; 1
    248c:	62 96       	adiw	r28, 0x12	; 18
    248e:	9f af       	std	Y+63, r25	; 0x3f
    2490:	62 97       	sbiw	r28, 0x12	; 18
    2492:	62 96       	adiw	r28, 0x12	; 18
    2494:	ef ad       	ldd	r30, Y+63	; 0x3f
    2496:	62 97       	sbiw	r28, 0x12	; 18
    2498:	ee 23       	and	r30, r30
    249a:	c1 f6       	brne	.-80     	; 0x244c <main+0x1dc>
	u8 LR_DalLetter[]=  {0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00, 0x00};
    249c:	ce 01       	movw	r24, r28
    249e:	89 96       	adiw	r24, 0x29	; 41
    24a0:	64 96       	adiw	r28, 0x14	; 20
    24a2:	9f af       	std	Y+63, r25	; 0x3f
    24a4:	8e af       	std	Y+62, r24	; 0x3e
    24a6:	64 97       	sbiw	r28, 0x14	; 20
    24a8:	e0 e7       	ldi	r30, 0x70	; 112
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	66 96       	adiw	r28, 0x16	; 22
    24ae:	ff af       	std	Y+63, r31	; 0x3f
    24b0:	ee af       	std	Y+62, r30	; 0x3e
    24b2:	66 97       	sbiw	r28, 0x16	; 22
    24b4:	f8 e0       	ldi	r31, 0x08	; 8
    24b6:	67 96       	adiw	r28, 0x17	; 23
    24b8:	ff af       	std	Y+63, r31	; 0x3f
    24ba:	67 97       	sbiw	r28, 0x17	; 23
    24bc:	66 96       	adiw	r28, 0x16	; 22
    24be:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    24c2:	66 97       	sbiw	r28, 0x16	; 22
    24c4:	00 80       	ld	r0, Z
    24c6:	66 96       	adiw	r28, 0x16	; 22
    24c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    24cc:	66 97       	sbiw	r28, 0x16	; 22
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	66 96       	adiw	r28, 0x16	; 22
    24d2:	9f af       	std	Y+63, r25	; 0x3f
    24d4:	8e af       	std	Y+62, r24	; 0x3e
    24d6:	66 97       	sbiw	r28, 0x16	; 22
    24d8:	64 96       	adiw	r28, 0x14	; 20
    24da:	ee ad       	ldd	r30, Y+62	; 0x3e
    24dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    24de:	64 97       	sbiw	r28, 0x14	; 20
    24e0:	00 82       	st	Z, r0
    24e2:	64 96       	adiw	r28, 0x14	; 20
    24e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    24e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24e8:	64 97       	sbiw	r28, 0x14	; 20
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	64 96       	adiw	r28, 0x14	; 20
    24ee:	9f af       	std	Y+63, r25	; 0x3f
    24f0:	8e af       	std	Y+62, r24	; 0x3e
    24f2:	64 97       	sbiw	r28, 0x14	; 20
    24f4:	67 96       	adiw	r28, 0x17	; 23
    24f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24f8:	67 97       	sbiw	r28, 0x17	; 23
    24fa:	91 50       	subi	r25, 0x01	; 1
    24fc:	67 96       	adiw	r28, 0x17	; 23
    24fe:	9f af       	std	Y+63, r25	; 0x3f
    2500:	67 97       	sbiw	r28, 0x17	; 23
    2502:	67 96       	adiw	r28, 0x17	; 23
    2504:	ef ad       	ldd	r30, Y+63	; 0x3f
    2506:	67 97       	sbiw	r28, 0x17	; 23
    2508:	ee 23       	and	r30, r30
    250a:	c1 f6       	brne	.-80     	; 0x24bc <main+0x24c>
	u8 LR_Ya2Letter[]=  {0x02, 0x05, 0x08, 0x04, 0x12, 0x0C, 0x00, 0x00};
    250c:	ce 01       	movw	r24, r28
    250e:	c1 96       	adiw	r24, 0x31	; 49
    2510:	69 96       	adiw	r28, 0x19	; 25
    2512:	9f af       	std	Y+63, r25	; 0x3f
    2514:	8e af       	std	Y+62, r24	; 0x3e
    2516:	69 97       	sbiw	r28, 0x19	; 25
    2518:	e8 e6       	ldi	r30, 0x68	; 104
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	6b 96       	adiw	r28, 0x1b	; 27
    251e:	ff af       	std	Y+63, r31	; 0x3f
    2520:	ee af       	std	Y+62, r30	; 0x3e
    2522:	6b 97       	sbiw	r28, 0x1b	; 27
    2524:	f8 e0       	ldi	r31, 0x08	; 8
    2526:	6c 96       	adiw	r28, 0x1c	; 28
    2528:	ff af       	std	Y+63, r31	; 0x3f
    252a:	6c 97       	sbiw	r28, 0x1c	; 28
    252c:	6b 96       	adiw	r28, 0x1b	; 27
    252e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2530:	ff ad       	ldd	r31, Y+63	; 0x3f
    2532:	6b 97       	sbiw	r28, 0x1b	; 27
    2534:	00 80       	ld	r0, Z
    2536:	6b 96       	adiw	r28, 0x1b	; 27
    2538:	8e ad       	ldd	r24, Y+62	; 0x3e
    253a:	9f ad       	ldd	r25, Y+63	; 0x3f
    253c:	6b 97       	sbiw	r28, 0x1b	; 27
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	6b 96       	adiw	r28, 0x1b	; 27
    2542:	9f af       	std	Y+63, r25	; 0x3f
    2544:	8e af       	std	Y+62, r24	; 0x3e
    2546:	6b 97       	sbiw	r28, 0x1b	; 27
    2548:	69 96       	adiw	r28, 0x19	; 25
    254a:	ee ad       	ldd	r30, Y+62	; 0x3e
    254c:	ff ad       	ldd	r31, Y+63	; 0x3f
    254e:	69 97       	sbiw	r28, 0x19	; 25
    2550:	00 82       	st	Z, r0
    2552:	69 96       	adiw	r28, 0x19	; 25
    2554:	8e ad       	ldd	r24, Y+62	; 0x3e
    2556:	9f ad       	ldd	r25, Y+63	; 0x3f
    2558:	69 97       	sbiw	r28, 0x19	; 25
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	69 96       	adiw	r28, 0x19	; 25
    255e:	9f af       	std	Y+63, r25	; 0x3f
    2560:	8e af       	std	Y+62, r24	; 0x3e
    2562:	69 97       	sbiw	r28, 0x19	; 25
    2564:	6c 96       	adiw	r28, 0x1c	; 28
    2566:	9f ad       	ldd	r25, Y+63	; 0x3f
    2568:	6c 97       	sbiw	r28, 0x1c	; 28
    256a:	91 50       	subi	r25, 0x01	; 1
    256c:	6c 96       	adiw	r28, 0x1c	; 28
    256e:	9f af       	std	Y+63, r25	; 0x3f
    2570:	6c 97       	sbiw	r28, 0x1c	; 28
    2572:	6c 96       	adiw	r28, 0x1c	; 28
    2574:	ef ad       	ldd	r30, Y+63	; 0x3f
    2576:	6c 97       	sbiw	r28, 0x1c	; 28
    2578:	ee 23       	and	r30, r30
    257a:	c1 f6       	brne	.-80     	; 0x252c <main+0x2bc>



	// lcd init
	HLCD_voidInit();
    257c:	0e 94 b6 0b 	call	0x176c	; 0x176c <HLCD_voidInit>


	//Write 7letters or patterns to CGRAM
	HLCD_voidWriteOnCGRAM(EEN_LETTER_BASE_ADDRESS,LR_3enLetter);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	9e 01       	movw	r18, r28
    2584:	2f 5f       	subi	r18, 0xFF	; 255
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
    2588:	b9 01       	movw	r22, r18
    258a:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(MIM_LETTER_BASE_ADDRESS,LR_MimLetter);
    258e:	9e 01       	movw	r18, r28
    2590:	27 5f       	subi	r18, 0xF7	; 247
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	b9 01       	movw	r22, r18
    2598:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(RA2_LETTER_BASE_ADDRESS,LR_Ra2Letter);
    259c:	9e 01       	movw	r18, r28
    259e:	2f 5e       	subi	r18, 0xEF	; 239
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	b9 01       	movw	r22, r18
    25a6:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(NOON_LETTER_BASE_ADDRESS,LR_NoonLetter);
    25aa:	9e 01       	movw	r18, r28
    25ac:	27 5e       	subi	r18, 0xE7	; 231
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	b9 01       	movw	r22, r18
    25b4:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(GEEM_LETTER_BASE_ADDRESS,LR_GeemLetter);
    25b8:	9e 01       	movw	r18, r28
    25ba:	2f 5d       	subi	r18, 0xDF	; 223
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	84 e0       	ldi	r24, 0x04	; 4
    25c0:	b9 01       	movw	r22, r18
    25c2:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(DAL_LETTER_BASE_ADDRESS,LR_DalLetter);
    25c6:	9e 01       	movw	r18, r28
    25c8:	27 5d       	subi	r18, 0xD7	; 215
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	85 e0       	ldi	r24, 0x05	; 5
    25ce:	b9 01       	movw	r22, r18
    25d0:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>
	HLCD_voidWriteOnCGRAM(YA2_LETTER_BASE_ADDRESS,LR_Ya2Letter);
    25d4:	9e 01       	movw	r18, r28
    25d6:	2f 5c       	subi	r18, 0xCF	; 207
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
    25da:	86 e0       	ldi	r24, 0x06	; 6
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 c0 10 	call	0x2180	; 0x2180 <HLCD_voidWriteOnCGRAM>

	//SET AC To DDRAM and then row 1, col 12 for 1st letter(FIRST_LETTER_COL_INDEX)
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX);
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	6c e0       	ldi	r22, 0x0C	; 12
    25e6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(EEN_LETTER_BASE_ADDRESS);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>


	//row 1, col 11 for 2nd letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-1);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	6b e0       	ldi	r22, 0x0B	; 11
    25f4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(MIM_LETTER_BASE_ADDRESS);
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>

	//row 1, col 10 for 3rd letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-2);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	6a e0       	ldi	r22, 0x0A	; 10
    2602:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(RA2_LETTER_BASE_ADDRESS);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>


	//row 1, col 9 for 4th letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-3);
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	69 e0       	ldi	r22, 0x09	; 9
    2610:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(' ');
    2614:	80 e2       	ldi	r24, 0x20	; 32
    2616:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>


	//row 1, col 8 for 5th letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-4);
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	68 e0       	ldi	r22, 0x08	; 8
    261e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(NOON_LETTER_BASE_ADDRESS);
    2622:	83 e0       	ldi	r24, 0x03	; 3
    2624:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>



	//row 1, col 7 for 6th letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-5);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	67 e0       	ldi	r22, 0x07	; 7
    262c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(GEEM_LETTER_BASE_ADDRESS);
    2630:	84 e0       	ldi	r24, 0x04	; 4
    2632:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>



	//row 1, col 6 for 7th letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-6);
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	66 e0       	ldi	r22, 0x06	; 6
    263a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(DAL_LETTER_BASE_ADDRESS);
    263e:	85 e0       	ldi	r24, 0x05	; 5
    2640:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>

	//row 1, col 5 for 8th letter
	HLCD_voidGoToPosition(ROW1,FIRST_LETTER_COL_INDEX-7);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	65 e0       	ldi	r22, 0x05	; 5
    2648:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HLCD_voidGoToPosition>
	HLCD_voidSendData(YA2_LETTER_BASE_ADDRESS);
    264c:	86 e0       	ldi	r24, 0x06	; 6
    264e:	0e 94 a6 0a 	call	0x154c	; 0x154c <HLCD_voidSendData>
    2652:	ff cf       	rjmp	.-2      	; 0x2652 <main+0x3e2>

00002654 <__mulsi3>:
    2654:	62 9f       	mul	r22, r18
    2656:	d0 01       	movw	r26, r0
    2658:	73 9f       	mul	r23, r19
    265a:	f0 01       	movw	r30, r0
    265c:	82 9f       	mul	r24, r18
    265e:	e0 0d       	add	r30, r0
    2660:	f1 1d       	adc	r31, r1
    2662:	64 9f       	mul	r22, r20
    2664:	e0 0d       	add	r30, r0
    2666:	f1 1d       	adc	r31, r1
    2668:	92 9f       	mul	r25, r18
    266a:	f0 0d       	add	r31, r0
    266c:	83 9f       	mul	r24, r19
    266e:	f0 0d       	add	r31, r0
    2670:	74 9f       	mul	r23, r20
    2672:	f0 0d       	add	r31, r0
    2674:	65 9f       	mul	r22, r21
    2676:	f0 0d       	add	r31, r0
    2678:	99 27       	eor	r25, r25
    267a:	72 9f       	mul	r23, r18
    267c:	b0 0d       	add	r27, r0
    267e:	e1 1d       	adc	r30, r1
    2680:	f9 1f       	adc	r31, r25
    2682:	63 9f       	mul	r22, r19
    2684:	b0 0d       	add	r27, r0
    2686:	e1 1d       	adc	r30, r1
    2688:	f9 1f       	adc	r31, r25
    268a:	bd 01       	movw	r22, r26
    268c:	cf 01       	movw	r24, r30
    268e:	11 24       	eor	r1, r1
    2690:	08 95       	ret

00002692 <__udivmodsi4>:
    2692:	a1 e2       	ldi	r26, 0x21	; 33
    2694:	1a 2e       	mov	r1, r26
    2696:	aa 1b       	sub	r26, r26
    2698:	bb 1b       	sub	r27, r27
    269a:	fd 01       	movw	r30, r26
    269c:	0d c0       	rjmp	.+26     	; 0x26b8 <__udivmodsi4_ep>

0000269e <__udivmodsi4_loop>:
    269e:	aa 1f       	adc	r26, r26
    26a0:	bb 1f       	adc	r27, r27
    26a2:	ee 1f       	adc	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	a2 17       	cp	r26, r18
    26a8:	b3 07       	cpc	r27, r19
    26aa:	e4 07       	cpc	r30, r20
    26ac:	f5 07       	cpc	r31, r21
    26ae:	20 f0       	brcs	.+8      	; 0x26b8 <__udivmodsi4_ep>
    26b0:	a2 1b       	sub	r26, r18
    26b2:	b3 0b       	sbc	r27, r19
    26b4:	e4 0b       	sbc	r30, r20
    26b6:	f5 0b       	sbc	r31, r21

000026b8 <__udivmodsi4_ep>:
    26b8:	66 1f       	adc	r22, r22
    26ba:	77 1f       	adc	r23, r23
    26bc:	88 1f       	adc	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	1a 94       	dec	r1
    26c2:	69 f7       	brne	.-38     	; 0x269e <__udivmodsi4_loop>
    26c4:	60 95       	com	r22
    26c6:	70 95       	com	r23
    26c8:	80 95       	com	r24
    26ca:	90 95       	com	r25
    26cc:	9b 01       	movw	r18, r22
    26ce:	ac 01       	movw	r20, r24
    26d0:	bd 01       	movw	r22, r26
    26d2:	cf 01       	movw	r24, r30
    26d4:	08 95       	ret

000026d6 <__divmodsi4>:
    26d6:	97 fb       	bst	r25, 7
    26d8:	09 2e       	mov	r0, r25
    26da:	05 26       	eor	r0, r21
    26dc:	0e d0       	rcall	.+28     	; 0x26fa <__divmodsi4_neg1>
    26de:	57 fd       	sbrc	r21, 7
    26e0:	04 d0       	rcall	.+8      	; 0x26ea <__divmodsi4_neg2>
    26e2:	d7 df       	rcall	.-82     	; 0x2692 <__udivmodsi4>
    26e4:	0a d0       	rcall	.+20     	; 0x26fa <__divmodsi4_neg1>
    26e6:	00 1c       	adc	r0, r0
    26e8:	38 f4       	brcc	.+14     	; 0x26f8 <__divmodsi4_exit>

000026ea <__divmodsi4_neg2>:
    26ea:	50 95       	com	r21
    26ec:	40 95       	com	r20
    26ee:	30 95       	com	r19
    26f0:	21 95       	neg	r18
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	4f 4f       	sbci	r20, 0xFF	; 255
    26f6:	5f 4f       	sbci	r21, 0xFF	; 255

000026f8 <__divmodsi4_exit>:
    26f8:	08 95       	ret

000026fa <__divmodsi4_neg1>:
    26fa:	f6 f7       	brtc	.-4      	; 0x26f8 <__divmodsi4_exit>
    26fc:	90 95       	com	r25
    26fe:	80 95       	com	r24
    2700:	70 95       	com	r23
    2702:	61 95       	neg	r22
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	8f 4f       	sbci	r24, 0xFF	; 255
    2708:	9f 4f       	sbci	r25, 0xFF	; 255
    270a:	08 95       	ret

0000270c <__prologue_saves__>:
    270c:	2f 92       	push	r2
    270e:	3f 92       	push	r3
    2710:	4f 92       	push	r4
    2712:	5f 92       	push	r5
    2714:	6f 92       	push	r6
    2716:	7f 92       	push	r7
    2718:	8f 92       	push	r8
    271a:	9f 92       	push	r9
    271c:	af 92       	push	r10
    271e:	bf 92       	push	r11
    2720:	cf 92       	push	r12
    2722:	df 92       	push	r13
    2724:	ef 92       	push	r14
    2726:	ff 92       	push	r15
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	ca 1b       	sub	r28, r26
    2736:	db 0b       	sbc	r29, r27
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	09 94       	ijmp

00002744 <__epilogue_restores__>:
    2744:	2a 88       	ldd	r2, Y+18	; 0x12
    2746:	39 88       	ldd	r3, Y+17	; 0x11
    2748:	48 88       	ldd	r4, Y+16	; 0x10
    274a:	5f 84       	ldd	r5, Y+15	; 0x0f
    274c:	6e 84       	ldd	r6, Y+14	; 0x0e
    274e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2750:	8c 84       	ldd	r8, Y+12	; 0x0c
    2752:	9b 84       	ldd	r9, Y+11	; 0x0b
    2754:	aa 84       	ldd	r10, Y+10	; 0x0a
    2756:	b9 84       	ldd	r11, Y+9	; 0x09
    2758:	c8 84       	ldd	r12, Y+8	; 0x08
    275a:	df 80       	ldd	r13, Y+7	; 0x07
    275c:	ee 80       	ldd	r14, Y+6	; 0x06
    275e:	fd 80       	ldd	r15, Y+5	; 0x05
    2760:	0c 81       	ldd	r16, Y+4	; 0x04
    2762:	1b 81       	ldd	r17, Y+3	; 0x03
    2764:	aa 81       	ldd	r26, Y+2	; 0x02
    2766:	b9 81       	ldd	r27, Y+1	; 0x01
    2768:	ce 0f       	add	r28, r30
    276a:	d1 1d       	adc	r29, r1
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	ed 01       	movw	r28, r26
    2778:	08 95       	ret

0000277a <_exit>:
    277a:	f8 94       	cli

0000277c <__stop_program>:
    277c:	ff cf       	rjmp	.-2      	; 0x277c <__stop_program>

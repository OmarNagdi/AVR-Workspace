
my_ADC_driver_working.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002744  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002744  000027b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019ec  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d3c  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000051e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000092ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000942c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000096ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <main>
      7a:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 85 13 	jmp	0x270a	; 0x270a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 85 13 	jmp	0x270a	; 0x270a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e6       	ldi	r22, 0x6A	; 106
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 95 13 	jmp	0x272a	; 0x272a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MADC_voidInit>:
#include"ADC_Interface.h"
#include "ADC_Cfg.h"
#include <avr/io.h>

void MADC_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	//We will configure here options that don't change during run time

	// 1-Ref. Volt.
	SET_BIT(ADMUX,REFS0);
     c96:	a7 e2       	ldi	r26, 0x27	; 39
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e2       	ldi	r30, 0x27	; 39
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 64       	ori	r24, 0x40	; 64
     ca2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24

	// 2-Data Adjustment Direction
	CLR_BIT(ADMUX,ADLAR);
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	8c 93       	st	X, r24

	// 3-ADC peripheral Enable
	SET_BIT(ADCSRA,ADEN);
     cc0:	a6 e2       	ldi	r26, 0x26	; 38
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e2       	ldi	r30, 0x26	; 38
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	8c 93       	st	X, r24

	// 4-Auto Trigger Enable
	CLR_BIT(ADCSRA,ADATE);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 7d       	andi	r24, 0xDF	; 223
     cda:	8c 93       	st	X, r24

	// 4-a Select Trigger Source

	// 5-Interrupt Enable
	CLR_BIT(ADCSRA,ADIE);
     cdc:	a6 e2       	ldi	r26, 0x26	; 38
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e6 e2       	ldi	r30, 0x26	; 38
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	8c 93       	st	X, r24
	//Using bit masking instead of using set & clr operations normally
	/*First, we clear three bits of the prescaler without changing the rest of the register and
	 then we force the required mask which is the required value of the prescaler again without
	 changing the rest of the register*/

	ADCSRA= ( ADCSRA & 0xF8 ) |  (ADC_PRESCALER) ;
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 7f       	andi	r24, 0xF8	; 248
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24





}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <MADC_u16AnalogRead>:

//func. giving us the int value for the no. of steps
u16 MADC_u16AnalogRead(u8 A_u8ChannelNo)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <MADC_u16AnalogRead+0x6>
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Input Validation(can be done by bit masking also)
	if(A_u8ChannelNo<32)
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	60 f5       	brcc	.+88     	; 0xd6c <MADC_u16AnalogRead+0x6c>
	{
		// 2- Select Channel
		ADMUX= (ADMUX &0xE0) | A_u8ChannelNo;
     d14:	a7 e2       	ldi	r26, 0x27	; 39
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e2       	ldi	r30, 0x27	; 39
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	98 2f       	mov	r25, r24
     d20:	90 7e       	andi	r25, 0xE0	; 224
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	89 2b       	or	r24, r25
     d26:	8c 93       	st	X, r24

		// 3-Start Conversion
		SET_BIT(ADCSRA,ADSC);
     d28:	a6 e2       	ldi	r26, 0x26	; 38
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e6 e2       	ldi	r30, 0x26	; 38
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 64       	ori	r24, 0x40	; 64
     d34:	8c 93       	st	X, r24

		// 4-Poll On flag(interrupt disabled)
		while(GET_BIT(ADCSRA,ADIF)   !=1  )
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	82 95       	swap	r24
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <MADC_u16AnalogRead+0x36>
		; // = {}
		// 5-Clear flag by writing 1 to it in case of polling
		SET_BIT(ADCSRA,ADIF);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8c 93       	st	X, r24
		// 6-Read ADC Data
		return ADC;
     d5a:	e4 e2       	ldi	r30, 0x24	; 36
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	9b 83       	std	Y+3, r25	; 0x03
     d64:	8a 83       	std	Y+2, r24	; 0x02

	}


}
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <MADC_u16AnalogRead+0x6c>
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <MDIO_voidSetPinDirection>:
#define DIO_PIND_REG      *((volatile u8 *) 0X30)


// MDIO_voidSetPinDirection(PORTA, PIN7, OUTPUT);
void MDIO_voidSetPinDirection(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinDirection)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	2d 97       	sbiw	r28, 0x0d	; 13
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	6a 83       	std	Y+2, r22	; 0x02
     d90:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinDirection <=OUTPUT))
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	08 f0       	brcs	.+2      	; 0xd9a <MDIO_voidSetPinDirection+0x22>
     d98:	08 c1       	rjmp	.+528    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <MDIO_voidSetPinDirection+0x2a>
     da0:	04 c1       	rjmp	.+520    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	08 f0       	brcs	.+2      	; 0xdaa <MDIO_voidSetPinDirection+0x32>
     da8:	00 c1       	rjmp	.+512    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
	{
		switch (A_u8PortNo)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3d 87       	std	Y+13, r19	; 0x0d
     db2:	2c 87       	std	Y+12, r18	; 0x0c
     db4:	8c 85       	ldd	r24, Y+12	; 0x0c
     db6:	9d 85       	ldd	r25, Y+13	; 0x0d
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <MDIO_voidSetPinDirection+0x48>
     dbe:	4f c0       	rjmp	.+158    	; 0xe5e <MDIO_voidSetPinDirection+0xe6>
     dc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <MDIO_voidSetPinDirection+0x5c>
     dca:	8c 85       	ldd	r24, Y+12	; 0x0c
     dcc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	71 f0       	breq	.+28     	; 0xdee <MDIO_voidSetPinDirection+0x76>
     dd2:	eb c0       	rjmp	.+470    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <MDIO_voidSetPinDirection+0x68>
     dde:	77 c0       	rjmp	.+238    	; 0xece <MDIO_voidSetPinDirection+0x156>
     de0:	8c 85       	ldd	r24, Y+12	; 0x0c
     de2:	9d 85       	ldd	r25, Y+13	; 0x0d
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <MDIO_voidSetPinDirection+0x74>
     dea:	a9 c0       	rjmp	.+338    	; 0xf3e <MDIO_voidSetPinDirection+0x1c6>
     dec:	de c0       	rjmp	.+444    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
		{
		  case PORTA:
			  	  	  switch (A_u8PinDirection)
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3b 87       	std	Y+11, r19	; 0x0b
     df6:	2a 87       	std	Y+10, r18	; 0x0a
     df8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	d1 f0       	breq	.+52     	; 0xe34 <MDIO_voidSetPinDirection+0xbc>
     e00:	2a 85       	ldd	r18, Y+10	; 0x0a
     e02:	3b 85       	ldd	r19, Y+11	; 0x0b
     e04:	21 30       	cpi	r18, 0x01	; 1
     e06:	31 05       	cpc	r19, r1
     e08:	09 f0       	breq	.+2      	; 0xe0c <MDIO_voidSetPinDirection+0x94>
     e0a:	cf c0       	rjmp	.+414    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	  {
			  	  	    case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     e0c:	aa e3       	ldi	r26, 0x3A	; 58
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ea e3       	ldi	r30, 0x3A	; 58
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <MDIO_voidSetPinDirection+0xb2>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <MDIO_voidSetPinDirection+0xae>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	bb c0       	rjmp	.+374    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	    case INPUT : CLR_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     e34:	aa e3       	ldi	r26, 0x3A	; 58
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ea e3       	ldi	r30, 0x3A	; 58
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <MDIO_voidSetPinDirection+0xda>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <MDIO_voidSetPinDirection+0xd6>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	a6 c0       	rjmp	.+332    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	  }
			  	  	  break;
		 case PORTB:
					  switch (A_u8PinDirection)
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	39 87       	std	Y+9, r19	; 0x09
     e66:	28 87       	std	Y+8, r18	; 0x08
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	99 85       	ldd	r25, Y+9	; 0x09
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	d1 f0       	breq	.+52     	; 0xea4 <MDIO_voidSetPinDirection+0x12c>
     e70:	28 85       	ldd	r18, Y+8	; 0x08
     e72:	39 85       	ldd	r19, Y+9	; 0x09
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	31 05       	cpc	r19, r1
     e78:	09 f0       	breq	.+2      	; 0xe7c <MDIO_voidSetPinDirection+0x104>
     e7a:	97 c0       	rjmp	.+302    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     e7c:	a7 e3       	ldi	r26, 0x37	; 55
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e3       	ldi	r30, 0x37	; 55
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <MDIO_voidSetPinDirection+0x122>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <MDIO_voidSetPinDirection+0x11e>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	83 c0       	rjmp	.+262    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     ea4:	a7 e3       	ldi	r26, 0x37	; 55
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e3       	ldi	r30, 0x37	; 55
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <MDIO_voidSetPinDirection+0x14a>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <MDIO_voidSetPinDirection+0x146>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	6e c0       	rjmp	.+220    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTC:
					  switch (A_u8PinDirection)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3f 83       	std	Y+7, r19	; 0x07
     ed6:	2e 83       	std	Y+6, r18	; 0x06
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	d1 f0       	breq	.+52     	; 0xf14 <MDIO_voidSetPinDirection+0x19c>
     ee0:	2e 81       	ldd	r18, Y+6	; 0x06
     ee2:	3f 81       	ldd	r19, Y+7	; 0x07
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <MDIO_voidSetPinDirection+0x174>
     eea:	5f c0       	rjmp	.+190    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     eec:	a4 e3       	ldi	r26, 0x34	; 52
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <MDIO_voidSetPinDirection+0x192>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <MDIO_voidSetPinDirection+0x18e>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	4b c0       	rjmp	.+150    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <MDIO_voidSetPinDirection+0x1ba>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <MDIO_voidSetPinDirection+0x1b6>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	36 c0       	rjmp	.+108    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTD:
					  switch (A_u8PinDirection)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3d 83       	std	Y+5, r19	; 0x05
     f46:	2c 83       	std	Y+4, r18	; 0x04
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	c9 f0       	breq	.+50     	; 0xf82 <MDIO_voidSetPinDirection+0x20a>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	21 30       	cpi	r18, 0x01	; 1
     f56:	31 05       	cpc	r19, r1
     f58:	41 f5       	brne	.+80     	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     f5a:	a1 e3       	ldi	r26, 0x31	; 49
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e1 e3       	ldi	r30, 0x31	; 49
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <MDIO_voidSetPinDirection+0x200>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <MDIO_voidSetPinDirection+0x1fc>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	14 c0       	rjmp	.+40     	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     f82:	a1 e3       	ldi	r26, 0x31	; 49
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e1 e3       	ldi	r30, 0x31	; 49
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <MDIO_voidSetPinDirection+0x228>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <MDIO_voidSetPinDirection+0x224>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
     faa:	2d 96       	adiw	r28, 0x0d	; 13
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinValue)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2d 97       	sbiw	r28, 0x0d	; 13
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	6a 83       	std	Y+2, r22	; 0x02
     fd4:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinValue <=HIGH))
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <MDIO_voidSetPinValue+0x22>
     fdc:	08 c1       	rjmp	.+528    	; 0x11ee <MDIO_voidSetPinValue+0x232>
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	88 30       	cpi	r24, 0x08	; 8
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <MDIO_voidSetPinValue+0x2a>
     fe4:	04 c1       	rjmp	.+520    	; 0x11ee <MDIO_voidSetPinValue+0x232>
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	08 f0       	brcs	.+2      	; 0xfee <MDIO_voidSetPinValue+0x32>
     fec:	00 c1       	rjmp	.+512    	; 0x11ee <MDIO_voidSetPinValue+0x232>
	{
		switch (A_u8PortNo)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3d 87       	std	Y+13, r19	; 0x0d
     ff6:	2c 87       	std	Y+12, r18	; 0x0c
     ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <MDIO_voidSetPinValue+0x48>
    1002:	4f c0       	rjmp	.+158    	; 0x10a2 <MDIO_voidSetPinValue+0xe6>
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	3d 85       	ldd	r19, Y+13	; 0x0d
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	2c f4       	brge	.+10     	; 0x1018 <MDIO_voidSetPinValue+0x5c>
    100e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1010:	9d 85       	ldd	r25, Y+13	; 0x0d
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	71 f0       	breq	.+28     	; 0x1032 <MDIO_voidSetPinValue+0x76>
    1016:	eb c0       	rjmp	.+470    	; 0x11ee <MDIO_voidSetPinValue+0x232>
    1018:	2c 85       	ldd	r18, Y+12	; 0x0c
    101a:	3d 85       	ldd	r19, Y+13	; 0x0d
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <MDIO_voidSetPinValue+0x68>
    1022:	77 c0       	rjmp	.+238    	; 0x1112 <MDIO_voidSetPinValue+0x156>
    1024:	8c 85       	ldd	r24, Y+12	; 0x0c
    1026:	9d 85       	ldd	r25, Y+13	; 0x0d
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <MDIO_voidSetPinValue+0x74>
    102e:	a9 c0       	rjmp	.+338    	; 0x1182 <MDIO_voidSetPinValue+0x1c6>
    1030:	de c0       	rjmp	.+444    	; 0x11ee <MDIO_voidSetPinValue+0x232>
		{
			case PORTA:
						switch (A_u8PinValue)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3b 87       	std	Y+11, r19	; 0x0b
    103a:	2a 87       	std	Y+10, r18	; 0x0a
    103c:	8a 85       	ldd	r24, Y+10	; 0x0a
    103e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	d1 f0       	breq	.+52     	; 0x1078 <MDIO_voidSetPinValue+0xbc>
    1044:	2a 85       	ldd	r18, Y+10	; 0x0a
    1046:	3b 85       	ldd	r19, Y+11	; 0x0b
    1048:	21 30       	cpi	r18, 0x01	; 1
    104a:	31 05       	cpc	r19, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <MDIO_voidSetPinValue+0x94>
    104e:	cf c0       	rjmp	.+414    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTA_REG,A_u8PinNo); break;
    1050:	ab e3       	ldi	r26, 0x3B	; 59
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <MDIO_voidSetPinValue+0xb2>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <MDIO_voidSetPinValue+0xae>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	bb c0       	rjmp	.+374    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTA_REG,A_u8PinNo); break;
    1078:	ab e3       	ldi	r26, 0x3B	; 59
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	eb e3       	ldi	r30, 0x3B	; 59
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <MDIO_voidSetPinValue+0xda>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <MDIO_voidSetPinValue+0xd6>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	a6 c0       	rjmp	.+332    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTB:
						switch (A_u8PinValue)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	39 87       	std	Y+9, r19	; 0x09
    10aa:	28 87       	std	Y+8, r18	; 0x08
    10ac:	88 85       	ldd	r24, Y+8	; 0x08
    10ae:	99 85       	ldd	r25, Y+9	; 0x09
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	d1 f0       	breq	.+52     	; 0x10e8 <MDIO_voidSetPinValue+0x12c>
    10b4:	28 85       	ldd	r18, Y+8	; 0x08
    10b6:	39 85       	ldd	r19, Y+9	; 0x09
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	31 05       	cpc	r19, r1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <MDIO_voidSetPinValue+0x104>
    10be:	97 c0       	rjmp	.+302    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTB_REG,A_u8PinNo); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <MDIO_voidSetPinValue+0x122>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <MDIO_voidSetPinValue+0x11e>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	83 c0       	rjmp	.+262    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTB_REG,A_u8PinNo); break;
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <MDIO_voidSetPinValue+0x14a>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <MDIO_voidSetPinValue+0x146>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	6e c0       	rjmp	.+220    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTC:
						switch (A_u8PinValue)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3f 83       	std	Y+7, r19	; 0x07
    111a:	2e 83       	std	Y+6, r18	; 0x06
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	d1 f0       	breq	.+52     	; 0x1158 <MDIO_voidSetPinValue+0x19c>
    1124:	2e 81       	ldd	r18, Y+6	; 0x06
    1126:	3f 81       	ldd	r19, Y+7	; 0x07
    1128:	21 30       	cpi	r18, 0x01	; 1
    112a:	31 05       	cpc	r19, r1
    112c:	09 f0       	breq	.+2      	; 0x1130 <MDIO_voidSetPinValue+0x174>
    112e:	5f c0       	rjmp	.+190    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <MDIO_voidSetPinValue+0x192>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <MDIO_voidSetPinValue+0x18e>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	4b c0       	rjmp	.+150    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_voidSetPinValue+0x1ba>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_voidSetPinValue+0x1b6>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	36 c0       	rjmp	.+108    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTD:
						switch (A_u8PinValue)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	2c 83       	std	Y+4, r18	; 0x04
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	c9 f0       	breq	.+50     	; 0x11c6 <MDIO_voidSetPinValue+0x20a>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	21 30       	cpi	r18, 0x01	; 1
    119a:	31 05       	cpc	r19, r1
    119c:	41 f5       	brne	.+80     	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    119e:	a2 e3       	ldi	r26, 0x32	; 50
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e2 e3       	ldi	r30, 0x32	; 50
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <MDIO_voidSetPinValue+0x200>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <MDIO_voidSetPinValue+0x1fc>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <MDIO_voidSetPinValue+0x228>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <MDIO_voidSetPinValue+0x224>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
						}
						break;
		}
	}
}
    11ee:	2d 96       	adiw	r28, 0x0d	; 13
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <MDIO_u8GetPinValue>:


u8   MDIO_u8GetPinValue(u8 A_u8PortNo, u8 A_u8PinNo)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <MDIO_u8GetPinValue+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <MDIO_u8GetPinValue+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=5;
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	89 83       	std	Y+1, r24	; 0x01
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	08 f0       	brcs	.+2      	; 0x121e <MDIO_u8GetPinValue+0x1e>
    121c:	6b c0       	rjmp	.+214    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <MDIO_u8GetPinValue+0x26>
    1224:	67 c0       	rjmp	.+206    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
		{
			switch (A_u8PortNo)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 83       	std	Y+5, r19	; 0x05
    122e:	2c 83       	std	Y+4, r18	; 0x04
    1230:	4c 81       	ldd	r20, Y+4	; 0x04
    1232:	5d 81       	ldd	r21, Y+5	; 0x05
    1234:	41 30       	cpi	r20, 0x01	; 1
    1236:	51 05       	cpc	r21, r1
    1238:	41 f1       	breq	.+80     	; 0x128a <MDIO_u8GetPinValue+0x8a>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	34 f4       	brge	.+12     	; 0x1250 <MDIO_u8GetPinValue+0x50>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	61 f0       	breq	.+24     	; 0x1266 <MDIO_u8GetPinValue+0x66>
    124e:	52 c0       	rjmp	.+164    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
    1250:	4c 81       	ldd	r20, Y+4	; 0x04
    1252:	5d 81       	ldd	r21, Y+5	; 0x05
    1254:	42 30       	cpi	r20, 0x02	; 2
    1256:	51 05       	cpc	r21, r1
    1258:	51 f1       	breq	.+84     	; 0x12ae <MDIO_u8GetPinValue+0xae>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	b9 f1       	breq	.+110    	; 0x12d2 <MDIO_u8GetPinValue+0xd2>
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			{
			 case PORTA: local_u8PinValue= GET_BIT(DIO_PINA_REG,A_u8PinNo);  break;
    1266:	e9 e3       	ldi	r30, 0x39	; 57
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <MDIO_u8GetPinValue+0x7e>
    127a:	55 95       	asr	r21
    127c:	47 95       	ror	r20
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <MDIO_u8GetPinValue+0x7a>
    1282:	ca 01       	movw	r24, r20
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	35 c0       	rjmp	.+106    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTB: local_u8PinValue= GET_BIT(DIO_PINB_REG,A_u8PinNo);  break;
    128a:	e6 e3       	ldi	r30, 0x36	; 54
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <MDIO_u8GetPinValue+0xa2>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <MDIO_u8GetPinValue+0x9e>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	23 c0       	rjmp	.+70     	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTC: local_u8PinValue= GET_BIT(DIO_PINC_REG,A_u8PinNo);  break;
    12ae:	e3 e3       	ldi	r30, 0x33	; 51
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <MDIO_u8GetPinValue+0xc6>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <MDIO_u8GetPinValue+0xc2>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTD: local_u8PinValue= GET_BIT(DIO_PIND_REG,A_u8PinNo);  break;
    12d2:	e0 e3       	ldi	r30, 0x30	; 48
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_u8GetPinValue+0xea>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_u8GetPinValue+0xe6>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return local_u8PinValue;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <MDIO_voidSetPortDirection+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <MDIO_voidSetPortDirection+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	90 f5       	brcc	.+100    	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
		{
			switch (A_u8PortNo)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3c 83       	std	Y+4, r19	; 0x04
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	d1 f0       	breq	.+52     	; 0x1364 <MDIO_voidSetPortDirection+0x5e>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <MDIO_voidSetPortDirection+0x3e>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	61 f0       	breq	.+24     	; 0x135a <MDIO_voidSetPortDirection+0x54>
    1342:	1e c0       	rjmp	.+60     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	3c 81       	ldd	r19, Y+4	; 0x04
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	81 f0       	breq	.+32     	; 0x136e <MDIO_voidSetPortDirection+0x68>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <MDIO_voidSetPortDirection+0x72>
    1358:	13 c0       	rjmp	.+38     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			{
			 case PORTA: DIO_DDRA_REG= A_u8PortDirection;  break;
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTB: DIO_DDRB_REG= A_u8PortDirection;  break;
    1364:	e7 e3       	ldi	r30, 0x37	; 55
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTC: DIO_DDRC_REG= A_u8PortDirection;  break;
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTD: DIO_DDRD_REG= A_u8PortDirection;  break;
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
			}
		}

}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue    (u8 A_u8PortNo,u8 A_u8PortValue)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <MDIO_voidSetPortValue+0x6>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <MDIO_voidSetPortValue+0x8>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	90 f5       	brcc	.+100    	; 0x1408 <MDIO_voidSetPortValue+0x7a>
			{
				switch (A_u8PortNo)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3c 83       	std	Y+4, r19	; 0x04
    13ac:	2b 83       	std	Y+3, r18	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	d1 f0       	breq	.+52     	; 0x13ec <MDIO_voidSetPortValue+0x5e>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <MDIO_voidSetPortValue+0x3e>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <MDIO_voidSetPortValue+0x54>
    13ca:	1e c0       	rjmp	.+60     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <MDIO_voidSetPortValue+0x68>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <MDIO_voidSetPortValue+0x72>
    13e0:	13 c0       	rjmp	.+38     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				{
				 case PORTA: DIO_PORTA_REG= A_u8PortValue;  break;
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTB: DIO_PORTB_REG= A_u8PortValue;  break;
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTC: DIO_PORTC_REG= A_u8PortValue;  break;
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTD: DIO_PORTD_REG= A_u8PortValue;  break;
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
				}
			}
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <MDIO_u8ReadPortValue>:



// I have created this function on my own
u8 	 MDIO_u8ReadPortValue(u8 A_u8PortNo)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <MDIO_u8ReadPortValue+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <MDIO_u8ReadPortValue+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8a 83       	std	Y+2, r24	; 0x02

	u8 L_u8PortValue;
	//Data Validation
	if(A_u8PortNo<PORTD)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	90 f5       	brcc	.+100    	; 0x148e <MDIO_u8ReadPortValue+0x78>
	{
		switch(A_u8PortNo)
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	2b 83       	std	Y+3, r18	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	d1 f0       	breq	.+52     	; 0x1472 <MDIO_u8ReadPortValue+0x5c>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <MDIO_u8ReadPortValue+0x3c>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <MDIO_u8ReadPortValue+0x52>
    1450:	1e c0       	rjmp	.+60     	; 0x148e <MDIO_u8ReadPortValue+0x78>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <MDIO_u8ReadPortValue+0x66>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <MDIO_u8ReadPortValue+0x70>
    1466:	13 c0       	rjmp	.+38     	; 0x148e <MDIO_u8ReadPortValue+0x78>
		{
			case PORTA:
			/*Activate port pull up resistor
			SET_BYTE(DIO_PORTA_REG,ALL_PORT_HIGH);*/
			L_u8PortValue=DIO_PINA_REG;
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	0e c0       	rjmp	.+28     	; 0x148e <MDIO_u8ReadPortValue+0x78>
			break;

			case PORTB:
			/*Activate port pull up resistor
			SET_BYTE(DIO_PORTB_REG,ALL_PORT_HIGH);*/
			L_u8PortValue=DIO_PINB_REG;
    1472:	e6 e3       	ldi	r30, 0x36	; 54
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	09 c0       	rjmp	.+18     	; 0x148e <MDIO_u8ReadPortValue+0x78>
			break;

			case PORTC:
			/*Activate port pull up resistor
			SET_BYTE(DIO_PORTC_REG,ALL_PORT_HIGH);*/
			L_u8PortValue=DIO_PINC_REG;
    147c:	e3 e3       	ldi	r30, 0x33	; 51
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	04 c0       	rjmp	.+8      	; 0x148e <MDIO_u8ReadPortValue+0x78>
			break;

			case PORTD:
			/*Activate port pull up resistor
			SET_BYTE(DIO_PORTD_REG,ALL_PORT_HIGH);*/
			L_u8PortValue=DIO_PIND_REG;
    1486:	e0 e3       	ldi	r30, 0x30	; 48
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	89 83       	std	Y+1, r24	; 0x01


		}

	}
		return L_u8PortValue;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <HLCD_voidSendCommand>:




void HLCD_voidSendCommand(u8 A_u8Command)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	6d 97       	sbiw	r28, 0x1d	; 29
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,LOW);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>


	//Send Command ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14cc:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	62 e0       	ldi	r22, 0x02	; 2
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e8       	ldi	r26, 0x80	; 128
    14e0:	bf e3       	ldi	r27, 0x3F	; 63
    14e2:	89 8f       	std	Y+25, r24	; 0x19
    14e4:	9a 8f       	std	Y+26, r25	; 0x1a
    14e6:	ab 8f       	std	Y+27, r26	; 0x1b
    14e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	69 8d       	ldd	r22, Y+25	; 0x19
    14ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8d 8b       	std	Y+21, r24	; 0x15
    1504:	9e 8b       	std	Y+22, r25	; 0x16
    1506:	af 8b       	std	Y+23, r26	; 0x17
    1508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    150a:	6d 89       	ldd	r22, Y+21	; 0x15
    150c:	7e 89       	ldd	r23, Y+22	; 0x16
    150e:	8f 89       	ldd	r24, Y+23	; 0x17
    1510:	98 8d       	ldd	r25, Y+24	; 0x18
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	69 8d       	ldd	r22, Y+25	; 0x19
    1546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9c 8b       	std	Y+20, r25	; 0x14
    156a:	8b 8b       	std	Y+19, r24	; 0x13
    156c:	0f c0       	rjmp	.+30     	; 0x158c <HLCD_voidSendCommand+0xee>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1576:	89 89       	ldd	r24, Y+17	; 0x11
    1578:	9a 89       	ldd	r25, Y+18	; 0x12
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <HLCD_voidSendCommand+0xdc>
    157e:	9a 8b       	std	Y+18, r25	; 0x12
    1580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8b 89       	ldd	r24, Y+19	; 0x13
    1584:	9c 89       	ldd	r25, Y+20	; 0x14
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <HLCD_voidSendCommand+0xd0>
    1594:	14 c0       	rjmp	.+40     	; 0x15be <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9c 8b       	std	Y+20, r25	; 0x14
    15a8:	8b 8b       	std	Y+19, r24	; 0x13
    15aa:	8b 89       	ldd	r24, Y+19	; 0x13
    15ac:	9c 89       	ldd	r25, Y+20	; 0x14
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
    15b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b4:	98 89       	ldd	r25, Y+16	; 0x10
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <HLCD_voidSendCommand+0x118>
    15ba:	98 8b       	std	Y+16, r25	; 0x10
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e8       	ldi	r26, 0x80	; 128
    15ce:	bf e3       	ldi	r27, 0x3F	; 63
    15d0:	8b 87       	std	Y+11, r24	; 0x0b
    15d2:	9c 87       	std	Y+12, r25	; 0x0c
    15d4:	ad 87       	std	Y+13, r26	; 0x0d
    15d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15da:	7c 85       	ldd	r23, Y+12	; 0x0c
    15dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15de:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a ef       	ldi	r20, 0xFA	; 250
    15e6:	54 e4       	ldi	r21, 0x44	; 68
    15e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8f 83       	std	Y+7, r24	; 0x07
    15f2:	98 87       	std	Y+8, r25	; 0x08
    15f4:	a9 87       	std	Y+9, r26	; 0x09
    15f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f8:	6f 81       	ldd	r22, Y+7	; 0x07
    15fa:	78 85       	ldd	r23, Y+8	; 0x08
    15fc:	89 85       	ldd	r24, Y+9	; 0x09
    15fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	6b 85       	ldd	r22, Y+11	; 0x0b
    1634:	7c 85       	ldd	r23, Y+12	; 0x0c
    1636:	8d 85       	ldd	r24, Y+13	; 0x0d
    1638:	9e 85       	ldd	r25, Y+14	; 0x0e
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	0f c0       	rjmp	.+30     	; 0x167a <HLCD_voidSendCommand+0x1dc>
    165c:	88 ec       	ldi	r24, 0xC8	; 200
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <HLCD_voidSendCommand+0x1ca>
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <HLCD_voidSendCommand+0x1be>
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <HLCD_voidSendCommand+0x206>
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01





}
    16ac:	6d 96       	adiw	r28, 0x1d	; 29
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <HLCD_voidSendData>:



void HLCD_voidSendData(u8 A_u8Data)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	6d 97       	sbiw	r28, 0x1d	; 29
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA respectively
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,HIGH);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>


	//Send Data ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16ec:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 e8       	ldi	r26, 0x80	; 128
    1700:	bf e3       	ldi	r27, 0x3F	; 63
    1702:	89 8f       	std	Y+25, r24	; 0x19
    1704:	9a 8f       	std	Y+26, r25	; 0x1a
    1706:	ab 8f       	std	Y+27, r26	; 0x1b
    1708:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	69 8d       	ldd	r22, Y+25	; 0x19
    170c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a ef       	ldi	r20, 0xFA	; 250
    1718:	54 e4       	ldi	r21, 0x44	; 68
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8d 8b       	std	Y+21, r24	; 0x15
    1724:	9e 8b       	std	Y+22, r25	; 0x16
    1726:	af 8b       	std	Y+23, r26	; 0x17
    1728:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9c 8b       	std	Y+20, r25	; 0x14
    1748:	8b 8b       	std	Y+19, r24	; 0x13
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    174c:	6d 89       	ldd	r22, Y+21	; 0x15
    174e:	7e 89       	ldd	r23, Y+22	; 0x16
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	98 8d       	ldd	r25, Y+24	; 0x18
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	69 8d       	ldd	r22, Y+25	; 0x19
    1766:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1768:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9c 8b       	std	Y+20, r25	; 0x14
    178a:	8b 8b       	std	Y+19, r24	; 0x13
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <HLCD_voidSendData+0xee>
    178e:	88 ec       	ldi	r24, 0xC8	; 200
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9a 8b       	std	Y+18, r25	; 0x12
    1794:	89 8b       	std	Y+17, r24	; 0x11
    1796:	89 89       	ldd	r24, Y+17	; 0x11
    1798:	9a 89       	ldd	r25, Y+18	; 0x12
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <HLCD_voidSendData+0xdc>
    179e:	9a 8b       	std	Y+18, r25	; 0x12
    17a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9c 8b       	std	Y+20, r25	; 0x14
    17aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <HLCD_voidSendData+0xd0>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6d 89       	ldd	r22, Y+21	; 0x15
    17b8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ba:	8f 89       	ldd	r24, Y+23	; 0x17
    17bc:	98 8d       	ldd	r25, Y+24	; 0x18
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9c 8b       	std	Y+20, r25	; 0x14
    17c8:	8b 8b       	std	Y+19, r24	; 0x13
    17ca:	8b 89       	ldd	r24, Y+19	; 0x13
    17cc:	9c 89       	ldd	r25, Y+20	; 0x14
    17ce:	98 8b       	std	Y+16, r25	; 0x10
    17d0:	8f 87       	std	Y+15, r24	; 0x0f
    17d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d4:	98 89       	ldd	r25, Y+16	; 0x10
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <HLCD_voidSendData+0x118>
    17da:	98 8b       	std	Y+16, r25	; 0x10
    17dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 e8       	ldi	r26, 0x80	; 128
    17ee:	bf e3       	ldi	r27, 0x3F	; 63
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
    17f2:	9c 87       	std	Y+12, r25	; 0x0c
    17f4:	ad 87       	std	Y+13, r26	; 0x0d
    17f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a ef       	ldi	r20, 0xFA	; 250
    1806:	54 e4       	ldi	r21, 0x44	; 68
    1808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8f 83       	std	Y+7, r24	; 0x07
    1812:	98 87       	std	Y+8, r25	; 0x08
    1814:	a9 87       	std	Y+9, r26	; 0x09
    1816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <HLCD_voidSendData+0x17c>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	6b 85       	ldd	r22, Y+11	; 0x0b
    1854:	7c 85       	ldd	r23, Y+12	; 0x0c
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	0f c0       	rjmp	.+30     	; 0x189a <HLCD_voidSendData+0x1dc>
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <HLCD_voidSendData+0x1ca>
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <HLCD_voidSendData+0x1be>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <HLCD_voidSendData+0x206>
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01





}
    18cc:	6d 96       	adiw	r28, 0x1d	; 29
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <HLCD_voidInit>:




// 8bit Init. func.
void HLCD_voidInit(void){
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	cc 54       	subi	r28, 0x4C	; 76
    18ec:	d0 40       	sbci	r29, 0x00	; 0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	fe 01       	movw	r30, r28
    18fa:	e7 5b       	subi	r30, 0xB7	; 183
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a8 ef       	ldi	r26, 0xF8	; 248
    1904:	b1 e4       	ldi	r27, 0x41	; 65
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	8e 01       	movw	r16, r28
    1910:	0b 5b       	subi	r16, 0xBB	; 187
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e7 5b       	subi	r30, 0xB7	; 183
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a ef       	ldi	r20, 0xFA	; 250
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	80 83       	st	Z, r24
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	a2 83       	std	Z+2, r26	; 0x02
    193a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    193c:	fe 01       	movw	r30, r28
    193e:	eb 5b       	subi	r30, 0xBB	; 187
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	44 f4       	brge	.+16     	; 0x196a <HLCD_voidInit+0x8c>
		__ticks = 1;
    195a:	fe 01       	movw	r30, r28
    195c:	ed 5b       	subi	r30, 0xBD	; 189
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	64 c0       	rjmp	.+200    	; 0x1a32 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    196a:	fe 01       	movw	r30, r28
    196c:	eb 5b       	subi	r30, 0xBB	; 187
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f0       	brlt	.+2      	; 0x198a <HLCD_voidInit+0xac>
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	fe 01       	movw	r30, r28
    198c:	e7 5b       	subi	r30, 0xB7	; 183
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8e 01       	movw	r16, r28
    19aa:	0d 5b       	subi	r16, 0xBD	; 189
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <HLCD_voidInit+0x122>
    19c2:	fe 01       	movw	r30, r28
    19c4:	ef 5b       	subi	r30, 0xBF	; 191
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	fe 01       	movw	r30, r28
    19d2:	ef 5b       	subi	r30, 0xBF	; 191
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <HLCD_voidInit+0xfc>
    19de:	fe 01       	movw	r30, r28
    19e0:	ef 5b       	subi	r30, 0xBF	; 191
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	de 01       	movw	r26, r28
    19ea:	ad 5b       	subi	r26, 0xBD	; 189
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 5b       	subi	r30, 0xBD	; 189
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	fe 01       	movw	r30, r28
    1a02:	ed 5b       	subi	r30, 0xBD	; 189
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	d1 f6       	brne	.-76     	; 0x19c2 <HLCD_voidInit+0xe4>
    1a0e:	24 c0       	rjmp	.+72     	; 0x1a58 <HLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	8e 01       	movw	r16, r28
    1a12:	0d 5b       	subi	r16, 0xBD	; 189
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	eb 5b       	subi	r30, 0xBB	; 187
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	80 83       	st	Z, r24
    1a32:	fe 01       	movw	r30, r28
    1a34:	ed 5b       	subi	r30, 0xBD	; 189
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ff 96       	adiw	r30, 0x3f	; 63
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
    1a44:	fe 01       	movw	r30, r28
    1a46:	ff 96       	adiw	r30, 0x3f	; 63
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <HLCD_voidInit+0x16e>
    1a50:	fe 01       	movw	r30, r28
    1a52:	ff 96       	adiw	r30, 0x3f	; 63
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24

	//wait more than 30 msc
	_delay_ms(31);

	//Function set 0b00111100
	HLCD_voidSendCommand(LCD_FUNCTION_SET);
    1a58:	8c e3       	ldi	r24, 0x3C	; 60
    1a5a:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e2       	ldi	r26, 0x20	; 32
    1a64:	b2 e4       	ldi	r27, 0x42	; 66
    1a66:	8b af       	std	Y+59, r24	; 0x3b
    1a68:	9c af       	std	Y+60, r25	; 0x3c
    1a6a:	ad af       	std	Y+61, r26	; 0x3d
    1a6c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a70:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a76:	2b ea       	ldi	r18, 0xAB	; 171
    1a78:	3a ea       	ldi	r19, 0xAA	; 170
    1a7a:	4a e2       	ldi	r20, 0x2A	; 42
    1a7c:	50 e4       	ldi	r21, 0x40	; 64
    1a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8f ab       	std	Y+55, r24	; 0x37
    1a88:	98 af       	std	Y+56, r25	; 0x38
    1a8a:	a9 af       	std	Y+57, r26	; 0x39
    1a8c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a90:	78 ad       	ldd	r23, Y+56	; 0x38
    1a92:	89 ad       	ldd	r24, Y+57	; 0x39
    1a94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	1c f4       	brge	.+6      	; 0x1aac <HLCD_voidInit+0x1ce>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8e ab       	std	Y+54, r24	; 0x36
    1aaa:	91 c0       	rjmp	.+290    	; 0x1bce <HLCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1aac:	6f a9       	ldd	r22, Y+55	; 0x37
    1aae:	78 ad       	ldd	r23, Y+56	; 0x38
    1ab0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ab2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	53 e4       	ldi	r21, 0x43	; 67
    1abc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	0c f0       	brlt	.+2      	; 0x1ac6 <HLCD_voidInit+0x1e8>
    1ac4:	7b c0       	rjmp	.+246    	; 0x1bbc <HLCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ac6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ac8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1acc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a e7       	ldi	r20, 0x7A	; 122
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8a ab       	std	Y+50, r24	; 0x32
    1ae0:	9b ab       	std	Y+51, r25	; 0x33
    1ae2:	ac ab       	std	Y+52, r26	; 0x34
    1ae4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	6a a9       	ldd	r22, Y+50	; 0x32
    1ae8:	7b a9       	ldd	r23, Y+51	; 0x33
    1aea:	8c a9       	ldd	r24, Y+52	; 0x34
    1aec:	9d a9       	ldd	r25, Y+53	; 0x35
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a ef       	ldi	r20, 0xFA	; 250
    1af4:	54 e4       	ldi	r21, 0x44	; 68
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	8e a7       	std	Y+46, r24	; 0x2e
    1b00:	9f a7       	std	Y+47, r25	; 0x2f
    1b02:	a8 ab       	std	Y+48, r26	; 0x30
    1b04:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b06:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b08:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b0a:	88 a9       	ldd	r24, Y+48	; 0x30
    1b0c:	99 a9       	ldd	r25, Y+49	; 0x31
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	2c f4       	brge	.+10     	; 0x1b28 <HLCD_voidInit+0x24a>
		__ticks = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9d a7       	std	Y+45, r25	; 0x2d
    1b24:	8c a7       	std	Y+44, r24	; 0x2c
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <HLCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b28:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b2a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b2c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b2e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b3c:	18 16       	cp	r1, r24
    1b3e:	4c f5       	brge	.+82     	; 0x1b92 <HLCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b40:	6a a9       	ldd	r22, Y+50	; 0x32
    1b42:	7b a9       	ldd	r23, Y+51	; 0x33
    1b44:	8c a9       	ldd	r24, Y+52	; 0x34
    1b46:	9d a9       	ldd	r25, Y+53	; 0x35
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e2       	ldi	r20, 0x20	; 32
    1b4e:	51 e4       	ldi	r21, 0x41	; 65
    1b50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9d a7       	std	Y+45, r25	; 0x2d
    1b66:	8c a7       	std	Y+44, r24	; 0x2c
    1b68:	0f c0       	rjmp	.+30     	; 0x1b88 <HLCD_voidInit+0x2aa>
    1b6a:	88 ec       	ldi	r24, 0xC8	; 200
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9b a7       	std	Y+43, r25	; 0x2b
    1b70:	8a a7       	std	Y+42, r24	; 0x2a
    1b72:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b74:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <HLCD_voidInit+0x298>
    1b7a:	9b a7       	std	Y+43, r25	; 0x2b
    1b7c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b80:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	9d a7       	std	Y+45, r25	; 0x2d
    1b86:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b88:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b8a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	69 f7       	brne	.-38     	; 0x1b6a <HLCD_voidInit+0x28c>
    1b90:	24 c0       	rjmp	.+72     	; 0x1bda <HLCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b92:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b94:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b96:	88 a9       	ldd	r24, Y+48	; 0x30
    1b98:	99 a9       	ldd	r25, Y+49	; 0x31
    1b9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9d a7       	std	Y+45, r25	; 0x2d
    1ba4:	8c a7       	std	Y+44, r24	; 0x2c
    1ba6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ba8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1baa:	99 a7       	std	Y+41, r25	; 0x29
    1bac:	88 a7       	std	Y+40, r24	; 0x28
    1bae:	88 a5       	ldd	r24, Y+40	; 0x28
    1bb0:	99 a5       	ldd	r25, Y+41	; 0x29
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <HLCD_voidInit+0x2d4>
    1bb6:	99 a7       	std	Y+41, r25	; 0x29
    1bb8:	88 a7       	std	Y+40, r24	; 0x28
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <HLCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bbc:	6f a9       	ldd	r22, Y+55	; 0x37
    1bbe:	78 ad       	ldd	r23, Y+56	; 0x38
    1bc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8e ab       	std	Y+54, r24	; 0x36
    1bce:	8e a9       	ldd	r24, Y+54	; 0x36
    1bd0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd2:	8f a1       	ldd	r24, Y+39	; 0x27
    1bd4:	8a 95       	dec	r24
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <HLCD_voidInit+0x2f6>
    1bd8:	8f a3       	std	Y+39, r24	; 0x27

	//wait more than 39 us
	_delay_us(40);

	//Display ON/OFF Control 0b00001100 with no shown cursor and no blinking
	HLCD_voidSendCommand(DISPLAY_ON_OR_OFF_CONTROL);
    1bda:	8c e0       	ldi	r24, 0x0C	; 12
    1bdc:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e2       	ldi	r26, 0x20	; 32
    1be6:	b2 e4       	ldi	r27, 0x42	; 66
    1be8:	8b a3       	std	Y+35, r24	; 0x23
    1bea:	9c a3       	std	Y+36, r25	; 0x24
    1bec:	ad a3       	std	Y+37, r26	; 0x25
    1bee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf8:	2b ea       	ldi	r18, 0xAB	; 171
    1bfa:	3a ea       	ldi	r19, 0xAA	; 170
    1bfc:	4a e2       	ldi	r20, 0x2A	; 42
    1bfe:	50 e4       	ldi	r21, 0x40	; 64
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8f 8f       	std	Y+31, r24	; 0x1f
    1c0a:	98 a3       	std	Y+32, r25	; 0x20
    1c0c:	a9 a3       	std	Y+33, r26	; 0x21
    1c0e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c12:	78 a1       	ldd	r23, Y+32	; 0x20
    1c14:	89 a1       	ldd	r24, Y+33	; 0x21
    1c16:	9a a1       	ldd	r25, Y+34	; 0x22
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	1c f4       	brge	.+6      	; 0x1c2e <HLCD_voidInit+0x350>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c2c:	91 c0       	rjmp	.+290    	; 0x1d50 <HLCD_voidInit+0x472>
	else if (__tmp > 255)
    1c2e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c30:	78 a1       	ldd	r23, Y+32	; 0x20
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	9a a1       	ldd	r25, Y+34	; 0x22
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	53 e4       	ldi	r21, 0x43	; 67
    1c3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <HLCD_voidInit+0x36a>
    1c46:	7b c0       	rjmp	.+246    	; 0x1d3e <HLCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8a 8f       	std	Y+26, r24	; 0x1a
    1c62:	9b 8f       	std	Y+27, r25	; 0x1b
    1c64:	ac 8f       	std	Y+28, r26	; 0x1c
    1c66:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c6a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a ef       	ldi	r20, 0xFA	; 250
    1c76:	54 e4       	ldi	r21, 0x44	; 68
    1c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8e 8b       	std	Y+22, r24	; 0x16
    1c82:	9f 8b       	std	Y+23, r25	; 0x17
    1c84:	a8 8f       	std	Y+24, r26	; 0x18
    1c86:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c88:	6e 89       	ldd	r22, Y+22	; 0x16
    1c8a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c8c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c8e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <HLCD_voidInit+0x3cc>
		__ticks = 1;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9d 8b       	std	Y+21, r25	; 0x15
    1ca6:	8c 8b       	std	Y+20, r24	; 0x14
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <HLCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1caa:	6e 89       	ldd	r22, Y+22	; 0x16
    1cac:	7f 89       	ldd	r23, Y+23	; 0x17
    1cae:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	4c f5       	brge	.+82     	; 0x1d14 <HLCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cc4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e2       	ldi	r20, 0x20	; 32
    1cd0:	51 e4       	ldi	r21, 0x41	; 65
    1cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9d 8b       	std	Y+21, r25	; 0x15
    1ce8:	8c 8b       	std	Y+20, r24	; 0x14
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <HLCD_voidInit+0x42c>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9b 8b       	std	Y+19, r25	; 0x13
    1cf2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cf6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <HLCD_voidInit+0x41a>
    1cfc:	9b 8b       	std	Y+19, r25	; 0x13
    1cfe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d00:	8c 89       	ldd	r24, Y+20	; 0x14
    1d02:	9d 89       	ldd	r25, Y+21	; 0x15
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9d 8b       	std	Y+21, r25	; 0x15
    1d08:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d0c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	69 f7       	brne	.-38     	; 0x1cec <HLCD_voidInit+0x40e>
    1d12:	24 c0       	rjmp	.+72     	; 0x1d5c <HLCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	6e 89       	ldd	r22, Y+22	; 0x16
    1d16:	7f 89       	ldd	r23, Y+23	; 0x17
    1d18:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9d 8b       	std	Y+21, r25	; 0x15
    1d26:	8c 8b       	std	Y+20, r24	; 0x14
    1d28:	8c 89       	ldd	r24, Y+20	; 0x14
    1d2a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d2c:	99 8b       	std	Y+17, r25	; 0x11
    1d2e:	88 8b       	std	Y+16, r24	; 0x10
    1d30:	88 89       	ldd	r24, Y+16	; 0x10
    1d32:	99 89       	ldd	r25, Y+17	; 0x11
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidInit+0x456>
    1d38:	99 8b       	std	Y+17, r25	; 0x11
    1d3a:	88 8b       	std	Y+16, r24	; 0x10
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <HLCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d3e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d40:	78 a1       	ldd	r23, Y+32	; 0x20
    1d42:	89 a1       	ldd	r24, Y+33	; 0x21
    1d44:	9a a1       	ldd	r25, Y+34	; 0x22
    1d46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d52:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	8a 95       	dec	r24
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <HLCD_voidInit+0x478>
    1d5a:	8f 87       	std	Y+15, r24	; 0x0f

	//wait more than 39 us
		_delay_us(40);

	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e0       	ldi	r26, 0x00	; 0
    1d68:	b0 e4       	ldi	r27, 0x40	; 64
    1d6a:	8b 87       	std	Y+11, r24	; 0x0b
    1d6c:	9c 87       	std	Y+12, r25	; 0x0c
    1d6e:	ad 87       	std	Y+13, r26	; 0x0d
    1d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8f 83       	std	Y+7, r24	; 0x07
    1d8c:	98 87       	std	Y+8, r25	; 0x08
    1d8e:	a9 87       	std	Y+9, r26	; 0x09
    1d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <HLCD_voidInit+0x4d6>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <HLCD_voidInit+0x554>
	else if (__tmp > 65535)
    1db4:	6f 81       	ldd	r22, Y+7	; 0x07
    1db6:	78 85       	ldd	r23, Y+8	; 0x08
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <HLCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <HLCD_voidInit+0x536>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9c 83       	std	Y+4, r25	; 0x04
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <HLCD_voidInit+0x524>
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <HLCD_voidInit+0x518>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <HLCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <HLCD_voidInit+0x560>
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
	//wait more than 1.53ms
	_delay_ms(2);


	//Entry Mode Set 0b00000110 with no shift and writing from left to right
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1e46:	86 e0       	ldi	r24, 0x06	; 6
    1e48:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
}
    1e4c:	c4 5b       	subi	r28, 0xB4	; 180
    1e4e:	df 4f       	sbci	r29, 0xFF	; 255
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	08 95       	ret

00001e64 <HLCD_voidClearDisplay>:




void HLCD_voidClearDisplay(void)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61


	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 e0       	ldi	r26, 0x00	; 0
    1e84:	b0 e4       	ldi	r27, 0x40	; 64
    1e86:	8b 87       	std	Y+11, r24	; 0x0b
    1e88:	9c 87       	std	Y+12, r25	; 0x0c
    1e8a:	ad 87       	std	Y+13, r26	; 0x0d
    1e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a ef       	ldi	r20, 0xFA	; 250
    1e9c:	54 e4       	ldi	r21, 0x44	; 68
    1e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8f 83       	std	Y+7, r24	; 0x07
    1ea8:	98 87       	std	Y+8, r25	; 0x08
    1eaa:	a9 87       	std	Y+9, r26	; 0x09
    1eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <HLCD_voidClearDisplay+0xcc>
    1f12:	88 ec       	ldi	r24, 0xC8	; 200
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <HLCD_voidClearDisplay+0xba>
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <HLCD_voidClearDisplay+0xae>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <HLCD_voidClearDisplay+0xf6>
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01

	//wait more than 1.53ms
	_delay_ms(2);


}
    1f62:	2e 96       	adiw	r28, 0x0e	; 14
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *A_PtrtoString)

{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <HLCD_voidSendString+0x6>
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	0a c0       	rjmp	.+20     	; 0x1f98 <HLCD_voidSendString+0x24>
	while(*A_PtrtoString!='\0')
	//or the lab eng. condition since the decimal of '\0\ is 0: while(*A_PtrtoString>0)
	//or while(*A_PtrtoString!=0)
	{

		HLCD_voidSendData(*A_PtrtoString);
    1f84:	e9 81       	ldd	r30, Y+1	; 0x01
    1f86:	fa 81       	ldd	r31, Y+2	; 0x02
    1f88:	80 81       	ld	r24, Z
    1f8a:	0e 94 5f 0b 	call	0x16be	; 0x16be <HLCD_voidSendData>
		A_PtrtoString++;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidSendString(u8 *A_PtrtoString)

{

	while(*A_PtrtoString!='\0')
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	89 f7       	brne	.-30     	; 0x1f84 <HLCD_voidSendString+0x10>



	}

}
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <HLCD_voidGoToPosition>:




void HLCD_voidGoToPosition(u8 A_u8RowNumber,u8 A_u8ColumnNumber)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	6c 97       	sbiw	r28, 0x1c	; 28
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	89 8f       	std	Y+25, r24	; 0x19
    1fc2:	6a 8f       	std	Y+26, r22	; 0x1a
	//Here I have assumed that the index of the first row & first column both will be 0
	switch(A_u8RowNumber)
    1fc4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	3c 8f       	std	Y+28, r19	; 0x1c
    1fcc:	2b 8f       	std	Y+27, r18	; 0x1b
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	31 f0       	breq	.+12     	; 0x1fe2 <HLCD_voidGoToPosition+0x36>
    1fd6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1fd8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1fda:	21 30       	cpi	r18, 0x01	; 1
    1fdc:	31 05       	cpc	r19, r1
    1fde:	31 f0       	breq	.+12     	; 0x1fec <HLCD_voidGoToPosition+0x40>
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <HLCD_voidGoToPosition+0x48>
	{

	case ROW1: HLCD_voidSendCommand(ROW1_ADDRESS_START+A_u8ColumnNumber);  break;
    1fe2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe4:	80 58       	subi	r24, 0x80	; 128
    1fe6:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <HLCD_voidGoToPosition+0x48>
	case ROW2: HLCD_voidSendCommand(ROW2_ADDRESS_START+A_u8ColumnNumber);  break;
    1fec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fee:	80 54       	subi	r24, 0x40	; 64
    1ff0:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a0 e2       	ldi	r26, 0x20	; 32
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	8d 8b       	std	Y+21, r24	; 0x15
    1ffe:	9e 8b       	std	Y+22, r25	; 0x16
    2000:	af 8b       	std	Y+23, r26	; 0x17
    2002:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	2b ea       	ldi	r18, 0xAB	; 171
    200e:	3a ea       	ldi	r19, 0xAA	; 170
    2010:	4a e2       	ldi	r20, 0x2A	; 42
    2012:	50 e4       	ldi	r21, 0x40	; 64
    2014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 8b       	std	Y+17, r24	; 0x11
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	ab 8b       	std	Y+19, r26	; 0x13
    2022:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2024:	69 89       	ldd	r22, Y+17	; 0x11
    2026:	7a 89       	ldd	r23, Y+18	; 0x12
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	1c f4       	brge	.+6      	; 0x2042 <HLCD_voidGoToPosition+0x96>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	88 8b       	std	Y+16, r24	; 0x10
    2040:	91 c0       	rjmp	.+290    	; 0x2164 <HLCD_voidGoToPosition+0x1b8>
	else if (__tmp > 255)
    2042:	69 89       	ldd	r22, Y+17	; 0x11
    2044:	7a 89       	ldd	r23, Y+18	; 0x12
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	0c f0       	brlt	.+2      	; 0x205c <HLCD_voidGoToPosition+0xb0>
    205a:	7b c0       	rjmp	.+246    	; 0x2152 <HLCD_voidGoToPosition+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a e7       	ldi	r20, 0x7A	; 122
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	8c 87       	std	Y+12, r24	; 0x0c
    2076:	9d 87       	std	Y+13, r25	; 0x0d
    2078:	ae 87       	std	Y+14, r26	; 0x0e
    207a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6c 85       	ldd	r22, Y+12	; 0x0c
    207e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    2082:	9f 85       	ldd	r25, Y+15	; 0x0f
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	88 87       	std	Y+8, r24	; 0x08
    2096:	99 87       	std	Y+9, r25	; 0x09
    2098:	aa 87       	std	Y+10, r26	; 0x0a
    209a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    209c:	68 85       	ldd	r22, Y+8	; 0x08
    209e:	79 85       	ldd	r23, Y+9	; 0x09
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <HLCD_voidGoToPosition+0x112>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9f 83       	std	Y+7, r25	; 0x07
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <HLCD_voidGoToPosition+0x190>
	else if (__tmp > 65535)
    20be:	68 85       	ldd	r22, Y+8	; 0x08
    20c0:	79 85       	ldd	r23, Y+9	; 0x09
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <HLCD_voidGoToPosition+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20da:	8e 85       	ldd	r24, Y+14	; 0x0e
    20dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9f 83       	std	Y+7, r25	; 0x07
    20fc:	8e 83       	std	Y+6, r24	; 0x06
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <HLCD_voidGoToPosition+0x172>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9d 83       	std	Y+5, r25	; 0x05
    2106:	8c 83       	std	Y+4, r24	; 0x04
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <HLCD_voidGoToPosition+0x160>
    2110:	9d 83       	std	Y+5, r25	; 0x05
    2112:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8e 81       	ldd	r24, Y+6	; 0x06
    2116:	9f 81       	ldd	r25, Y+7	; 0x07
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9f 83       	std	Y+7, r25	; 0x07
    211c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <HLCD_voidGoToPosition+0x154>
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <HLCD_voidGoToPosition+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	68 85       	ldd	r22, Y+8	; 0x08
    212a:	79 85       	ldd	r23, Y+9	; 0x09
    212c:	8a 85       	ldd	r24, Y+10	; 0x0a
    212e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9f 83       	std	Y+7, r25	; 0x07
    213a:	8e 83       	std	Y+6, r24	; 0x06
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <HLCD_voidGoToPosition+0x19c>
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <HLCD_voidGoToPosition+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2152:	69 89       	ldd	r22, Y+17	; 0x11
    2154:	7a 89       	ldd	r23, Y+18	; 0x12
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	88 8b       	std	Y+16, r24	; 0x10
    2164:	88 89       	ldd	r24, Y+16	; 0x10
    2166:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8a 95       	dec	r24
    216c:	f1 f7       	brne	.-4      	; 0x216a <HLCD_voidGoToPosition+0x1be>
    216e:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 39 usec
	_delay_us(40);


}
    2170:	6c 96       	adiw	r28, 0x1c	; 28
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <HLCD_voidDisplayNumber>:


void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	28 97       	sbiw	r28, 0x08	; 8
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	6d 83       	std	Y+5, r22	; 0x05
    21a0:	7e 83       	std	Y+6, r23	; 0x06
    21a2:	8f 83       	std	Y+7, r24	; 0x07
    21a4:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32Number=1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e0       	ldi	r26, 0x00	; 0
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	ab 83       	std	Y+3, r26	; 0x03
    21b4:	bc 83       	std	Y+4, r27	; 0x04

	if (A_s32Number==0)
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	af 81       	ldd	r26, Y+7	; 0x07
    21bc:	b8 85       	ldd	r27, Y+8	; 0x08
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	a1 05       	cpc	r26, r1
    21c2:	b1 05       	cpc	r27, r1
    21c4:	21 f4       	brne	.+8      	; 0x21ce <HLCD_voidDisplayNumber+0x4c>
	{
		HLCD_voidSendData('0');
    21c6:	80 e3       	ldi	r24, 0x30	; 48
    21c8:	0e 94 5f 0b 	call	0x16be	; 0x16be <HLCD_voidSendData>
    21cc:	50 c0       	rjmp	.+160    	; 0x226e <HLCD_voidDisplayNumber+0xec>
	}
	else if (A_s32Number<0)
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	af 81       	ldd	r26, Y+7	; 0x07
    21d4:	b8 85       	ldd	r27, Y+8	; 0x08
    21d6:	bb 23       	and	r27, r27
    21d8:	0c f0       	brlt	.+2      	; 0x21dc <HLCD_voidDisplayNumber+0x5a>
    21da:	49 c0       	rjmp	.+146    	; 0x226e <HLCD_voidDisplayNumber+0xec>
	{
		HLCD_voidSendData('-');
    21dc:	8d e2       	ldi	r24, 0x2D	; 45
    21de:	0e 94 5f 0b 	call	0x16be	; 0x16be <HLCD_voidSendData>
		A_s32Number=A_s32Number*-1;
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	af 81       	ldd	r26, Y+7	; 0x07
    21e8:	b8 85       	ldd	r27, Y+8	; 0x08
    21ea:	b0 95       	com	r27
    21ec:	a0 95       	com	r26
    21ee:	90 95       	com	r25
    21f0:	81 95       	neg	r24
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	af 4f       	sbci	r26, 0xFF	; 255
    21f6:	bf 4f       	sbci	r27, 0xFF	; 255
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	af 83       	std	Y+7, r26	; 0x07
    21fe:	b8 87       	std	Y+8, r27	; 0x08
    2200:	36 c0       	rjmp	.+108    	; 0x226e <HLCD_voidDisplayNumber+0xec>
	}

	while(A_s32Number!=0)
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	ab 81       	ldd	r26, Y+3	; 0x03
    2208:	bc 81       	ldd	r27, Y+4	; 0x04
    220a:	2a e0       	ldi	r18, 0x0A	; 10
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 0d 13 	call	0x261a	; 0x261a <__mulsi3>
    221a:	7b 01       	movw	r14, r22
    221c:	8c 01       	movw	r16, r24
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	af 81       	ldd	r26, Y+7	; 0x07
    2224:	b8 85       	ldd	r27, Y+8	; 0x08
    2226:	2a e0       	ldi	r18, 0x0A	; 10
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 4e 13 	call	0x269c	; 0x269c <__divmodsi4>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8e 0d       	add	r24, r14
    223c:	9f 1d       	adc	r25, r15
    223e:	a0 1f       	adc	r26, r16
    2240:	b1 1f       	adc	r27, r17
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	ab 83       	std	Y+3, r26	; 0x03
    2248:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number/=10;
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	af 81       	ldd	r26, Y+7	; 0x07
    2250:	b8 85       	ldd	r27, Y+8	; 0x08
    2252:	2a e0       	ldi	r18, 0x0A	; 10
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 4e 13 	call	0x269c	; 0x269c <__divmodsi4>
    2262:	da 01       	movw	r26, r20
    2264:	c9 01       	movw	r24, r18
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	af 83       	std	Y+7, r26	; 0x07
    226c:	b8 87       	std	Y+8, r27	; 0x08
	{
		HLCD_voidSendData('-');
		A_s32Number=A_s32Number*-1;
	}

	while(A_s32Number!=0)
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	af 81       	ldd	r26, Y+7	; 0x07
    2274:	b8 85       	ldd	r27, Y+8	; 0x08
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	a1 05       	cpc	r26, r1
    227a:	b1 05       	cpc	r27, r1
    227c:	11 f6       	brne	.-124    	; 0x2202 <HLCD_voidDisplayNumber+0x80>
    227e:	23 c0       	rjmp	.+70     	; 0x22c6 <HLCD_voidDisplayNumber+0x144>
	}

	while(L_u32Number!=1)
	{
		//we added 48 as '0' has ascii of 48
		HLCD_voidSendData(L_u32Number%10+48);
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	ab 81       	ldd	r26, Y+3	; 0x03
    2286:	bc 81       	ldd	r27, Y+4	; 0x04
    2288:	2a e0       	ldi	r18, 0x0A	; 10
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 2c 13 	call	0x2658	; 0x2658 <__udivmodsi4>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	80 5d       	subi	r24, 0xD0	; 208
    229e:	0e 94 5f 0b 	call	0x16be	; 0x16be <HLCD_voidSendData>
		L_u32Number/=10;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	9a 81       	ldd	r25, Y+2	; 0x02
    22a6:	ab 81       	ldd	r26, Y+3	; 0x03
    22a8:	bc 81       	ldd	r27, Y+4	; 0x04
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__udivmodsi4>
    22ba:	da 01       	movw	r26, r20
    22bc:	c9 01       	movw	r24, r18
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	ab 83       	std	Y+3, r26	; 0x03
    22c4:	bc 83       	std	Y+4, r27	; 0x04
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
		A_s32Number/=10;
	}

	while(L_u32Number!=1)
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	ab 81       	ldd	r26, Y+3	; 0x03
    22cc:	bc 81       	ldd	r27, Y+4	; 0x04
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	91 05       	cpc	r25, r1
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	a1 f6       	brne	.-88     	; 0x2280 <HLCD_voidDisplayNumber+0xfe>
		HLCD_voidSendData(L_u32Number%10+48);
		L_u32Number/=10;
	}


}
    22d8:	28 96       	adiw	r28, 0x08	; 8
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <HLCD_voidWriteOnCGRAM>:




void HLCD_voidWriteOnCGRAM(u8 A_u8PatternIndex,u8 *A_u8PtrToPatternValue)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <HLCD_voidWriteOnCGRAM+0x6>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <HLCD_voidWriteOnCGRAM+0x8>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <HLCD_voidWriteOnCGRAM+0xa>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	7c 83       	std	Y+4, r23	; 0x04
    2304:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;

	/* 1- Set AC to CGRAM  */
	switch(A_u8PatternIndex)
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	3e 83       	std	Y+6, r19	; 0x06
    230e:	2d 83       	std	Y+5, r18	; 0x05
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	83 30       	cpi	r24, 0x03	; 3
    2316:	91 05       	cpc	r25, r1
    2318:	a9 f1       	breq	.+106    	; 0x2384 <HLCD_voidWriteOnCGRAM+0x92>
    231a:	2d 81       	ldd	r18, Y+5	; 0x05
    231c:	3e 81       	ldd	r19, Y+6	; 0x06
    231e:	24 30       	cpi	r18, 0x04	; 4
    2320:	31 05       	cpc	r19, r1
    2322:	7c f4       	brge	.+30     	; 0x2342 <HLCD_voidWriteOnCGRAM+0x50>
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	91 05       	cpc	r25, r1
    232c:	19 f1       	breq	.+70     	; 0x2374 <HLCD_voidWriteOnCGRAM+0x82>
    232e:	2d 81       	ldd	r18, Y+5	; 0x05
    2330:	3e 81       	ldd	r19, Y+6	; 0x06
    2332:	22 30       	cpi	r18, 0x02	; 2
    2334:	31 05       	cpc	r19, r1
    2336:	14 f5       	brge	.+68     	; 0x237c <HLCD_voidWriteOnCGRAM+0x8a>
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	b1 f0       	breq	.+44     	; 0x236c <HLCD_voidWriteOnCGRAM+0x7a>
    2340:	34 c0       	rjmp	.+104    	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
    2342:	2d 81       	ldd	r18, Y+5	; 0x05
    2344:	3e 81       	ldd	r19, Y+6	; 0x06
    2346:	25 30       	cpi	r18, 0x05	; 5
    2348:	31 05       	cpc	r19, r1
    234a:	21 f1       	breq	.+72     	; 0x2394 <HLCD_voidWriteOnCGRAM+0xa2>
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	85 30       	cpi	r24, 0x05	; 5
    2352:	91 05       	cpc	r25, r1
    2354:	dc f0       	brlt	.+54     	; 0x238c <HLCD_voidWriteOnCGRAM+0x9a>
    2356:	2d 81       	ldd	r18, Y+5	; 0x05
    2358:	3e 81       	ldd	r19, Y+6	; 0x06
    235a:	26 30       	cpi	r18, 0x06	; 6
    235c:	31 05       	cpc	r19, r1
    235e:	f1 f0       	breq	.+60     	; 0x239c <HLCD_voidWriteOnCGRAM+0xaa>
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	87 30       	cpi	r24, 0x07	; 7
    2366:	91 05       	cpc	r25, r1
    2368:	e9 f0       	breq	.+58     	; 0x23a4 <HLCD_voidWriteOnCGRAM+0xb2>
    236a:	1f c0       	rjmp	.+62     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	{

	case 0: HLCD_voidSendCommand(PATTERN1_BASE_ADDRESS); break;
    236c:	80 e4       	ldi	r24, 0x40	; 64
    236e:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    2372:	1b c0       	rjmp	.+54     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 1: HLCD_voidSendCommand(PATTERN2_BASE_ADDRESS); break;
    2374:	88 e4       	ldi	r24, 0x48	; 72
    2376:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    237a:	17 c0       	rjmp	.+46     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 2: HLCD_voidSendCommand(PATTERN3_BASE_ADDRESS); break;
    237c:	80 e5       	ldi	r24, 0x50	; 80
    237e:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    2382:	13 c0       	rjmp	.+38     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 3: HLCD_voidSendCommand(PATTERN4_BASE_ADDRESS); break;
    2384:	88 e5       	ldi	r24, 0x58	; 88
    2386:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 4: HLCD_voidSendCommand(PATTERN5_BASE_ADDRESS); break;
    238c:	80 e6       	ldi	r24, 0x60	; 96
    238e:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 5: HLCD_voidSendCommand(PATTERN6_BASE_ADDRESS); break;
    2394:	88 e6       	ldi	r24, 0x68	; 104
    2396:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    239a:	07 c0       	rjmp	.+14     	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 6: HLCD_voidSendCommand(PATTERN7_BASE_ADDRESS); break;
    239c:	80 e7       	ldi	r24, 0x70	; 112
    239e:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
    23a2:	03 c0       	rjmp	.+6      	; 0x23aa <HLCD_voidWriteOnCGRAM+0xb8>
	case 7: HLCD_voidSendCommand(PATTERN8_BASE_ADDRESS); break;
    23a4:	88 e7       	ldi	r24, 0x78	; 120
    23a6:	0e 94 4f 0a 	call	0x149e	; 0x149e <HLCD_voidSendCommand>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    23aa:	19 82       	std	Y+1, r1	; 0x01
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <HLCD_voidWriteOnCGRAM+0xd8>
	{
		HLCD_voidSendData(A_u8PtrToPatternValue[L_u8LoopIterator]);
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	fc 01       	movw	r30, r24
    23ba:	e2 0f       	add	r30, r18
    23bc:	f3 1f       	adc	r31, r19
    23be:	80 81       	ld	r24, Z
    23c0:	0e 94 5f 0b 	call	0x16be	; 0x16be <HLCD_voidSendData>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	8f 5f       	subi	r24, 0xFF	; 255
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	88 30       	cpi	r24, 0x08	; 8
    23ce:	78 f3       	brcs	.-34     	; 0x23ae <HLCD_voidWriteOnCGRAM+0xbc>

	}



}
    23d0:	26 96       	adiw	r28, 0x06	; 6
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <main>:
#include "util/delay.h"


//Project Show ADC no of steps on a LCD screen
int main (void)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	6e 97       	sbiw	r28, 0x1e	; 30
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
	// Control Pins for LCD
	MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN0,OUTPUT);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN1,OUTPUT);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN2,OUTPUT);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	62 e0       	ldi	r22, 0x02	; 2
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>

	//Data pins for LCD
	MDIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	6f ef       	ldi	r22, 0xFF	; 255
    2418:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_voidSetPortDirection>

	MADC_voidInit();
    241c:	0e 94 47 06 	call	0xc8e	; 0xc8e <MADC_voidInit>
	HLCD_voidInit();
    2420:	0e 94 6f 0c 	call	0x18de	; 0x18de <HLCD_voidInit>


	HLCD_voidSendString("Hi There!");
    2424:	80 e6       	ldi	r24, 0x60	; 96
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <HLCD_voidSendString>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	aa e7       	ldi	r26, 0x7A	; 122
    2432:	b4 e4       	ldi	r27, 0x44	; 68
    2434:	89 8f       	std	Y+25, r24	; 0x19
    2436:	9a 8f       	std	Y+26, r25	; 0x1a
    2438:	ab 8f       	std	Y+27, r26	; 0x1b
    243a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	69 8d       	ldd	r22, Y+25	; 0x19
    243e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a ef       	ldi	r20, 0xFA	; 250
    244a:	54 e4       	ldi	r21, 0x44	; 68
    244c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8d 8b       	std	Y+21, r24	; 0x15
    2456:	9e 8b       	std	Y+22, r25	; 0x16
    2458:	af 8b       	std	Y+23, r26	; 0x17
    245a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245c:	6d 89       	ldd	r22, Y+21	; 0x15
    245e:	7e 89       	ldd	r23, Y+22	; 0x16
    2460:	8f 89       	ldd	r24, Y+23	; 0x17
    2462:	98 8d       	ldd	r25, Y+24	; 0x18
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <main+0x9c>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9c 8b       	std	Y+20, r25	; 0x14
    247a:	8b 8b       	std	Y+19, r24	; 0x13
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <main+0x11a>
	else if (__tmp > 65535)
    247e:	6d 89       	ldd	r22, Y+21	; 0x15
    2480:	7e 89       	ldd	r23, Y+22	; 0x16
    2482:	8f 89       	ldd	r24, Y+23	; 0x17
    2484:	98 8d       	ldd	r25, Y+24	; 0x18
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	69 8d       	ldd	r22, Y+25	; 0x19
    2498:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	9c 8b       	std	Y+20, r25	; 0x14
    24bc:	8b 8b       	std	Y+19, r24	; 0x13
    24be:	0f c0       	rjmp	.+30     	; 0x24de <main+0xfc>
    24c0:	88 ec       	ldi	r24, 0xC8	; 200
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9a 8b       	std	Y+18, r25	; 0x12
    24c6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	9a 89       	ldd	r25, Y+18	; 0x12
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <main+0xea>
    24d0:	9a 8b       	std	Y+18, r25	; 0x12
    24d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <main+0xde>
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	9c 8b       	std	Y+20, r25	; 0x14
    24fa:	8b 8b       	std	Y+19, r24	; 0x13
    24fc:	8b 89       	ldd	r24, Y+19	; 0x13
    24fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2500:	98 8b       	std	Y+16, r25	; 0x10
    2502:	8f 87       	std	Y+15, r24	; 0x0f
    2504:	8f 85       	ldd	r24, Y+15	; 0x0f
    2506:	98 89       	ldd	r25, Y+16	; 0x10
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <main+0x126>
    250c:	98 8b       	std	Y+16, r25	; 0x10
    250e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);


	u16 L_u16ADCDigitalValue=0;
    2510:	1e 8e       	std	Y+30, r1	; 0x1e
    2512:	1d 8e       	std	Y+29, r1	; 0x1d


	while(1)
	{
		//assign value of ADC reading to a var. to be used
		L_u16ADCDigitalValue=MADC_u16AnalogRead(CHANNEL_0);
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 80 06 	call	0xd00	; 0xd00 <MADC_u16AnalogRead>
    251a:	9e 8f       	std	Y+30, r25	; 0x1e
    251c:	8d 8f       	std	Y+29, r24	; 0x1d

		//Clr screen
		HLCD_voidClearDisplay();
    251e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <HLCD_voidClearDisplay>

		//print ADC value
		HLCD_voidDisplayNumber(L_u16ADCDigitalValue);
    2522:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2524:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2526:	cc 01       	movw	r24, r24
    2528:	a0 e0       	ldi	r26, 0x00	; 0
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 c1 10 	call	0x2182	; 0x2182 <HLCD_voidDisplayNumber>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	aa e7       	ldi	r26, 0x7A	; 122
    253a:	b3 e4       	ldi	r27, 0x43	; 67
    253c:	8b 87       	std	Y+11, r24	; 0x0b
    253e:	9c 87       	std	Y+12, r25	; 0x0c
    2540:	ad 87       	std	Y+13, r26	; 0x0d
    2542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	4a ef       	ldi	r20, 0xFA	; 250
    2552:	54 e4       	ldi	r21, 0x44	; 68
    2554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	8f 83       	std	Y+7, r24	; 0x07
    255e:	98 87       	std	Y+8, r25	; 0x08
    2560:	a9 87       	std	Y+9, r26	; 0x09
    2562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	2c f4       	brge	.+10     	; 0x2586 <main+0x1a4>
		__ticks = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	3f c0       	rjmp	.+126    	; 0x2604 <main+0x222>
	else if (__tmp > 65535)
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	4c f5       	brge	.+82     	; 0x25f0 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	0f c0       	rjmp	.+30     	; 0x25e6 <main+0x204>
    25c8:	88 ec       	ldi	r24, 0xC8	; 200
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <main+0x1f2>
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
    25e8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	69 f7       	brne	.-38     	; 0x25c8 <main+0x1e6>
    25ee:	92 cf       	rjmp	.-220    	; 0x2514 <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f0:	6f 81       	ldd	r22, Y+7	; 0x07
    25f2:	78 85       	ldd	r23, Y+8	; 0x08
    25f4:	89 85       	ldd	r24, Y+9	; 0x09
    25f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <main+0x22e>
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	7d cf       	rjmp	.-262    	; 0x2514 <main+0x132>

0000261a <__mulsi3>:
    261a:	62 9f       	mul	r22, r18
    261c:	d0 01       	movw	r26, r0
    261e:	73 9f       	mul	r23, r19
    2620:	f0 01       	movw	r30, r0
    2622:	82 9f       	mul	r24, r18
    2624:	e0 0d       	add	r30, r0
    2626:	f1 1d       	adc	r31, r1
    2628:	64 9f       	mul	r22, r20
    262a:	e0 0d       	add	r30, r0
    262c:	f1 1d       	adc	r31, r1
    262e:	92 9f       	mul	r25, r18
    2630:	f0 0d       	add	r31, r0
    2632:	83 9f       	mul	r24, r19
    2634:	f0 0d       	add	r31, r0
    2636:	74 9f       	mul	r23, r20
    2638:	f0 0d       	add	r31, r0
    263a:	65 9f       	mul	r22, r21
    263c:	f0 0d       	add	r31, r0
    263e:	99 27       	eor	r25, r25
    2640:	72 9f       	mul	r23, r18
    2642:	b0 0d       	add	r27, r0
    2644:	e1 1d       	adc	r30, r1
    2646:	f9 1f       	adc	r31, r25
    2648:	63 9f       	mul	r22, r19
    264a:	b0 0d       	add	r27, r0
    264c:	e1 1d       	adc	r30, r1
    264e:	f9 1f       	adc	r31, r25
    2650:	bd 01       	movw	r22, r26
    2652:	cf 01       	movw	r24, r30
    2654:	11 24       	eor	r1, r1
    2656:	08 95       	ret

00002658 <__udivmodsi4>:
    2658:	a1 e2       	ldi	r26, 0x21	; 33
    265a:	1a 2e       	mov	r1, r26
    265c:	aa 1b       	sub	r26, r26
    265e:	bb 1b       	sub	r27, r27
    2660:	fd 01       	movw	r30, r26
    2662:	0d c0       	rjmp	.+26     	; 0x267e <__udivmodsi4_ep>

00002664 <__udivmodsi4_loop>:
    2664:	aa 1f       	adc	r26, r26
    2666:	bb 1f       	adc	r27, r27
    2668:	ee 1f       	adc	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	a2 17       	cp	r26, r18
    266e:	b3 07       	cpc	r27, r19
    2670:	e4 07       	cpc	r30, r20
    2672:	f5 07       	cpc	r31, r21
    2674:	20 f0       	brcs	.+8      	; 0x267e <__udivmodsi4_ep>
    2676:	a2 1b       	sub	r26, r18
    2678:	b3 0b       	sbc	r27, r19
    267a:	e4 0b       	sbc	r30, r20
    267c:	f5 0b       	sbc	r31, r21

0000267e <__udivmodsi4_ep>:
    267e:	66 1f       	adc	r22, r22
    2680:	77 1f       	adc	r23, r23
    2682:	88 1f       	adc	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	1a 94       	dec	r1
    2688:	69 f7       	brne	.-38     	; 0x2664 <__udivmodsi4_loop>
    268a:	60 95       	com	r22
    268c:	70 95       	com	r23
    268e:	80 95       	com	r24
    2690:	90 95       	com	r25
    2692:	9b 01       	movw	r18, r22
    2694:	ac 01       	movw	r20, r24
    2696:	bd 01       	movw	r22, r26
    2698:	cf 01       	movw	r24, r30
    269a:	08 95       	ret

0000269c <__divmodsi4>:
    269c:	97 fb       	bst	r25, 7
    269e:	09 2e       	mov	r0, r25
    26a0:	05 26       	eor	r0, r21
    26a2:	0e d0       	rcall	.+28     	; 0x26c0 <__divmodsi4_neg1>
    26a4:	57 fd       	sbrc	r21, 7
    26a6:	04 d0       	rcall	.+8      	; 0x26b0 <__divmodsi4_neg2>
    26a8:	d7 df       	rcall	.-82     	; 0x2658 <__udivmodsi4>
    26aa:	0a d0       	rcall	.+20     	; 0x26c0 <__divmodsi4_neg1>
    26ac:	00 1c       	adc	r0, r0
    26ae:	38 f4       	brcc	.+14     	; 0x26be <__divmodsi4_exit>

000026b0 <__divmodsi4_neg2>:
    26b0:	50 95       	com	r21
    26b2:	40 95       	com	r20
    26b4:	30 95       	com	r19
    26b6:	21 95       	neg	r18
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	4f 4f       	sbci	r20, 0xFF	; 255
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255

000026be <__divmodsi4_exit>:
    26be:	08 95       	ret

000026c0 <__divmodsi4_neg1>:
    26c0:	f6 f7       	brtc	.-4      	; 0x26be <__divmodsi4_exit>
    26c2:	90 95       	com	r25
    26c4:	80 95       	com	r24
    26c6:	70 95       	com	r23
    26c8:	61 95       	neg	r22
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	08 95       	ret

000026d2 <__prologue_saves__>:
    26d2:	2f 92       	push	r2
    26d4:	3f 92       	push	r3
    26d6:	4f 92       	push	r4
    26d8:	5f 92       	push	r5
    26da:	6f 92       	push	r6
    26dc:	7f 92       	push	r7
    26de:	8f 92       	push	r8
    26e0:	9f 92       	push	r9
    26e2:	af 92       	push	r10
    26e4:	bf 92       	push	r11
    26e6:	cf 92       	push	r12
    26e8:	df 92       	push	r13
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	ca 1b       	sub	r28, r26
    26fc:	db 0b       	sbc	r29, r27
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	09 94       	ijmp

0000270a <__epilogue_restores__>:
    270a:	2a 88       	ldd	r2, Y+18	; 0x12
    270c:	39 88       	ldd	r3, Y+17	; 0x11
    270e:	48 88       	ldd	r4, Y+16	; 0x10
    2710:	5f 84       	ldd	r5, Y+15	; 0x0f
    2712:	6e 84       	ldd	r6, Y+14	; 0x0e
    2714:	7d 84       	ldd	r7, Y+13	; 0x0d
    2716:	8c 84       	ldd	r8, Y+12	; 0x0c
    2718:	9b 84       	ldd	r9, Y+11	; 0x0b
    271a:	aa 84       	ldd	r10, Y+10	; 0x0a
    271c:	b9 84       	ldd	r11, Y+9	; 0x09
    271e:	c8 84       	ldd	r12, Y+8	; 0x08
    2720:	df 80       	ldd	r13, Y+7	; 0x07
    2722:	ee 80       	ldd	r14, Y+6	; 0x06
    2724:	fd 80       	ldd	r15, Y+5	; 0x05
    2726:	0c 81       	ldd	r16, Y+4	; 0x04
    2728:	1b 81       	ldd	r17, Y+3	; 0x03
    272a:	aa 81       	ldd	r26, Y+2	; 0x02
    272c:	b9 81       	ldd	r27, Y+1	; 0x01
    272e:	ce 0f       	add	r28, r30
    2730:	d1 1d       	adc	r29, r1
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	ed 01       	movw	r28, r26
    273e:	08 95       	ret

00002740 <_exit>:
    2740:	f8 94       	cli

00002742 <__stop_program>:
    2742:	ff cf       	rjmp	.-2      	; 0x2742 <__stop_program>

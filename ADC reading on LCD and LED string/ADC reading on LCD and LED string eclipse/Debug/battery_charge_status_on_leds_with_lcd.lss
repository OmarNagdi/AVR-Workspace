
battery_charge_status_on_leds_with_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002818  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002818  0000288c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c14  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d7c  00000000  00000000  000044b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000551f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008665  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000095e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <main>
      7a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e6       	ldi	r22, 0x6A	; 106
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 df 13 	jmp	0x27be	; 0x27be <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MADC_voidInit>:
#include"ADC_Interface.h"
#include "ADC_Cfg.h"
#include <avr/io.h>

void MADC_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	//We will configure here options that don't change during run time

	// 1-Ref. Volt.
	SET_BIT(ADMUX,REFS0);
     c96:	a7 e2       	ldi	r26, 0x27	; 39
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e2       	ldi	r30, 0x27	; 39
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 64       	ori	r24, 0x40	; 64
     ca2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24

	// 2-Data Adjustment Direction
	CLR_BIT(ADMUX,ADLAR);
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	8c 93       	st	X, r24

	// 3-ADC peripheral Enable
	SET_BIT(ADCSRA,ADEN);
     cc0:	a6 e2       	ldi	r26, 0x26	; 38
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e2       	ldi	r30, 0x26	; 38
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	8c 93       	st	X, r24

	// 4-Auto Trigger Enable
	CLR_BIT(ADCSRA,ADATE);
     cce:	a6 e2       	ldi	r26, 0x26	; 38
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e6 e2       	ldi	r30, 0x26	; 38
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 7d       	andi	r24, 0xDF	; 223
     cda:	8c 93       	st	X, r24

	// 4-a Select Trigger Source

	// 5-Interrupt Enable
	CLR_BIT(ADCSRA,ADIE);
     cdc:	a6 e2       	ldi	r26, 0x26	; 38
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e6 e2       	ldi	r30, 0x26	; 38
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	8c 93       	st	X, r24
	//Using bit masking instead of using set & clr operations normally
	/*First, we clear three bits of the prescaler without changing the rest of the register and
	 then we force the required mask which is the required value of the prescaler again without
	 changing the rest of the register*/

	ADCSRA= ( ADCSRA & 0xF8 ) |  (ADC_PRESCALER) ;
     cea:	a6 e2       	ldi	r26, 0x26	; 38
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e6 e2       	ldi	r30, 0x26	; 38
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 7f       	andi	r24, 0xF8	; 248
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24





}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <MADC_u16AnalogRead>:

//func. giving us the int value for the no. of steps
u16 MADC_u16AnalogRead(u8 A_u8ChannelNo)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <MADC_u16AnalogRead+0x6>
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
	// 1-Input Validation(can be done by bit masking also)
	if(A_u8ChannelNo<32)
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	60 f5       	brcc	.+88     	; 0xd6c <MADC_u16AnalogRead+0x6c>
	{
		// 2- Select Channel
		ADMUX= (ADMUX &0xE0) | A_u8ChannelNo;
     d14:	a7 e2       	ldi	r26, 0x27	; 39
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e2       	ldi	r30, 0x27	; 39
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	98 2f       	mov	r25, r24
     d20:	90 7e       	andi	r25, 0xE0	; 224
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	89 2b       	or	r24, r25
     d26:	8c 93       	st	X, r24

		// 3-Start Conversion
		SET_BIT(ADCSRA,ADSC);
     d28:	a6 e2       	ldi	r26, 0x26	; 38
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e6 e2       	ldi	r30, 0x26	; 38
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 64       	ori	r24, 0x40	; 64
     d34:	8c 93       	st	X, r24

		// 4-Poll On flag(interrupt disabled)
		while(GET_BIT(ADCSRA,ADIF)   !=1  )
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	82 95       	swap	r24
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	81 70       	andi	r24, 0x01	; 1
     d46:	90 70       	andi	r25, 0x00	; 0
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <MADC_u16AnalogRead+0x36>
		; // = {}
		// 5-Clear flag by writing 1 to it in case of polling
		SET_BIT(ADCSRA,ADIF);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8c 93       	st	X, r24
		// 6-Read ADC Data
		return ADC;
     d5a:	e4 e2       	ldi	r30, 0x24	; 36
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	9b 83       	std	Y+3, r25	; 0x03
     d64:	8a 83       	std	Y+2, r24	; 0x02

	}


}
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <MADC_u16AnalogRead+0x6c>
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <MDIO_voidSetPinDirection>:
#define DIO_PIND_REG      *((volatile u8 *) 0X30)


// MDIO_voidSetPinDirection(PORTA, PIN7, OUTPUT);
void MDIO_voidSetPinDirection(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinDirection)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	2d 97       	sbiw	r28, 0x0d	; 13
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	6a 83       	std	Y+2, r22	; 0x02
     d90:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinDirection <=OUTPUT))
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	08 f0       	brcs	.+2      	; 0xd9a <MDIO_voidSetPinDirection+0x22>
     d98:	08 c1       	rjmp	.+528    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 30       	cpi	r24, 0x08	; 8
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <MDIO_voidSetPinDirection+0x2a>
     da0:	04 c1       	rjmp	.+520    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	08 f0       	brcs	.+2      	; 0xdaa <MDIO_voidSetPinDirection+0x32>
     da8:	00 c1       	rjmp	.+512    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
	{
		switch (A_u8PortNo)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3d 87       	std	Y+13, r19	; 0x0d
     db2:	2c 87       	std	Y+12, r18	; 0x0c
     db4:	8c 85       	ldd	r24, Y+12	; 0x0c
     db6:	9d 85       	ldd	r25, Y+13	; 0x0d
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <MDIO_voidSetPinDirection+0x48>
     dbe:	4f c0       	rjmp	.+158    	; 0xe5e <MDIO_voidSetPinDirection+0xe6>
     dc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <MDIO_voidSetPinDirection+0x5c>
     dca:	8c 85       	ldd	r24, Y+12	; 0x0c
     dcc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	71 f0       	breq	.+28     	; 0xdee <MDIO_voidSetPinDirection+0x76>
     dd2:	eb c0       	rjmp	.+470    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
     dd4:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd6:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <MDIO_voidSetPinDirection+0x68>
     dde:	77 c0       	rjmp	.+238    	; 0xece <MDIO_voidSetPinDirection+0x156>
     de0:	8c 85       	ldd	r24, Y+12	; 0x0c
     de2:	9d 85       	ldd	r25, Y+13	; 0x0d
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <MDIO_voidSetPinDirection+0x74>
     dea:	a9 c0       	rjmp	.+338    	; 0xf3e <MDIO_voidSetPinDirection+0x1c6>
     dec:	de c0       	rjmp	.+444    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
		{
		  case PORTA:
			  	  	  switch (A_u8PinDirection)
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3b 87       	std	Y+11, r19	; 0x0b
     df6:	2a 87       	std	Y+10, r18	; 0x0a
     df8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	d1 f0       	breq	.+52     	; 0xe34 <MDIO_voidSetPinDirection+0xbc>
     e00:	2a 85       	ldd	r18, Y+10	; 0x0a
     e02:	3b 85       	ldd	r19, Y+11	; 0x0b
     e04:	21 30       	cpi	r18, 0x01	; 1
     e06:	31 05       	cpc	r19, r1
     e08:	09 f0       	breq	.+2      	; 0xe0c <MDIO_voidSetPinDirection+0x94>
     e0a:	cf c0       	rjmp	.+414    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	  {
			  	  	    case OUTPUT: SET_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     e0c:	aa e3       	ldi	r26, 0x3A	; 58
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ea e3       	ldi	r30, 0x3A	; 58
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <MDIO_voidSetPinDirection+0xb2>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <MDIO_voidSetPinDirection+0xae>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	bb c0       	rjmp	.+374    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	    case INPUT : CLR_BIT(DIO_DDRA_REG,A_u8PinNo); break;
     e34:	aa e3       	ldi	r26, 0x3A	; 58
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ea e3       	ldi	r30, 0x3A	; 58
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <MDIO_voidSetPinDirection+0xda>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <MDIO_voidSetPinDirection+0xd6>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	a6 c0       	rjmp	.+332    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
			  	  	  }
			  	  	  break;
		 case PORTB:
					  switch (A_u8PinDirection)
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	39 87       	std	Y+9, r19	; 0x09
     e66:	28 87       	std	Y+8, r18	; 0x08
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	99 85       	ldd	r25, Y+9	; 0x09
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	d1 f0       	breq	.+52     	; 0xea4 <MDIO_voidSetPinDirection+0x12c>
     e70:	28 85       	ldd	r18, Y+8	; 0x08
     e72:	39 85       	ldd	r19, Y+9	; 0x09
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	31 05       	cpc	r19, r1
     e78:	09 f0       	breq	.+2      	; 0xe7c <MDIO_voidSetPinDirection+0x104>
     e7a:	97 c0       	rjmp	.+302    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     e7c:	a7 e3       	ldi	r26, 0x37	; 55
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e3       	ldi	r30, 0x37	; 55
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <MDIO_voidSetPinDirection+0x122>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <MDIO_voidSetPinDirection+0x11e>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	83 c0       	rjmp	.+262    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRB_REG,A_u8PinNo); break;
     ea4:	a7 e3       	ldi	r26, 0x37	; 55
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e7 e3       	ldi	r30, 0x37	; 55
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <MDIO_voidSetPinDirection+0x14a>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <MDIO_voidSetPinDirection+0x146>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	6e c0       	rjmp	.+220    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTC:
					  switch (A_u8PinDirection)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3f 83       	std	Y+7, r19	; 0x07
     ed6:	2e 83       	std	Y+6, r18	; 0x06
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	d1 f0       	breq	.+52     	; 0xf14 <MDIO_voidSetPinDirection+0x19c>
     ee0:	2e 81       	ldd	r18, Y+6	; 0x06
     ee2:	3f 81       	ldd	r19, Y+7	; 0x07
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <MDIO_voidSetPinDirection+0x174>
     eea:	5f c0       	rjmp	.+190    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     eec:	a4 e3       	ldi	r26, 0x34	; 52
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <MDIO_voidSetPinDirection+0x192>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <MDIO_voidSetPinDirection+0x18e>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	4b c0       	rjmp	.+150    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRC_REG,A_u8PinNo); break;
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <MDIO_voidSetPinDirection+0x1ba>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <MDIO_voidSetPinDirection+0x1b6>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	36 c0       	rjmp	.+108    	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  }
					  break;
	     case PORTD:
					  switch (A_u8PinDirection)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3d 83       	std	Y+5, r19	; 0x05
     f46:	2c 83       	std	Y+4, r18	; 0x04
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	c9 f0       	breq	.+50     	; 0xf82 <MDIO_voidSetPinDirection+0x20a>
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	3d 81       	ldd	r19, Y+5	; 0x05
     f54:	21 30       	cpi	r18, 0x01	; 1
     f56:	31 05       	cpc	r19, r1
     f58:	41 f5       	brne	.+80     	; 0xfaa <MDIO_voidSetPinDirection+0x232>
					  {
						case OUTPUT: SET_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     f5a:	a1 e3       	ldi	r26, 0x31	; 49
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e1 e3       	ldi	r30, 0x31	; 49
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <MDIO_voidSetPinDirection+0x200>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <MDIO_voidSetPinDirection+0x1fc>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	14 c0       	rjmp	.+40     	; 0xfaa <MDIO_voidSetPinDirection+0x232>
						case INPUT : CLR_BIT(DIO_DDRD_REG,A_u8PinNo); break;
     f82:	a1 e3       	ldi	r26, 0x31	; 49
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e1 e3       	ldi	r30, 0x31	; 49
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <MDIO_voidSetPinDirection+0x228>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <MDIO_voidSetPinDirection+0x224>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
	else
	{

	}
	return;
}
     faa:	2d 96       	adiw	r28, 0x0d	; 13
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8PinValue)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2d 97       	sbiw	r28, 0x0d	; 13
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	6a 83       	std	Y+2, r22	; 0x02
     fd4:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinValue <=HIGH))
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <MDIO_voidSetPinValue+0x22>
     fdc:	08 c1       	rjmp	.+528    	; 0x11ee <MDIO_voidSetPinValue+0x232>
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	88 30       	cpi	r24, 0x08	; 8
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <MDIO_voidSetPinValue+0x2a>
     fe4:	04 c1       	rjmp	.+520    	; 0x11ee <MDIO_voidSetPinValue+0x232>
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	08 f0       	brcs	.+2      	; 0xfee <MDIO_voidSetPinValue+0x32>
     fec:	00 c1       	rjmp	.+512    	; 0x11ee <MDIO_voidSetPinValue+0x232>
	{
		switch (A_u8PortNo)
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3d 87       	std	Y+13, r19	; 0x0d
     ff6:	2c 87       	std	Y+12, r18	; 0x0c
     ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <MDIO_voidSetPinValue+0x48>
    1002:	4f c0       	rjmp	.+158    	; 0x10a2 <MDIO_voidSetPinValue+0xe6>
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	3d 85       	ldd	r19, Y+13	; 0x0d
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	2c f4       	brge	.+10     	; 0x1018 <MDIO_voidSetPinValue+0x5c>
    100e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1010:	9d 85       	ldd	r25, Y+13	; 0x0d
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	71 f0       	breq	.+28     	; 0x1032 <MDIO_voidSetPinValue+0x76>
    1016:	eb c0       	rjmp	.+470    	; 0x11ee <MDIO_voidSetPinValue+0x232>
    1018:	2c 85       	ldd	r18, Y+12	; 0x0c
    101a:	3d 85       	ldd	r19, Y+13	; 0x0d
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <MDIO_voidSetPinValue+0x68>
    1022:	77 c0       	rjmp	.+238    	; 0x1112 <MDIO_voidSetPinValue+0x156>
    1024:	8c 85       	ldd	r24, Y+12	; 0x0c
    1026:	9d 85       	ldd	r25, Y+13	; 0x0d
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <MDIO_voidSetPinValue+0x74>
    102e:	a9 c0       	rjmp	.+338    	; 0x1182 <MDIO_voidSetPinValue+0x1c6>
    1030:	de c0       	rjmp	.+444    	; 0x11ee <MDIO_voidSetPinValue+0x232>
		{
			case PORTA:
						switch (A_u8PinValue)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3b 87       	std	Y+11, r19	; 0x0b
    103a:	2a 87       	std	Y+10, r18	; 0x0a
    103c:	8a 85       	ldd	r24, Y+10	; 0x0a
    103e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	d1 f0       	breq	.+52     	; 0x1078 <MDIO_voidSetPinValue+0xbc>
    1044:	2a 85       	ldd	r18, Y+10	; 0x0a
    1046:	3b 85       	ldd	r19, Y+11	; 0x0b
    1048:	21 30       	cpi	r18, 0x01	; 1
    104a:	31 05       	cpc	r19, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <MDIO_voidSetPinValue+0x94>
    104e:	cf c0       	rjmp	.+414    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTA_REG,A_u8PinNo); break;
    1050:	ab e3       	ldi	r26, 0x3B	; 59
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <MDIO_voidSetPinValue+0xb2>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <MDIO_voidSetPinValue+0xae>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	bb c0       	rjmp	.+374    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTA_REG,A_u8PinNo); break;
    1078:	ab e3       	ldi	r26, 0x3B	; 59
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	eb e3       	ldi	r30, 0x3B	; 59
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <MDIO_voidSetPinValue+0xda>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <MDIO_voidSetPinValue+0xd6>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	a6 c0       	rjmp	.+332    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTB:
						switch (A_u8PinValue)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	39 87       	std	Y+9, r19	; 0x09
    10aa:	28 87       	std	Y+8, r18	; 0x08
    10ac:	88 85       	ldd	r24, Y+8	; 0x08
    10ae:	99 85       	ldd	r25, Y+9	; 0x09
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	d1 f0       	breq	.+52     	; 0x10e8 <MDIO_voidSetPinValue+0x12c>
    10b4:	28 85       	ldd	r18, Y+8	; 0x08
    10b6:	39 85       	ldd	r19, Y+9	; 0x09
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	31 05       	cpc	r19, r1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <MDIO_voidSetPinValue+0x104>
    10be:	97 c0       	rjmp	.+302    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTB_REG,A_u8PinNo); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <MDIO_voidSetPinValue+0x122>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <MDIO_voidSetPinValue+0x11e>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	83 c0       	rjmp	.+262    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTB_REG,A_u8PinNo); break;
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <MDIO_voidSetPinValue+0x14a>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <MDIO_voidSetPinValue+0x146>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	6e c0       	rjmp	.+220    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTC:
						switch (A_u8PinValue)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3f 83       	std	Y+7, r19	; 0x07
    111a:	2e 83       	std	Y+6, r18	; 0x06
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	9f 81       	ldd	r25, Y+7	; 0x07
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	d1 f0       	breq	.+52     	; 0x1158 <MDIO_voidSetPinValue+0x19c>
    1124:	2e 81       	ldd	r18, Y+6	; 0x06
    1126:	3f 81       	ldd	r19, Y+7	; 0x07
    1128:	21 30       	cpi	r18, 0x01	; 1
    112a:	31 05       	cpc	r19, r1
    112c:	09 f0       	breq	.+2      	; 0x1130 <MDIO_voidSetPinValue+0x174>
    112e:	5f c0       	rjmp	.+190    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <MDIO_voidSetPinValue+0x192>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <MDIO_voidSetPinValue+0x18e>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	4b c0       	rjmp	.+150    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTC_REG,A_u8PinNo); break;
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_voidSetPinValue+0x1ba>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_voidSetPinValue+0x1b6>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	36 c0       	rjmp	.+108    	; 0x11ee <MDIO_voidSetPinValue+0x232>
						}
						break;
			case PORTD:
						switch (A_u8PinValue)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3d 83       	std	Y+5, r19	; 0x05
    118a:	2c 83       	std	Y+4, r18	; 0x04
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	c9 f0       	breq	.+50     	; 0x11c6 <MDIO_voidSetPinValue+0x20a>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	21 30       	cpi	r18, 0x01	; 1
    119a:	31 05       	cpc	r19, r1
    119c:	41 f5       	brne	.+80     	; 0x11ee <MDIO_voidSetPinValue+0x232>
						{
						case HIGH: SET_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    119e:	a2 e3       	ldi	r26, 0x32	; 50
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e2 e3       	ldi	r30, 0x32	; 50
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <MDIO_voidSetPinValue+0x200>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <MDIO_voidSetPinValue+0x1fc>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <MDIO_voidSetPinValue+0x232>
						case LOW : CLR_BIT(DIO_PORTD_REG,A_u8PinNo); break;
    11c6:	a2 e3       	ldi	r26, 0x32	; 50
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e2 e3       	ldi	r30, 0x32	; 50
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <MDIO_voidSetPinValue+0x228>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <MDIO_voidSetPinValue+0x224>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
						}
						break;
		}
	}
}
    11ee:	2d 96       	adiw	r28, 0x0d	; 13
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <MDIO_u8GetPinValue>:


u8   MDIO_u8GetPinValue(u8 A_u8PortNo, u8 A_u8PinNo)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <MDIO_u8GetPinValue+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <MDIO_u8GetPinValue+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=5;
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	89 83       	std	Y+1, r24	; 0x01
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	08 f0       	brcs	.+2      	; 0x121e <MDIO_u8GetPinValue+0x1e>
    121c:	6b c0       	rjmp	.+214    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <MDIO_u8GetPinValue+0x26>
    1224:	67 c0       	rjmp	.+206    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
		{
			switch (A_u8PortNo)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 83       	std	Y+5, r19	; 0x05
    122e:	2c 83       	std	Y+4, r18	; 0x04
    1230:	4c 81       	ldd	r20, Y+4	; 0x04
    1232:	5d 81       	ldd	r21, Y+5	; 0x05
    1234:	41 30       	cpi	r20, 0x01	; 1
    1236:	51 05       	cpc	r21, r1
    1238:	41 f1       	breq	.+80     	; 0x128a <MDIO_u8GetPinValue+0x8a>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	34 f4       	brge	.+12     	; 0x1250 <MDIO_u8GetPinValue+0x50>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	21 15       	cp	r18, r1
    124a:	31 05       	cpc	r19, r1
    124c:	61 f0       	breq	.+24     	; 0x1266 <MDIO_u8GetPinValue+0x66>
    124e:	52 c0       	rjmp	.+164    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
    1250:	4c 81       	ldd	r20, Y+4	; 0x04
    1252:	5d 81       	ldd	r21, Y+5	; 0x05
    1254:	42 30       	cpi	r20, 0x02	; 2
    1256:	51 05       	cpc	r21, r1
    1258:	51 f1       	breq	.+84     	; 0x12ae <MDIO_u8GetPinValue+0xae>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	b9 f1       	breq	.+110    	; 0x12d2 <MDIO_u8GetPinValue+0xd2>
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			{
			 case PORTA: local_u8PinValue= GET_BIT(DIO_PINA_REG,A_u8PinNo);  break;
    1266:	e9 e3       	ldi	r30, 0x39	; 57
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <MDIO_u8GetPinValue+0x7e>
    127a:	55 95       	asr	r21
    127c:	47 95       	ror	r20
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <MDIO_u8GetPinValue+0x7a>
    1282:	ca 01       	movw	r24, r20
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	35 c0       	rjmp	.+106    	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTB: local_u8PinValue= GET_BIT(DIO_PINB_REG,A_u8PinNo);  break;
    128a:	e6 e3       	ldi	r30, 0x36	; 54
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <MDIO_u8GetPinValue+0xa2>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <MDIO_u8GetPinValue+0x9e>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	23 c0       	rjmp	.+70     	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTC: local_u8PinValue= GET_BIT(DIO_PINC_REG,A_u8PinNo);  break;
    12ae:	e3 e3       	ldi	r30, 0x33	; 51
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <MDIO_u8GetPinValue+0xc6>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <MDIO_u8GetPinValue+0xc2>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <MDIO_u8GetPinValue+0xf4>
			 case PORTD: local_u8PinValue= GET_BIT(DIO_PIND_REG,A_u8PinNo);  break;
    12d2:	e0 e3       	ldi	r30, 0x30	; 48
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_u8GetPinValue+0xea>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_u8GetPinValue+0xe6>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return local_u8PinValue;
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <MDIO_voidSetPortDirection>:



void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <MDIO_voidSetPortDirection+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <MDIO_voidSetPortDirection+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	90 f5       	brcc	.+100    	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
		{
			switch (A_u8PortNo)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3c 83       	std	Y+4, r19	; 0x04
    1324:	2b 83       	std	Y+3, r18	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	d1 f0       	breq	.+52     	; 0x1364 <MDIO_voidSetPortDirection+0x5e>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	2c f4       	brge	.+10     	; 0x1344 <MDIO_voidSetPortDirection+0x3e>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	61 f0       	breq	.+24     	; 0x135a <MDIO_voidSetPortDirection+0x54>
    1342:	1e c0       	rjmp	.+60     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	3c 81       	ldd	r19, Y+4	; 0x04
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	81 f0       	breq	.+32     	; 0x136e <MDIO_voidSetPortDirection+0x68>
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <MDIO_voidSetPortDirection+0x72>
    1358:	13 c0       	rjmp	.+38     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			{
			 case PORTA: DIO_DDRA_REG= A_u8PortDirection;  break;
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTB: DIO_DDRB_REG= A_u8PortDirection;  break;
    1364:	e7 e3       	ldi	r30, 0x37	; 55
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTC: DIO_DDRC_REG= A_u8PortDirection;  break;
    136e:	e4 e3       	ldi	r30, 0x34	; 52
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <MDIO_voidSetPortDirection+0x7a>
			 case PORTD: DIO_DDRD_REG= A_u8PortDirection;  break;
    1378:	e1 e3       	ldi	r30, 0x31	; 49
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
			}
		}

}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue    (u8 A_u8PortNo,u8 A_u8PortValue)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <MDIO_voidSetPortValue+0x6>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <MDIO_voidSetPortValue+0x8>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) )
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	90 f5       	brcc	.+100    	; 0x1408 <MDIO_voidSetPortValue+0x7a>
			{
				switch (A_u8PortNo)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3c 83       	std	Y+4, r19	; 0x04
    13ac:	2b 83       	std	Y+3, r18	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	d1 f0       	breq	.+52     	; 0x13ec <MDIO_voidSetPortValue+0x5e>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <MDIO_voidSetPortValue+0x3e>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <MDIO_voidSetPortValue+0x54>
    13ca:	1e c0       	rjmp	.+60     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <MDIO_voidSetPortValue+0x68>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <MDIO_voidSetPortValue+0x72>
    13e0:	13 c0       	rjmp	.+38     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				{
				 case PORTA: DIO_PORTA_REG= A_u8PortValue;  break;
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTB: DIO_PORTB_REG= A_u8PortValue;  break;
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTC: DIO_PORTC_REG= A_u8PortValue;  break;
    13f6:	e5 e3       	ldi	r30, 0x35	; 53
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <MDIO_voidSetPortValue+0x7a>
				 case PORTD: DIO_PORTD_REG= A_u8PortValue;  break;
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
				}
			}
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <HLCD_voidSendCommand>:




void HLCD_voidSendCommand(u8 A_u8Command)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	6d 97       	sbiw	r28, 0x1d	; 29
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,LOW);
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>


	//Send Command ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1444:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	41 e0       	ldi	r20, 0x01	; 1
    144e:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e8       	ldi	r26, 0x80	; 128
    1458:	bf e3       	ldi	r27, 0x3F	; 63
    145a:	89 8f       	std	Y+25, r24	; 0x19
    145c:	9a 8f       	std	Y+26, r25	; 0x1a
    145e:	ab 8f       	std	Y+27, r26	; 0x1b
    1460:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	69 8d       	ldd	r22, Y+25	; 0x19
    1464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a ef       	ldi	r20, 0xFA	; 250
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	8d 8b       	std	Y+21, r24	; 0x15
    147c:	9e 8b       	std	Y+22, r25	; 0x16
    147e:	af 8b       	std	Y+23, r26	; 0x17
    1480:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1482:	6d 89       	ldd	r22, Y+21	; 0x15
    1484:	7e 89       	ldd	r23, Y+22	; 0x16
    1486:	8f 89       	ldd	r24, Y+23	; 0x17
    1488:	98 8d       	ldd	r25, Y+24	; 0x18
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1496:	88 23       	and	r24, r24
    1498:	2c f4       	brge	.+10     	; 0x14a4 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9c 8b       	std	Y+20, r25	; 0x14
    14a0:	8b 8b       	std	Y+19, r24	; 0x13
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    14a4:	6d 89       	ldd	r22, Y+21	; 0x15
    14a6:	7e 89       	ldd	r23, Y+22	; 0x16
    14a8:	8f 89       	ldd	r24, Y+23	; 0x17
    14aa:	98 8d       	ldd	r25, Y+24	; 0x18
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	57 e4       	ldi	r21, 0x47	; 71
    14b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	4c f5       	brge	.+82     	; 0x150e <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	69 8d       	ldd	r22, Y+25	; 0x19
    14be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9c 8b       	std	Y+20, r25	; 0x14
    14e2:	8b 8b       	std	Y+19, r24	; 0x13
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <HLCD_voidSendCommand+0xee>
    14e6:	88 ec       	ldi	r24, 0xC8	; 200
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9a 8b       	std	Y+18, r25	; 0x12
    14ec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ee:	89 89       	ldd	r24, Y+17	; 0x11
    14f0:	9a 89       	ldd	r25, Y+18	; 0x12
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <HLCD_voidSendCommand+0xdc>
    14f6:	9a 8b       	std	Y+18, r25	; 0x12
    14f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9c 8b       	std	Y+20, r25	; 0x14
    1502:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	69 f7       	brne	.-38     	; 0x14e6 <HLCD_voidSendCommand+0xd0>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150e:	6d 89       	ldd	r22, Y+21	; 0x15
    1510:	7e 89       	ldd	r23, Y+22	; 0x16
    1512:	8f 89       	ldd	r24, Y+23	; 0x17
    1514:	98 8d       	ldd	r25, Y+24	; 0x18
    1516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
    1522:	8b 89       	ldd	r24, Y+19	; 0x13
    1524:	9c 89       	ldd	r25, Y+20	; 0x14
    1526:	98 8b       	std	Y+16, r25	; 0x10
    1528:	8f 87       	std	Y+15, r24	; 0x0f
    152a:	8f 85       	ldd	r24, Y+15	; 0x0f
    152c:	98 89       	ldd	r25, Y+16	; 0x10
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <HLCD_voidSendCommand+0x118>
    1532:	98 8b       	std	Y+16, r25	; 0x10
    1534:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	62 e0       	ldi	r22, 0x02	; 2
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e8       	ldi	r26, 0x80	; 128
    1546:	bf e3       	ldi	r27, 0x3F	; 63
    1548:	8b 87       	std	Y+11, r24	; 0x0b
    154a:	9c 87       	std	Y+12, r25	; 0x0c
    154c:	ad 87       	std	Y+13, r26	; 0x0d
    154e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1550:	6b 85       	ldd	r22, Y+11	; 0x0b
    1552:	7c 85       	ldd	r23, Y+12	; 0x0c
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a ef       	ldi	r20, 0xFA	; 250
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8f 83       	std	Y+7, r24	; 0x07
    156a:	98 87       	std	Y+8, r25	; 0x08
    156c:	a9 87       	std	Y+9, r26	; 0x09
    156e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1570:	6f 81       	ldd	r22, Y+7	; 0x07
    1572:	78 85       	ldd	r23, Y+8	; 0x08
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <HLCD_voidSendCommand+0x17c>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <HLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <HLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <HLCD_voidSendCommand+0x1dc>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <HLCD_voidSendCommand+0x1ca>
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <HLCD_voidSendCommand+0x1be>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <HLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <HLCD_voidSendCommand+0x206>
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01





}
    1624:	6d 96       	adiw	r28, 0x1d	; 29
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <HLCD_voidSendData>:



void HLCD_voidSendData(u8 A_u8Data)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	6d 97       	sbiw	r28, 0x1d	; 29
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8d 8f       	std	Y+29, r24	; 0x1d
	// Assign values for RS and RW pins 0 & 1 of portA respectively
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN0,HIGH);
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN1,LOW);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>


	//Send Data ON Data pins
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1664:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>

	//Send a pulse on enable pin pin 2 of port A
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,HIGH);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	62 e0       	ldi	r22, 0x02	; 2
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e8       	ldi	r26, 0x80	; 128
    1678:	bf e3       	ldi	r27, 0x3F	; 63
    167a:	89 8f       	std	Y+25, r24	; 0x19
    167c:	9a 8f       	std	Y+26, r25	; 0x1a
    167e:	ab 8f       	std	Y+27, r26	; 0x1b
    1680:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	69 8d       	ldd	r22, Y+25	; 0x19
    1684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a ef       	ldi	r20, 0xFA	; 250
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8d 8b       	std	Y+21, r24	; 0x15
    169c:	9e 8b       	std	Y+22, r25	; 0x16
    169e:	af 8b       	std	Y+23, r26	; 0x17
    16a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 8b       	std	Y+20, r25	; 0x14
    16c0:	8b 8b       	std	Y+19, r24	; 0x13
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <HLCD_voidSendData+0xee>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9a 8b       	std	Y+18, r25	; 0x12
    170c:	89 8b       	std	Y+17, r24	; 0x11
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	9a 89       	ldd	r25, Y+18	; 0x12
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <HLCD_voidSendData+0xdc>
    1716:	9a 8b       	std	Y+18, r25	; 0x12
    1718:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9c 8b       	std	Y+20, r25	; 0x14
    1722:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8b 89       	ldd	r24, Y+19	; 0x13
    1726:	9c 89       	ldd	r25, Y+20	; 0x14
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <HLCD_voidSendData+0xd0>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6d 89       	ldd	r22, Y+21	; 0x15
    1730:	7e 89       	ldd	r23, Y+22	; 0x16
    1732:	8f 89       	ldd	r24, Y+23	; 0x17
    1734:	98 8d       	ldd	r25, Y+24	; 0x18
    1736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	98 8b       	std	Y+16, r25	; 0x10
    1748:	8f 87       	std	Y+15, r24	; 0x0f
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	98 89       	ldd	r25, Y+16	; 0x10
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <HLCD_voidSendData+0x118>
    1752:	98 8b       	std	Y+16, r25	; 0x10
    1754:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,PIN2,LOW);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	8b 87       	std	Y+11, r24	; 0x0b
    176a:	9c 87       	std	Y+12, r25	; 0x0c
    176c:	ad 87       	std	Y+13, r26	; 0x0d
    176e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a ef       	ldi	r20, 0xFA	; 250
    177e:	54 e4       	ldi	r21, 0x44	; 68
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8f 83       	std	Y+7, r24	; 0x07
    178a:	98 87       	std	Y+8, r25	; 0x08
    178c:	a9 87       	std	Y+9, r26	; 0x09
    178e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <HLCD_voidSendData+0x17c>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <HLCD_voidSendData+0x1fa>
	else if (__tmp > 65535)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <HLCD_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <HLCD_voidSendData+0x1dc>
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <HLCD_voidSendData+0x1ca>
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <HLCD_voidSendData+0x1be>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <HLCD_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <HLCD_voidSendData+0x206>
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01





}
    1844:	6d 96       	adiw	r28, 0x1d	; 29
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <HLCD_voidInit>:




// 8bit Init. func.
void HLCD_voidInit(void){
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	cc 54       	subi	r28, 0x4C	; 76
    1864:	d0 40       	sbci	r29, 0x00	; 0
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	fe 01       	movw	r30, r28
    1872:	e7 5b       	subi	r30, 0xB7	; 183
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a8 ef       	ldi	r26, 0xF8	; 248
    187c:	b1 e4       	ldi	r27, 0x41	; 65
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	8e 01       	movw	r16, r28
    1888:	0b 5b       	subi	r16, 0xBB	; 187
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	e7 5b       	subi	r30, 0xB7	; 183
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b4:	fe 01       	movw	r30, r28
    18b6:	eb 5b       	subi	r30, 0xBB	; 187
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	44 f4       	brge	.+16     	; 0x18e2 <HLCD_voidInit+0x8c>
		__ticks = 1;
    18d2:	fe 01       	movw	r30, r28
    18d4:	ed 5b       	subi	r30, 0xBD	; 189
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	64 c0       	rjmp	.+200    	; 0x19aa <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    18e2:	fe 01       	movw	r30, r28
    18e4:	eb 5b       	subi	r30, 0xBB	; 187
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <HLCD_voidInit+0xac>
    1900:	43 c0       	rjmp	.+134    	; 0x1988 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	fe 01       	movw	r30, r28
    1904:	e7 5b       	subi	r30, 0xB7	; 183
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8e 01       	movw	r16, r28
    1922:	0d 5b       	subi	r16, 0xBD	; 189
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	1f c0       	rjmp	.+62     	; 0x1978 <HLCD_voidInit+0x122>
    193a:	fe 01       	movw	r30, r28
    193c:	ef 5b       	subi	r30, 0xBF	; 191
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	88 ec       	ldi	r24, 0xC8	; 200
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	fe 01       	movw	r30, r28
    194a:	ef 5b       	subi	r30, 0xBF	; 191
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <HLCD_voidInit+0xfc>
    1956:	fe 01       	movw	r30, r28
    1958:	ef 5b       	subi	r30, 0xBF	; 191
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	de 01       	movw	r26, r28
    1962:	ad 5b       	subi	r26, 0xBD	; 189
    1964:	bf 4f       	sbci	r27, 0xFF	; 255
    1966:	fe 01       	movw	r30, r28
    1968:	ed 5b       	subi	r30, 0xBD	; 189
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	9c 93       	st	X, r25
    1976:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	fe 01       	movw	r30, r28
    197a:	ed 5b       	subi	r30, 0xBD	; 189
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	d1 f6       	brne	.-76     	; 0x193a <HLCD_voidInit+0xe4>
    1986:	24 c0       	rjmp	.+72     	; 0x19d0 <HLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	8e 01       	movw	r16, r28
    198a:	0d 5b       	subi	r16, 0xBD	; 189
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	eb 5b       	subi	r30, 0xBB	; 187
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	fe 01       	movw	r30, r28
    19ac:	ed 5b       	subi	r30, 0xBD	; 189
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	fe 01       	movw	r30, r28
    19b6:	ff 96       	adiw	r30, 0x3f	; 63
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	fe 01       	movw	r30, r28
    19be:	ff 96       	adiw	r30, 0x3f	; 63
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <HLCD_voidInit+0x16e>
    19c8:	fe 01       	movw	r30, r28
    19ca:	ff 96       	adiw	r30, 0x3f	; 63
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24

	//wait more than 30 msc
	_delay_ms(31);

	//Function set 0b00111100
	HLCD_voidSendCommand(LCD_FUNCTION_SET);
    19d0:	8c e3       	ldi	r24, 0x3C	; 60
    19d2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e2       	ldi	r26, 0x20	; 32
    19dc:	b2 e4       	ldi	r27, 0x42	; 66
    19de:	8b af       	std	Y+59, r24	; 0x3b
    19e0:	9c af       	std	Y+60, r25	; 0x3c
    19e2:	ad af       	std	Y+61, r26	; 0x3d
    19e4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ee:	2b ea       	ldi	r18, 0xAB	; 171
    19f0:	3a ea       	ldi	r19, 0xAA	; 170
    19f2:	4a e2       	ldi	r20, 0x2A	; 42
    19f4:	50 e4       	ldi	r21, 0x40	; 64
    19f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8f ab       	std	Y+55, r24	; 0x37
    1a00:	98 af       	std	Y+56, r25	; 0x38
    1a02:	a9 af       	std	Y+57, r26	; 0x39
    1a04:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a06:	6f a9       	ldd	r22, Y+55	; 0x37
    1a08:	78 ad       	ldd	r23, Y+56	; 0x38
    1a0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	1c f4       	brge	.+6      	; 0x1a24 <HLCD_voidInit+0x1ce>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	8e ab       	std	Y+54, r24	; 0x36
    1a22:	91 c0       	rjmp	.+290    	; 0x1b46 <HLCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1a24:	6f a9       	ldd	r22, Y+55	; 0x37
    1a26:	78 ad       	ldd	r23, Y+56	; 0x38
    1a28:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	53 e4       	ldi	r21, 0x43	; 67
    1a34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	0c f0       	brlt	.+2      	; 0x1a3e <HLCD_voidInit+0x1e8>
    1a3c:	7b c0       	rjmp	.+246    	; 0x1b34 <HLCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a3e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a40:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8a ab       	std	Y+50, r24	; 0x32
    1a58:	9b ab       	std	Y+51, r25	; 0x33
    1a5a:	ac ab       	std	Y+52, r26	; 0x34
    1a5c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a60:	7b a9       	ldd	r23, Y+51	; 0x33
    1a62:	8c a9       	ldd	r24, Y+52	; 0x34
    1a64:	9d a9       	ldd	r25, Y+53	; 0x35
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8e a7       	std	Y+46, r24	; 0x2e
    1a78:	9f a7       	std	Y+47, r25	; 0x2f
    1a7a:	a8 ab       	std	Y+48, r26	; 0x30
    1a7c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a82:	88 a9       	ldd	r24, Y+48	; 0x30
    1a84:	99 a9       	ldd	r25, Y+49	; 0x31
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <HLCD_voidInit+0x24a>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9d a7       	std	Y+45, r25	; 0x2d
    1a9c:	8c a7       	std	Y+44, r24	; 0x2c
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <HLCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1aa0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aa2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aa4:	88 a9       	ldd	r24, Y+48	; 0x30
    1aa6:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <HLCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6a a9       	ldd	r22, Y+50	; 0x32
    1aba:	7b a9       	ldd	r23, Y+51	; 0x33
    1abc:	8c a9       	ldd	r24, Y+52	; 0x34
    1abe:	9d a9       	ldd	r25, Y+53	; 0x35
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9d a7       	std	Y+45, r25	; 0x2d
    1ade:	8c a7       	std	Y+44, r24	; 0x2c
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <HLCD_voidInit+0x2aa>
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9b a7       	std	Y+43, r25	; 0x2b
    1ae8:	8a a7       	std	Y+42, r24	; 0x2a
    1aea:	8a a5       	ldd	r24, Y+42	; 0x2a
    1aec:	9b a5       	ldd	r25, Y+43	; 0x2b
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <HLCD_voidInit+0x298>
    1af2:	9b a7       	std	Y+43, r25	; 0x2b
    1af4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1af8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9d a7       	std	Y+45, r25	; 0x2d
    1afe:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b02:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <HLCD_voidInit+0x28c>
    1b08:	24 c0       	rjmp	.+72     	; 0x1b52 <HLCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b0c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b0e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b10:	99 a9       	ldd	r25, Y+49	; 0x31
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9d a7       	std	Y+45, r25	; 0x2d
    1b1c:	8c a7       	std	Y+44, r24	; 0x2c
    1b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b22:	99 a7       	std	Y+41, r25	; 0x29
    1b24:	88 a7       	std	Y+40, r24	; 0x28
    1b26:	88 a5       	ldd	r24, Y+40	; 0x28
    1b28:	99 a5       	ldd	r25, Y+41	; 0x29
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <HLCD_voidInit+0x2d4>
    1b2e:	99 a7       	std	Y+41, r25	; 0x29
    1b30:	88 a7       	std	Y+40, r24	; 0x28
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <HLCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b34:	6f a9       	ldd	r22, Y+55	; 0x37
    1b36:	78 ad       	ldd	r23, Y+56	; 0x38
    1b38:	89 ad       	ldd	r24, Y+57	; 0x39
    1b3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8e ab       	std	Y+54, r24	; 0x36
    1b46:	8e a9       	ldd	r24, Y+54	; 0x36
    1b48:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b4a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b4c:	8a 95       	dec	r24
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <HLCD_voidInit+0x2f6>
    1b50:	8f a3       	std	Y+39, r24	; 0x27

	//wait more than 39 us
	_delay_us(40);

	//Display ON/OFF Control 0b00001100 with no shown cursor and no blinking
	HLCD_voidSendCommand(DISPLAY_ON_OR_OFF_CONTROL);
    1b52:	8c e0       	ldi	r24, 0x0C	; 12
    1b54:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e2       	ldi	r26, 0x20	; 32
    1b5e:	b2 e4       	ldi	r27, 0x42	; 66
    1b60:	8b a3       	std	Y+35, r24	; 0x23
    1b62:	9c a3       	std	Y+36, r25	; 0x24
    1b64:	ad a3       	std	Y+37, r26	; 0x25
    1b66:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b68:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b70:	2b ea       	ldi	r18, 0xAB	; 171
    1b72:	3a ea       	ldi	r19, 0xAA	; 170
    1b74:	4a e2       	ldi	r20, 0x2A	; 42
    1b76:	50 e4       	ldi	r21, 0x40	; 64
    1b78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8f 8f       	std	Y+31, r24	; 0x1f
    1b82:	98 a3       	std	Y+32, r25	; 0x20
    1b84:	a9 a3       	std	Y+33, r26	; 0x21
    1b86:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b8a:	78 a1       	ldd	r23, Y+32	; 0x20
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	1c f4       	brge	.+6      	; 0x1ba6 <HLCD_voidInit+0x350>
		__ticks = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ba4:	91 c0       	rjmp	.+290    	; 0x1cc8 <HLCD_voidInit+0x472>
	else if (__tmp > 255)
    1ba6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ba8:	78 a1       	ldd	r23, Y+32	; 0x20
    1baa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bac:	9a a1       	ldd	r25, Y+34	; 0x22
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	53 e4       	ldi	r21, 0x43	; 67
    1bb6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	0c f0       	brlt	.+2      	; 0x1bc0 <HLCD_voidInit+0x36a>
    1bbe:	7b c0       	rjmp	.+246    	; 0x1cb6 <HLCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	4a e7       	ldi	r20, 0x7A	; 122
    1bce:	54 e4       	ldi	r21, 0x44	; 68
    1bd0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bda:	9b 8f       	std	Y+27, r25	; 0x1b
    1bdc:	ac 8f       	std	Y+28, r26	; 0x1c
    1bde:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1be2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1be4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1be6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8e 8b       	std	Y+22, r24	; 0x16
    1bfa:	9f 8b       	std	Y+23, r25	; 0x17
    1bfc:	a8 8f       	std	Y+24, r26	; 0x18
    1bfe:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c00:	6e 89       	ldd	r22, Y+22	; 0x16
    1c02:	7f 89       	ldd	r23, Y+23	; 0x17
    1c04:	88 8d       	ldd	r24, Y+24	; 0x18
    1c06:	99 8d       	ldd	r25, Y+25	; 0x19
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <HLCD_voidInit+0x3cc>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9d 8b       	std	Y+21, r25	; 0x15
    1c1e:	8c 8b       	std	Y+20, r24	; 0x14
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <HLCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1c22:	6e 89       	ldd	r22, Y+22	; 0x16
    1c24:	7f 89       	ldd	r23, Y+23	; 0x17
    1c26:	88 8d       	ldd	r24, Y+24	; 0x18
    1c28:	99 8d       	ldd	r25, Y+25	; 0x19
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <HLCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c3c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9d 8b       	std	Y+21, r25	; 0x15
    1c60:	8c 8b       	std	Y+20, r24	; 0x14
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <HLCD_voidInit+0x42c>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9b 8b       	std	Y+19, r25	; 0x13
    1c6a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c6e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <HLCD_voidInit+0x41a>
    1c74:	9b 8b       	std	Y+19, r25	; 0x13
    1c76:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9d 8b       	std	Y+21, r25	; 0x15
    1c80:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8c 89       	ldd	r24, Y+20	; 0x14
    1c84:	9d 89       	ldd	r25, Y+21	; 0x15
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <HLCD_voidInit+0x40e>
    1c8a:	24 c0       	rjmp	.+72     	; 0x1cd4 <HLCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c8e:	7f 89       	ldd	r23, Y+23	; 0x17
    1c90:	88 8d       	ldd	r24, Y+24	; 0x18
    1c92:	99 8d       	ldd	r25, Y+25	; 0x19
    1c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9d 8b       	std	Y+21, r25	; 0x15
    1c9e:	8c 8b       	std	Y+20, r24	; 0x14
    1ca0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ca4:	99 8b       	std	Y+17, r25	; 0x11
    1ca6:	88 8b       	std	Y+16, r24	; 0x10
    1ca8:	88 89       	ldd	r24, Y+16	; 0x10
    1caa:	99 89       	ldd	r25, Y+17	; 0x11
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <HLCD_voidInit+0x456>
    1cb0:	99 8b       	std	Y+17, r25	; 0x11
    1cb2:	88 8b       	std	Y+16, r24	; 0x10
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <HLCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cb8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8e 8f       	std	Y+30, r24	; 0x1e
    1cc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ccc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cce:	8a 95       	dec	r24
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <HLCD_voidInit+0x478>
    1cd2:	8f 87       	std	Y+15, r24	; 0x0f

	//wait more than 39 us
		_delay_us(40);

	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e4       	ldi	r27, 0x40	; 64
    1ce2:	8b 87       	std	Y+11, r24	; 0x0b
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8f 83       	std	Y+7, r24	; 0x07
    1d04:	98 87       	std	Y+8, r25	; 0x08
    1d06:	a9 87       	std	Y+9, r26	; 0x09
    1d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <HLCD_voidInit+0x4d6>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <HLCD_voidInit+0x554>
	else if (__tmp > 65535)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <HLCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <HLCD_voidInit+0x536>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <HLCD_voidInit+0x524>
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <HLCD_voidInit+0x518>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <HLCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <HLCD_voidInit+0x560>
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	//wait more than 1.53ms
	_delay_ms(2);


	//Entry Mode Set 0b00000110 with no shift and writing from left to right
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1dbe:	86 e0       	ldi	r24, 0x06	; 6
    1dc0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
}
    1dc4:	c4 5b       	subi	r28, 0xB4	; 180
    1dc6:	df 4f       	sbci	r29, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <HLCD_voidClearDisplay>:




void HLCD_voidClearDisplay(void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	2e 97       	sbiw	r28, 0x0e	; 14
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61


	//Display Clear 0b00000001
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e4       	ldi	r27, 0x40	; 64
    1dfe:	8b 87       	std	Y+11, r24	; 0x0b
    1e00:	9c 87       	std	Y+12, r25	; 0x0c
    1e02:	ad 87       	std	Y+13, r26	; 0x0d
    1e04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a ef       	ldi	r20, 0xFA	; 250
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
    1e20:	98 87       	std	Y+8, r25	; 0x08
    1e22:	a9 87       	std	Y+9, r26	; 0x09
    1e24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e26:	6f 81       	ldd	r22, Y+7	; 0x07
    1e28:	78 85       	ldd	r23, Y+8	; 0x08
    1e2a:	89 85       	ldd	r24, Y+9	; 0x09
    1e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <HLCD_voidClearDisplay+0xcc>
    1e8a:	88 ec       	ldi	r24, 0xC8	; 200
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9c 83       	std	Y+4, r25	; 0x04
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <HLCD_voidClearDisplay+0xba>
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <HLCD_voidClearDisplay+0xae>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <HLCD_voidClearDisplay+0xf6>
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01

	//wait more than 1.53ms
	_delay_ms(2);


}
    1eda:	2e 96       	adiw	r28, 0x0e	; 14
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *A_PtrtoString)

{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <HLCD_voidSendString+0x6>
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <HLCD_voidSendString+0x24>
	while(*A_PtrtoString!='\0')
	//or the lab eng. condition since the decimal of '\0\ is 0: while(*A_PtrtoString>0)
	//or while(*A_PtrtoString!=0)
	{

		HLCD_voidSendData(*A_PtrtoString);
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	80 81       	ld	r24, Z
    1f02:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendData>
		A_PtrtoString++;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidSendString(u8 *A_PtrtoString)

{

	while(*A_PtrtoString!='\0')
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	80 81       	ld	r24, Z
    1f16:	88 23       	and	r24, r24
    1f18:	89 f7       	brne	.-30     	; 0x1efc <HLCD_voidSendString+0x10>



	}

}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <HLCD_voidGoToPosition>:




void HLCD_voidGoToPosition(u8 A_u8RowNumber,u8 A_u8ColumnNumber)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	6c 97       	sbiw	r28, 0x1c	; 28
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	89 8f       	std	Y+25, r24	; 0x19
    1f3a:	6a 8f       	std	Y+26, r22	; 0x1a
	//Here I have assumed that the index of the first row & first column both will be 0
	switch(A_u8RowNumber)
    1f3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3c 8f       	std	Y+28, r19	; 0x1c
    1f44:	2b 8f       	std	Y+27, r18	; 0x1b
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	31 f0       	breq	.+12     	; 0x1f5a <HLCD_voidGoToPosition+0x36>
    1f4e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1f50:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1f52:	21 30       	cpi	r18, 0x01	; 1
    1f54:	31 05       	cpc	r19, r1
    1f56:	31 f0       	breq	.+12     	; 0x1f64 <HLCD_voidGoToPosition+0x40>
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <HLCD_voidGoToPosition+0x48>
	{

	case ROW1: HLCD_voidSendCommand(ROW1_ADDRESS_START+A_u8ColumnNumber);  break;
    1f5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f5c:	80 58       	subi	r24, 0x80	; 128
    1f5e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <HLCD_voidGoToPosition+0x48>
	case ROW2: HLCD_voidSendCommand(ROW2_ADDRESS_START+A_u8ColumnNumber);  break;
    1f64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f66:	80 54       	subi	r24, 0x40	; 64
    1f68:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e2       	ldi	r26, 0x20	; 32
    1f72:	b2 e4       	ldi	r27, 0x42	; 66
    1f74:	8d 8b       	std	Y+21, r24	; 0x15
    1f76:	9e 8b       	std	Y+22, r25	; 0x16
    1f78:	af 8b       	std	Y+23, r26	; 0x17
    1f7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f80:	8f 89       	ldd	r24, Y+23	; 0x17
    1f82:	98 8d       	ldd	r25, Y+24	; 0x18
    1f84:	2b ea       	ldi	r18, 0xAB	; 171
    1f86:	3a ea       	ldi	r19, 0xAA	; 170
    1f88:	4a e2       	ldi	r20, 0x2A	; 42
    1f8a:	50 e4       	ldi	r21, 0x40	; 64
    1f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	89 8b       	std	Y+17, r24	; 0x11
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	ab 8b       	std	Y+19, r26	; 0x13
    1f9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f9c:	69 89       	ldd	r22, Y+17	; 0x11
    1f9e:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	1c f4       	brge	.+6      	; 0x1fba <HLCD_voidGoToPosition+0x96>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	88 8b       	std	Y+16, r24	; 0x10
    1fb8:	91 c0       	rjmp	.+290    	; 0x20dc <HLCD_voidGoToPosition+0x1b8>
	else if (__tmp > 255)
    1fba:	69 89       	ldd	r22, Y+17	; 0x11
    1fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	53 e4       	ldi	r21, 0x43	; 67
    1fca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <HLCD_voidGoToPosition+0xb0>
    1fd2:	7b c0       	rjmp	.+246    	; 0x20ca <HLCD_voidGoToPosition+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a e7       	ldi	r20, 0x7A	; 122
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	8c 87       	std	Y+12, r24	; 0x0c
    1fee:	9d 87       	std	Y+13, r25	; 0x0d
    1ff0:	ae 87       	std	Y+14, r26	; 0x0e
    1ff2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ff6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a ef       	ldi	r20, 0xFA	; 250
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	88 87       	std	Y+8, r24	; 0x08
    200e:	99 87       	std	Y+9, r25	; 0x09
    2010:	aa 87       	std	Y+10, r26	; 0x0a
    2012:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2014:	68 85       	ldd	r22, Y+8	; 0x08
    2016:	79 85       	ldd	r23, Y+9	; 0x09
    2018:	8a 85       	ldd	r24, Y+10	; 0x0a
    201a:	9b 85       	ldd	r25, Y+11	; 0x0b
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <HLCD_voidGoToPosition+0x112>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9f 83       	std	Y+7, r25	; 0x07
    2032:	8e 83       	std	Y+6, r24	; 0x06
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <HLCD_voidGoToPosition+0x190>
	else if (__tmp > 65535)
    2036:	68 85       	ldd	r22, Y+8	; 0x08
    2038:	79 85       	ldd	r23, Y+9	; 0x09
    203a:	8a 85       	ldd	r24, Y+10	; 0x0a
    203c:	9b 85       	ldd	r25, Y+11	; 0x0b
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <HLCD_voidGoToPosition+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2050:	7d 85       	ldd	r23, Y+13	; 0x0d
    2052:	8e 85       	ldd	r24, Y+14	; 0x0e
    2054:	9f 85       	ldd	r25, Y+15	; 0x0f
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9f 83       	std	Y+7, r25	; 0x07
    2074:	8e 83       	std	Y+6, r24	; 0x06
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <HLCD_voidGoToPosition+0x172>
    2078:	88 ec       	ldi	r24, 0xC8	; 200
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9d 83       	std	Y+5, r25	; 0x05
    207e:	8c 83       	std	Y+4, r24	; 0x04
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	9d 81       	ldd	r25, Y+5	; 0x05
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <HLCD_voidGoToPosition+0x160>
    2088:	9d 83       	std	Y+5, r25	; 0x05
    208a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8e 81       	ldd	r24, Y+6	; 0x06
    208e:	9f 81       	ldd	r25, Y+7	; 0x07
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9f 83       	std	Y+7, r25	; 0x07
    2094:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	9f 81       	ldd	r25, Y+7	; 0x07
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <HLCD_voidGoToPosition+0x154>
    209e:	24 c0       	rjmp	.+72     	; 0x20e8 <HLCD_voidGoToPosition+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	68 85       	ldd	r22, Y+8	; 0x08
    20a2:	79 85       	ldd	r23, Y+9	; 0x09
    20a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9f 83       	std	Y+7, r25	; 0x07
    20b2:	8e 83       	std	Y+6, r24	; 0x06
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	9b 83       	std	Y+3, r25	; 0x03
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <HLCD_voidGoToPosition+0x19c>
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <HLCD_voidGoToPosition+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ca:	69 89       	ldd	r22, Y+17	; 0x11
    20cc:	7a 89       	ldd	r23, Y+18	; 0x12
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	88 8b       	std	Y+16, r24	; 0x10
    20dc:	88 89       	ldd	r24, Y+16	; 0x10
    20de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	8a 95       	dec	r24
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <HLCD_voidGoToPosition+0x1be>
    20e6:	89 83       	std	Y+1, r24	; 0x01

	//wait for more than 39 usec
	_delay_us(40);


}
    20e8:	6c 96       	adiw	r28, 0x1c	; 28
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <HLCD_voidDisplayNumber>:


void HLCD_voidDisplayNumber(s32 A_s32Number)
{
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	28 97       	sbiw	r28, 0x08	; 8
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	6d 83       	std	Y+5, r22	; 0x05
    2118:	7e 83       	std	Y+6, r23	; 0x06
    211a:	8f 83       	std	Y+7, r24	; 0x07
    211c:	98 87       	std	Y+8, r25	; 0x08
	u32 L_u32Number=1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	ab 83       	std	Y+3, r26	; 0x03
    212c:	bc 83       	std	Y+4, r27	; 0x04

	if (A_s32Number==0)
    212e:	8d 81       	ldd	r24, Y+5	; 0x05
    2130:	9e 81       	ldd	r25, Y+6	; 0x06
    2132:	af 81       	ldd	r26, Y+7	; 0x07
    2134:	b8 85       	ldd	r27, Y+8	; 0x08
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	a1 05       	cpc	r26, r1
    213a:	b1 05       	cpc	r27, r1
    213c:	21 f4       	brne	.+8      	; 0x2146 <HLCD_voidDisplayNumber+0x4c>
	{
		HLCD_voidSendData('0');
    213e:	80 e3       	ldi	r24, 0x30	; 48
    2140:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendData>
    2144:	50 c0       	rjmp	.+160    	; 0x21e6 <HLCD_voidDisplayNumber+0xec>
	}
	else if (A_s32Number<0)
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	af 81       	ldd	r26, Y+7	; 0x07
    214c:	b8 85       	ldd	r27, Y+8	; 0x08
    214e:	bb 23       	and	r27, r27
    2150:	0c f0       	brlt	.+2      	; 0x2154 <HLCD_voidDisplayNumber+0x5a>
    2152:	49 c0       	rjmp	.+146    	; 0x21e6 <HLCD_voidDisplayNumber+0xec>
	{
		HLCD_voidSendData('-');
    2154:	8d e2       	ldi	r24, 0x2D	; 45
    2156:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendData>
		A_s32Number=A_s32Number*-1;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	af 81       	ldd	r26, Y+7	; 0x07
    2160:	b8 85       	ldd	r27, Y+8	; 0x08
    2162:	b0 95       	com	r27
    2164:	a0 95       	com	r26
    2166:	90 95       	com	r25
    2168:	81 95       	neg	r24
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	af 4f       	sbci	r26, 0xFF	; 255
    216e:	bf 4f       	sbci	r27, 0xFF	; 255
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	af 83       	std	Y+7, r26	; 0x07
    2176:	b8 87       	std	Y+8, r27	; 0x08
    2178:	36 c0       	rjmp	.+108    	; 0x21e6 <HLCD_voidDisplayNumber+0xec>
	}

	while(A_s32Number!=0)
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	ab 81       	ldd	r26, Y+3	; 0x03
    2180:	bc 81       	ldd	r27, Y+4	; 0x04
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 77 13 	call	0x26ee	; 0x26ee <__mulsi3>
    2192:	7b 01       	movw	r14, r22
    2194:	8c 01       	movw	r16, r24
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	af 81       	ldd	r26, Y+7	; 0x07
    219c:	b8 85       	ldd	r27, Y+8	; 0x08
    219e:	2a e0       	ldi	r18, 0x0A	; 10
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 b8 13 	call	0x2770	; 0x2770 <__divmodsi4>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8e 0d       	add	r24, r14
    21b4:	9f 1d       	adc	r25, r15
    21b6:	a0 1f       	adc	r26, r16
    21b8:	b1 1f       	adc	r27, r17
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	ab 83       	std	Y+3, r26	; 0x03
    21c0:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Number/=10;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	af 81       	ldd	r26, Y+7	; 0x07
    21c8:	b8 85       	ldd	r27, Y+8	; 0x08
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 b8 13 	call	0x2770	; 0x2770 <__divmodsi4>
    21da:	da 01       	movw	r26, r20
    21dc:	c9 01       	movw	r24, r18
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	af 83       	std	Y+7, r26	; 0x07
    21e4:	b8 87       	std	Y+8, r27	; 0x08
	{
		HLCD_voidSendData('-');
		A_s32Number=A_s32Number*-1;
	}

	while(A_s32Number!=0)
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	af 81       	ldd	r26, Y+7	; 0x07
    21ec:	b8 85       	ldd	r27, Y+8	; 0x08
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	a1 05       	cpc	r26, r1
    21f2:	b1 05       	cpc	r27, r1
    21f4:	11 f6       	brne	.-124    	; 0x217a <HLCD_voidDisplayNumber+0x80>
    21f6:	23 c0       	rjmp	.+70     	; 0x223e <HLCD_voidDisplayNumber+0x144>
	}

	while(L_u32Number!=1)
	{
		//we added 48 as '0' has ascii of 48
		HLCD_voidSendData(L_u32Number%10+48);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	ab 81       	ldd	r26, Y+3	; 0x03
    21fe:	bc 81       	ldd	r27, Y+4	; 0x04
    2200:	2a e0       	ldi	r18, 0x0A	; 10
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	80 5d       	subi	r24, 0xD0	; 208
    2216:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendData>
		L_u32Number/=10;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	ab 81       	ldd	r26, Y+3	; 0x03
    2220:	bc 81       	ldd	r27, Y+4	; 0x04
    2222:	2a e0       	ldi	r18, 0x0A	; 10
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
    2232:	da 01       	movw	r26, r20
    2234:	c9 01       	movw	r24, r18
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	ab 83       	std	Y+3, r26	; 0x03
    223c:	bc 83       	std	Y+4, r27	; 0x04
	{
		L_u32Number=L_u32Number*10 +A_s32Number%10;
		A_s32Number/=10;
	}

	while(L_u32Number!=1)
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	ab 81       	ldd	r26, Y+3	; 0x03
    2244:	bc 81       	ldd	r27, Y+4	; 0x04
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	a1 05       	cpc	r26, r1
    224c:	b1 05       	cpc	r27, r1
    224e:	a1 f6       	brne	.-88     	; 0x21f8 <HLCD_voidDisplayNumber+0xfe>
		HLCD_voidSendData(L_u32Number%10+48);
		L_u32Number/=10;
	}


}
    2250:	28 96       	adiw	r28, 0x08	; 8
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	08 95       	ret

0000226a <HLCD_voidWriteOnCGRAM>:




void HLCD_voidWriteOnCGRAM(u8 A_u8PatternIndex,u8 *A_u8PtrToPatternValue)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <HLCD_voidWriteOnCGRAM+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <HLCD_voidWriteOnCGRAM+0x8>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <HLCD_voidWriteOnCGRAM+0xa>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	7c 83       	std	Y+4, r23	; 0x04
    227c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8LoopIterator;

	/* 1- Set AC to CGRAM  */
	switch(A_u8PatternIndex)
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	3e 83       	std	Y+6, r19	; 0x06
    2286:	2d 83       	std	Y+5, r18	; 0x05
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	9e 81       	ldd	r25, Y+6	; 0x06
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	91 05       	cpc	r25, r1
    2290:	a9 f1       	breq	.+106    	; 0x22fc <HLCD_voidWriteOnCGRAM+0x92>
    2292:	2d 81       	ldd	r18, Y+5	; 0x05
    2294:	3e 81       	ldd	r19, Y+6	; 0x06
    2296:	24 30       	cpi	r18, 0x04	; 4
    2298:	31 05       	cpc	r19, r1
    229a:	7c f4       	brge	.+30     	; 0x22ba <HLCD_voidWriteOnCGRAM+0x50>
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	91 05       	cpc	r25, r1
    22a4:	19 f1       	breq	.+70     	; 0x22ec <HLCD_voidWriteOnCGRAM+0x82>
    22a6:	2d 81       	ldd	r18, Y+5	; 0x05
    22a8:	3e 81       	ldd	r19, Y+6	; 0x06
    22aa:	22 30       	cpi	r18, 0x02	; 2
    22ac:	31 05       	cpc	r19, r1
    22ae:	14 f5       	brge	.+68     	; 0x22f4 <HLCD_voidWriteOnCGRAM+0x8a>
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	b1 f0       	breq	.+44     	; 0x22e4 <HLCD_voidWriteOnCGRAM+0x7a>
    22b8:	34 c0       	rjmp	.+104    	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
    22ba:	2d 81       	ldd	r18, Y+5	; 0x05
    22bc:	3e 81       	ldd	r19, Y+6	; 0x06
    22be:	25 30       	cpi	r18, 0x05	; 5
    22c0:	31 05       	cpc	r19, r1
    22c2:	21 f1       	breq	.+72     	; 0x230c <HLCD_voidWriteOnCGRAM+0xa2>
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	85 30       	cpi	r24, 0x05	; 5
    22ca:	91 05       	cpc	r25, r1
    22cc:	dc f0       	brlt	.+54     	; 0x2304 <HLCD_voidWriteOnCGRAM+0x9a>
    22ce:	2d 81       	ldd	r18, Y+5	; 0x05
    22d0:	3e 81       	ldd	r19, Y+6	; 0x06
    22d2:	26 30       	cpi	r18, 0x06	; 6
    22d4:	31 05       	cpc	r19, r1
    22d6:	f1 f0       	breq	.+60     	; 0x2314 <HLCD_voidWriteOnCGRAM+0xaa>
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	87 30       	cpi	r24, 0x07	; 7
    22de:	91 05       	cpc	r25, r1
    22e0:	e9 f0       	breq	.+58     	; 0x231c <HLCD_voidWriteOnCGRAM+0xb2>
    22e2:	1f c0       	rjmp	.+62     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	{

	case 0: HLCD_voidSendCommand(PATTERN1_BASE_ADDRESS); break;
    22e4:	80 e4       	ldi	r24, 0x40	; 64
    22e6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    22ea:	1b c0       	rjmp	.+54     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 1: HLCD_voidSendCommand(PATTERN2_BASE_ADDRESS); break;
    22ec:	88 e4       	ldi	r24, 0x48	; 72
    22ee:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    22f2:	17 c0       	rjmp	.+46     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 2: HLCD_voidSendCommand(PATTERN3_BASE_ADDRESS); break;
    22f4:	80 e5       	ldi	r24, 0x50	; 80
    22f6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    22fa:	13 c0       	rjmp	.+38     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 3: HLCD_voidSendCommand(PATTERN4_BASE_ADDRESS); break;
    22fc:	88 e5       	ldi	r24, 0x58	; 88
    22fe:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 4: HLCD_voidSendCommand(PATTERN5_BASE_ADDRESS); break;
    2304:	80 e6       	ldi	r24, 0x60	; 96
    2306:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    230a:	0b c0       	rjmp	.+22     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 5: HLCD_voidSendCommand(PATTERN6_BASE_ADDRESS); break;
    230c:	88 e6       	ldi	r24, 0x68	; 104
    230e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 6: HLCD_voidSendCommand(PATTERN7_BASE_ADDRESS); break;
    2314:	80 e7       	ldi	r24, 0x70	; 112
    2316:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <HLCD_voidWriteOnCGRAM+0xb8>
	case 7: HLCD_voidSendCommand(PATTERN8_BASE_ADDRESS); break;
    231c:	88 e7       	ldi	r24, 0x78	; 120
    231e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <HLCD_voidSendCommand>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	0e c0       	rjmp	.+28     	; 0x2342 <HLCD_voidWriteOnCGRAM+0xd8>
	{
		HLCD_voidSendData(A_u8PtrToPatternValue[L_u8LoopIterator]);
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	fc 01       	movw	r30, r24
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	80 81       	ld	r24, Z
    2338:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendData>
	//default: /* Report Error to ensure func. arguments data validation */			break;

	}

	/* 2- Write to CGRAM  */
	for(L_u8LoopIterator=0; L_u8LoopIterator<8;L_u8LoopIterator++)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	88 30       	cpi	r24, 0x08	; 8
    2346:	78 f3       	brcs	.-34     	; 0x2326 <HLCD_voidWriteOnCGRAM+0xbc>

	}



}
    2348:	26 96       	adiw	r28, 0x06	; 6
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <HLED_voidSetLEDValue>:




void HLED_voidSetLEDValue(u8 A_u8PortNo, u8 A_u8PinNo, u8 A_u8LEDValue)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <HLED_voidSetLEDValue+0x6>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	6a 83       	std	Y+2, r22	; 0x02
    236a:	4b 83       	std	Y+3, r20	; 0x03
	if (   (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8LEDValue<=HIGH))
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	84 30       	cpi	r24, 0x04	; 4
    2370:	58 f4       	brcc	.+22     	; 0x2388 <HLED_voidSetLEDValue+0x2e>
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	88 30       	cpi	r24, 0x08	; 8
    2376:	40 f4       	brcc	.+16     	; 0x2388 <HLED_voidSetLEDValue+0x2e>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	28 f4       	brcc	.+10     	; 0x2388 <HLED_voidSetLEDValue+0x2e>
	{
		MDIO_voidSetPinValue(A_u8PortNo,A_u8PinNo,A_u8LEDValue);
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	6a 81       	ldd	r22, Y+2	; 0x02
    2382:	4b 81       	ldd	r20, Y+3	; 0x03
    2384:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>

	}

}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <HLED_voidSetLEDON>:



void HLED_voidSetLEDON(u8 A_u8PortNo, u8 A_u8PinNo)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	00 d0       	rcall	.+0      	; 0x239a <HLED_voidSetLEDON+0x6>
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	6a 83       	std	Y+2, r22	; 0x02
	if (   (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	84 30       	cpi	r24, 0x04	; 4
    23a6:	40 f4       	brcc	.+16     	; 0x23b8 <HLED_voidSetLEDON+0x24>
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	88 30       	cpi	r24, 0x08	; 8
    23ac:	28 f4       	brcc	.+10     	; 0x23b8 <HLED_voidSetLEDON+0x24>
	{

		MDIO_voidSetPinValue(A_u8PortNo,A_u8PinNo,HIGH);
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	6a 81       	ldd	r22, Y+2	; 0x02
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>

	}

}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <HLED_voidSetLEDOFF>:
void HLED_voidSetLEDOFF(u8 A_u8PortNo, u8 A_u8PinNo)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <HLED_voidSetLEDOFF+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	6a 83       	std	Y+2, r22	; 0x02
	if (   (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) )
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	84 30       	cpi	r24, 0x04	; 4
    23d4:	40 f4       	brcc	.+16     	; 0x23e6 <HLED_voidSetLEDOFF+0x24>
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	88 30       	cpi	r24, 0x08	; 8
    23da:	28 f4       	brcc	.+10     	; 0x23e6 <HLED_voidSetLEDOFF+0x24>
	{

		MDIO_voidSetPinValue(A_u8PortNo,A_u8PinNo,LOW);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	6a 81       	ldd	r22, Y+2	; 0x02
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <MDIO_voidSetPinValue>

	}

}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <main>:
#include "util/delay.h"


//Project Show ADC no of steps on LEDS as if it is a battery charge status
int main (void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	6e 97       	sbiw	r28, 0x1e	; 30
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
	//We have a 10 bit ADC of a value  ranging from  0 to 1023 that will be displayed on 8 LEDS
	//thus, every 1024/8=128 step we will operate a LED


	// Control Pins for LCD
		MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN0,OUTPUT);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN1,OUTPUT);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CONTROL_PORT,PIN2,OUTPUT);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 bc 06 	call	0xd78	; 0xd78 <MDIO_voidSetPinDirection>

		//Data pins for LCD
		MDIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	6f ef       	ldi	r22, 0xFF	; 255
    2426:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_voidSetPortDirection>

		//Set port direction for leds
		MDIO_voidSetPortDirection(PORTD,0xFF);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	6f ef       	ldi	r22, 0xFF	; 255
    242e:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_voidSetPortDirection>

		//Init. LCD & ADC
		MADC_voidInit();
    2432:	0e 94 47 06 	call	0xc8e	; 0xc8e <MADC_voidInit>
		HLCD_voidInit();
    2436:	0e 94 2b 0c 	call	0x1856	; 0x1856 <HLCD_voidInit>


		//LCD says high
		HLCD_voidSendString("Hi There!");
    243a:	80 e6       	ldi	r24, 0x60	; 96
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <HLCD_voidSendString>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	aa e7       	ldi	r26, 0x7A	; 122
    2448:	b4 e4       	ldi	r27, 0x44	; 68
    244a:	89 8f       	std	Y+25, r24	; 0x19
    244c:	9a 8f       	std	Y+26, r25	; 0x1a
    244e:	ab 8f       	std	Y+27, r26	; 0x1b
    2450:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	69 8d       	ldd	r22, Y+25	; 0x19
    2454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a ef       	ldi	r20, 0xFA	; 250
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8d 8b       	std	Y+21, r24	; 0x15
    246c:	9e 8b       	std	Y+22, r25	; 0x16
    246e:	af 8b       	std	Y+23, r26	; 0x17
    2470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <main+0xa4>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <main+0x122>
	else if (__tmp > 65535)
    2494:	6d 89       	ldd	r22, Y+21	; 0x15
    2496:	7e 89       	ldd	r23, Y+22	; 0x16
    2498:	8f 89       	ldd	r24, Y+23	; 0x17
    249a:	98 8d       	ldd	r25, Y+24	; 0x18
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	69 8d       	ldd	r22, Y+25	; 0x19
    24ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <main+0x104>
    24d6:	88 ec       	ldi	r24, 0xC8	; 200
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	9a 89       	ldd	r25, Y+18	; 0x12
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <main+0xf2>
    24e6:	9a 8b       	std	Y+18, r25	; 0x12
    24e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8b 89       	ldd	r24, Y+19	; 0x13
    24f6:	9c 89       	ldd	r25, Y+20	; 0x14
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <main+0xe6>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2500:	7e 89       	ldd	r23, Y+22	; 0x16
    2502:	8f 89       	ldd	r24, Y+23	; 0x17
    2504:	98 8d       	ldd	r25, Y+24	; 0x18
    2506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	8b 89       	ldd	r24, Y+19	; 0x13
    2514:	9c 89       	ldd	r25, Y+20	; 0x14
    2516:	98 8b       	std	Y+16, r25	; 0x10
    2518:	8f 87       	std	Y+15, r24	; 0x0f
    251a:	8f 85       	ldd	r24, Y+15	; 0x0f
    251c:	98 89       	ldd	r25, Y+16	; 0x10
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <main+0x12e>
    2522:	98 8b       	std	Y+16, r25	; 0x10
    2524:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);


		u16 L_u16ADCValue=0;
    2526:	1e 8e       	std	Y+30, r1	; 0x1e
    2528:	1d 8e       	std	Y+29, r1	; 0x1d


	while(1)
	{
		//assign value of ADC reading to a var. to be used
		L_u16ADCValue=MADC_u16AnalogRead(CHANNEL_0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	0e 94 80 06 	call	0xd00	; 0xd00 <MADC_u16AnalogRead>
    2530:	9e 8f       	std	Y+30, r25	; 0x1e
    2532:	8d 8f       	std	Y+29, r24	; 0x1d

		//operate nothing
		if(L_u16ADCValue==0)
    2534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	29 f4       	brne	.+10     	; 0x2546 <main+0x156>
		{
			MDIO_voidSetPortValue(PORTD,0b0);
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    2544:	56 c0       	rjmp	.+172    	; 0x25f2 <main+0x202>
		}
		//operate LED1
		else if(L_u16ADCValue<128)
    2546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2548:	9e 8d       	ldd	r25, Y+30	; 0x1e
    254a:	80 38       	cpi	r24, 0x80	; 128
    254c:	91 05       	cpc	r25, r1
    254e:	28 f4       	brcc	.+10     	; 0x255a <main+0x16a>
		{
			MDIO_voidSetPortValue(PORTD,0b1);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    2558:	4c c0       	rjmp	.+152    	; 0x25f2 <main+0x202>
		}
		//operate LED2
		else if(L_u16ADCValue<128*2)
    255a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    255c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    255e:	8f 3f       	cpi	r24, 0xFF	; 255
    2560:	91 05       	cpc	r25, r1
    2562:	09 f0       	breq	.+2      	; 0x2566 <main+0x176>
    2564:	28 f4       	brcc	.+10     	; 0x2570 <main+0x180>
		{
			MDIO_voidSetPortValue(PORTD,0b11);
    2566:	83 e0       	ldi	r24, 0x03	; 3
    2568:	63 e0       	ldi	r22, 0x03	; 3
    256a:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    256e:	41 c0       	rjmp	.+130    	; 0x25f2 <main+0x202>
		}
		//operate LED3
		else if(L_u16ADCValue<128*3)
    2570:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2572:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2574:	21 e0       	ldi	r18, 0x01	; 1
    2576:	80 38       	cpi	r24, 0x80	; 128
    2578:	92 07       	cpc	r25, r18
    257a:	28 f4       	brcc	.+10     	; 0x2586 <main+0x196>
		{
			MDIO_voidSetPortValue(PORTD,0b111);
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	67 e0       	ldi	r22, 0x07	; 7
    2580:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    2584:	36 c0       	rjmp	.+108    	; 0x25f2 <main+0x202>
		}
		//operate LED4
		else if(L_u16ADCValue<128*4)
    2586:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2588:	9e 8d       	ldd	r25, Y+30	; 0x1e
    258a:	22 e0       	ldi	r18, 0x02	; 2
    258c:	80 30       	cpi	r24, 0x00	; 0
    258e:	92 07       	cpc	r25, r18
    2590:	28 f4       	brcc	.+10     	; 0x259c <main+0x1ac>
		{
			MDIO_voidSetPortValue(PORTD,0b1111);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	6f e0       	ldi	r22, 0x0F	; 15
    2596:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    259a:	2b c0       	rjmp	.+86     	; 0x25f2 <main+0x202>
		}
		//operate LEd5
		else if(L_u16ADCValue<128*5)
    259c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25a0:	22 e0       	ldi	r18, 0x02	; 2
    25a2:	80 38       	cpi	r24, 0x80	; 128
    25a4:	92 07       	cpc	r25, r18
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <main+0x1c2>
		{
			MDIO_voidSetPortValue(PORTD,0x1F);
    25a8:	83 e0       	ldi	r24, 0x03	; 3
    25aa:	6f e1       	ldi	r22, 0x1F	; 31
    25ac:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    25b0:	20 c0       	rjmp	.+64     	; 0x25f2 <main+0x202>
		}
		//operate LED6
		else if(L_u16ADCValue<128*6)
    25b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b6:	23 e0       	ldi	r18, 0x03	; 3
    25b8:	80 30       	cpi	r24, 0x00	; 0
    25ba:	92 07       	cpc	r25, r18
    25bc:	28 f4       	brcc	.+10     	; 0x25c8 <main+0x1d8>
		{
			MDIO_voidSetPortValue(PORTD,0x3F);
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	6f e3       	ldi	r22, 0x3F	; 63
    25c2:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    25c6:	15 c0       	rjmp	.+42     	; 0x25f2 <main+0x202>
		}
		//operate LED7
		else if(L_u16ADCValue<128*7)
    25c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25cc:	23 e0       	ldi	r18, 0x03	; 3
    25ce:	80 38       	cpi	r24, 0x80	; 128
    25d0:	92 07       	cpc	r25, r18
    25d2:	28 f4       	brcc	.+10     	; 0x25de <main+0x1ee>
		{
			MDIO_voidSetPortValue(PORTD,0x7F);
    25d4:	83 e0       	ldi	r24, 0x03	; 3
    25d6:	6f e7       	ldi	r22, 0x7F	; 127
    25d8:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>
    25dc:	0a c0       	rjmp	.+20     	; 0x25f2 <main+0x202>
		}
		//operate LED8
		else if(L_u16ADCValue<128*8)
    25de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e2:	24 e0       	ldi	r18, 0x04	; 4
    25e4:	80 30       	cpi	r24, 0x00	; 0
    25e6:	92 07       	cpc	r25, r18
    25e8:	20 f4       	brcc	.+8      	; 0x25f2 <main+0x202>
		{
			MDIO_voidSetPortValue(PORTD,0xFF);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	6f ef       	ldi	r22, 0xFF	; 255
    25ee:	0e 94 c7 09 	call	0x138e	; 0x138e <MDIO_voidSetPortValue>




		//Clr screen
		HLCD_voidClearDisplay();
    25f2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <HLCD_voidClearDisplay>

		//print ADC value
		HLCD_voidDisplayNumber(L_u16ADCValue);
    25f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25fa:	cc 01       	movw	r24, r24
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 7d 10 	call	0x20fa	; 0x20fa <HLCD_voidDisplayNumber>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	aa e7       	ldi	r26, 0x7A	; 122
    260e:	b3 e4       	ldi	r27, 0x43	; 67
    2610:	8b 87       	std	Y+11, r24	; 0x0b
    2612:	9c 87       	std	Y+12, r25	; 0x0c
    2614:	ad 87       	std	Y+13, r26	; 0x0d
    2616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	6b 85       	ldd	r22, Y+11	; 0x0b
    261a:	7c 85       	ldd	r23, Y+12	; 0x0c
    261c:	8d 85       	ldd	r24, Y+13	; 0x0d
    261e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a ef       	ldi	r20, 0xFA	; 250
    2626:	54 e4       	ldi	r21, 0x44	; 68
    2628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8f 83       	std	Y+7, r24	; 0x07
    2632:	98 87       	std	Y+8, r25	; 0x08
    2634:	a9 87       	std	Y+9, r26	; 0x09
    2636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <main+0x26a>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <main+0x2e8>
	else if (__tmp > 65535)
    265a:	6f 81       	ldd	r22, Y+7	; 0x07
    265c:	78 85       	ldd	r23, Y+8	; 0x08
    265e:	89 85       	ldd	r24, Y+9	; 0x09
    2660:	9a 85       	ldd	r25, Y+10	; 0x0a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	6b 85       	ldd	r22, Y+11	; 0x0b
    2674:	7c 85       	ldd	r23, Y+12	; 0x0c
    2676:	8d 85       	ldd	r24, Y+13	; 0x0d
    2678:	9e 85       	ldd	r25, Y+14	; 0x0e
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <main+0x2ca>
    269c:	88 ec       	ldi	r24, 0xC8	; 200
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <main+0x2b8>
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <main+0x2ac>
    26c2:	33 cf       	rjmp	.-410    	; 0x252a <main+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	9a 83       	std	Y+2, r25	; 0x02
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <main+0x2f4>
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	1e cf       	rjmp	.-452    	; 0x252a <main+0x13a>

000026ee <__mulsi3>:
    26ee:	62 9f       	mul	r22, r18
    26f0:	d0 01       	movw	r26, r0
    26f2:	73 9f       	mul	r23, r19
    26f4:	f0 01       	movw	r30, r0
    26f6:	82 9f       	mul	r24, r18
    26f8:	e0 0d       	add	r30, r0
    26fa:	f1 1d       	adc	r31, r1
    26fc:	64 9f       	mul	r22, r20
    26fe:	e0 0d       	add	r30, r0
    2700:	f1 1d       	adc	r31, r1
    2702:	92 9f       	mul	r25, r18
    2704:	f0 0d       	add	r31, r0
    2706:	83 9f       	mul	r24, r19
    2708:	f0 0d       	add	r31, r0
    270a:	74 9f       	mul	r23, r20
    270c:	f0 0d       	add	r31, r0
    270e:	65 9f       	mul	r22, r21
    2710:	f0 0d       	add	r31, r0
    2712:	99 27       	eor	r25, r25
    2714:	72 9f       	mul	r23, r18
    2716:	b0 0d       	add	r27, r0
    2718:	e1 1d       	adc	r30, r1
    271a:	f9 1f       	adc	r31, r25
    271c:	63 9f       	mul	r22, r19
    271e:	b0 0d       	add	r27, r0
    2720:	e1 1d       	adc	r30, r1
    2722:	f9 1f       	adc	r31, r25
    2724:	bd 01       	movw	r22, r26
    2726:	cf 01       	movw	r24, r30
    2728:	11 24       	eor	r1, r1
    272a:	08 95       	ret

0000272c <__udivmodsi4>:
    272c:	a1 e2       	ldi	r26, 0x21	; 33
    272e:	1a 2e       	mov	r1, r26
    2730:	aa 1b       	sub	r26, r26
    2732:	bb 1b       	sub	r27, r27
    2734:	fd 01       	movw	r30, r26
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <__udivmodsi4_ep>

00002738 <__udivmodsi4_loop>:
    2738:	aa 1f       	adc	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	ee 1f       	adc	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	a2 17       	cp	r26, r18
    2742:	b3 07       	cpc	r27, r19
    2744:	e4 07       	cpc	r30, r20
    2746:	f5 07       	cpc	r31, r21
    2748:	20 f0       	brcs	.+8      	; 0x2752 <__udivmodsi4_ep>
    274a:	a2 1b       	sub	r26, r18
    274c:	b3 0b       	sbc	r27, r19
    274e:	e4 0b       	sbc	r30, r20
    2750:	f5 0b       	sbc	r31, r21

00002752 <__udivmodsi4_ep>:
    2752:	66 1f       	adc	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	1a 94       	dec	r1
    275c:	69 f7       	brne	.-38     	; 0x2738 <__udivmodsi4_loop>
    275e:	60 95       	com	r22
    2760:	70 95       	com	r23
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	9b 01       	movw	r18, r22
    2768:	ac 01       	movw	r20, r24
    276a:	bd 01       	movw	r22, r26
    276c:	cf 01       	movw	r24, r30
    276e:	08 95       	ret

00002770 <__divmodsi4>:
    2770:	97 fb       	bst	r25, 7
    2772:	09 2e       	mov	r0, r25
    2774:	05 26       	eor	r0, r21
    2776:	0e d0       	rcall	.+28     	; 0x2794 <__divmodsi4_neg1>
    2778:	57 fd       	sbrc	r21, 7
    277a:	04 d0       	rcall	.+8      	; 0x2784 <__divmodsi4_neg2>
    277c:	d7 df       	rcall	.-82     	; 0x272c <__udivmodsi4>
    277e:	0a d0       	rcall	.+20     	; 0x2794 <__divmodsi4_neg1>
    2780:	00 1c       	adc	r0, r0
    2782:	38 f4       	brcc	.+14     	; 0x2792 <__divmodsi4_exit>

00002784 <__divmodsi4_neg2>:
    2784:	50 95       	com	r21
    2786:	40 95       	com	r20
    2788:	30 95       	com	r19
    278a:	21 95       	neg	r18
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	4f 4f       	sbci	r20, 0xFF	; 255
    2790:	5f 4f       	sbci	r21, 0xFF	; 255

00002792 <__divmodsi4_exit>:
    2792:	08 95       	ret

00002794 <__divmodsi4_neg1>:
    2794:	f6 f7       	brtc	.-4      	; 0x2792 <__divmodsi4_exit>
    2796:	90 95       	com	r25
    2798:	80 95       	com	r24
    279a:	70 95       	com	r23
    279c:	61 95       	neg	r22
    279e:	7f 4f       	sbci	r23, 0xFF	; 255
    27a0:	8f 4f       	sbci	r24, 0xFF	; 255
    27a2:	9f 4f       	sbci	r25, 0xFF	; 255
    27a4:	08 95       	ret

000027a6 <__prologue_saves__>:
    27a6:	2f 92       	push	r2
    27a8:	3f 92       	push	r3
    27aa:	4f 92       	push	r4
    27ac:	5f 92       	push	r5
    27ae:	6f 92       	push	r6
    27b0:	7f 92       	push	r7
    27b2:	8f 92       	push	r8
    27b4:	9f 92       	push	r9
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	ca 1b       	sub	r28, r26
    27d0:	db 0b       	sbc	r29, r27
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	09 94       	ijmp

000027de <__epilogue_restores__>:
    27de:	2a 88       	ldd	r2, Y+18	; 0x12
    27e0:	39 88       	ldd	r3, Y+17	; 0x11
    27e2:	48 88       	ldd	r4, Y+16	; 0x10
    27e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f0:	b9 84       	ldd	r11, Y+9	; 0x09
    27f2:	c8 84       	ldd	r12, Y+8	; 0x08
    27f4:	df 80       	ldd	r13, Y+7	; 0x07
    27f6:	ee 80       	ldd	r14, Y+6	; 0x06
    27f8:	fd 80       	ldd	r15, Y+5	; 0x05
    27fa:	0c 81       	ldd	r16, Y+4	; 0x04
    27fc:	1b 81       	ldd	r17, Y+3	; 0x03
    27fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2800:	b9 81       	ldd	r27, Y+1	; 0x01
    2802:	ce 0f       	add	r28, r30
    2804:	d1 1d       	adc	r29, r1
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	ed 01       	movw	r28, r26
    2812:	08 95       	ret

00002814 <_exit>:
    2814:	f8 94       	cli

00002816 <__stop_program>:
    2816:	ff cf       	rjmp	.-2      	; 0x2816 <__stop_program>
